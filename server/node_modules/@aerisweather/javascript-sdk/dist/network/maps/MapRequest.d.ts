import MapResult from './MapResult';
import Layer from './Layer';
import { GeoBounds, Coordinate } from '../../types';
import { MapRequestOptions } from '../../types/request.interface';
import { MapRequestType } from '../../types/request.enum';
import { ApiConfig } from '../../types/request.type';
/**
 * An object that is responsible for configuring and performing a single request to the Aeris Weather API.
 *
 * @export
 * @class MapRequest
 */
declare class MapRequest {
    /**
     * Base configuration for the request.
     *
     * @type {ApiConfig}
     * @memberof MapRequest
     */
    config: ApiConfig;
    /**
     * Parameters associated with the request.
     *
     * @private
     * @type {IMapOptions}
     * @memberof MapRequest
     */
    private _params;
    private _serverRange;
    private _paramKeys;
    private _http;
    /**
     * Initializes a new request instance configured with the specified client access keys.
     *
     * @param config
     */
    constructor(config: ApiConfig, opts?: MapRequestOptions);
    /**
     * Sets or returns the specified parameter.
     *
     * @param key
     * @param value
     */
    param(key: string, value?: any): MapRequest | any;
    /**
     * Sets multiple request parameters.
     *
     * @param params
     * @returns {MapRequest}
     * @memberof MapRequest
     */
    setParams(params: any): MapRequest;
    /**
     * Sets the type of map image to request, either `image` (default) or `tile`.
     *
     * @param {MapRequestType} type
     * @returns {MapRequest}
     * @memberof MapRequest
     */
    type(type: MapRequestType): MapRequest;
    /**
     * Sets the base layers, which will be rendered at the bottom of the layer stack.
     *
     * @param value
     * @returns {MapRequest}
     * @memberof MapRequest
     */
    base(value?: string | string[] | Layer[]): MapRequest;
    /**
     * Sets the weather data layers, which will be rendered above the base layers but below overlays and text.
     *
     * @param value
     * @returns {MapRequest}
     * @memberof MapRequest
     */
    data(value?: string | string[] | Layer[]): MapRequest;
    /**
     * Sets the overlay layers, which will be rendered above weather data layers but below text layers.
     *
     * @param value
     * @returns {MapRequest}
     * @memberof MapRequest
     */
    overlays(value?: string | string[] | Layer[]): MapRequest;
    /**
     * Sets the text layers, which will be rendered at the top of the layer stack.
     *
     * @param value
     * @returns {MapRequest}
     * @memberof MapRequest
     */
    text(value?: string | string[] | Layer[]): MapRequest;
    /**
     * Sets all layers, which will be rendered in the order in which they are provided by `value`.
     *
     * @param value
     * @returns {MapRequest}
     * @memberof MapRequest
     */
    layers(value?: string | string[] | Layer[]): MapRequest;
    /**
     * Sets the location the map will be centered on.
     *
     * @param value
     * @returns {MapRequest}
     * @memberof MapRequest
     */
    place(value?: string): MapRequest;
    /**
     * Sets the center for the map request. The center can be a place name or a geographical
     * coordinate value.
     *
     * @param {(string | Coordinate)} [value]
     * @returns {MapRequest}
     * @memberof MapRequest
     */
    center(value?: string | Coordinate): MapRequest;
    /**
     * Sets the zoom level.
     *
     * @param value
     * @returns {MapRequest}
     * @memberof MapRequest
     */
    zoom(value?: number): MapRequest;
    /**
     * Sets the bounding box coordinates for the rendered map region.
     *
     * @param value
     * @returns {MapRequest}
     * @memberof MapRequest
     */
    bounds(value?: GeoBounds): MapRequest;
    /**
     * Sets the map width and height.
     *
     * @param w
     * @param h
     * @returns {MapRequest}
     * @memberof MapRequest
     */
    size(w: number, h: number): MapRequest;
    /**
     * Sets the time offset value.
     *
     * @param value
     * @returns {MapRequest}
     * @memberof MapRequest
     */
    offset(value?: string | number): MapRequest;
    /**
     * Sets the time offset value using the specified date.
     *
     * @param {Date} value
     * @returns {MapRequest}
     * @memberof MapRequest
     */
    date(value: Date): MapRequest;
    /**
     * Sets whether text data should be rendered as Metric units.
     *
     * @param value
     * @returns {MapRequest}
     * @memberof MapRequest
     */
    metric(value?: boolean): MapRequest;
    /**
     * Sets the server subdomain range for the request, e.g. `[1, 2, 3, 4]`.
     *
     * @param {number[]} [value]
     * @returns {(MapRequest | number[])}
     * @memberof MapRequest
     */
    range(value?: number[]): MapRequest | number[];
    /**
     * Perform the request.
     */
    get(callback?: (result: MapResult) => void): Promise<MapResult>;
    /**
     * Returns the url string for the request based on the configured parameters and options.
     *
     * @param {string[]} [groups=[]]
     * @returns {string}
     * @memberof MapRequest
     */
    url(groups?: string[]): string;
    /**
     * Returns a copy of the request.
     *
     * @returns {MapRequest}
     * @memberof MapRequest
     */
    clone(): MapRequest;
}
export default MapRequest;
