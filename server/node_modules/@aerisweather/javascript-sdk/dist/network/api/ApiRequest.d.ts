import ApiResult from './ApiResult';
import Query from './params/Query';
import { GeoBounds } from '../../types';
import { ApiRequestOptions } from '../../types/request.interface';
import { ApiAction } from '../../types/request.enum';
import { ApiConfig } from '../../types/request.type';
/**
 * An object that is responsible for configuring and performing a single request to the Aeris
 * Weather API.
 *
 * @export
 * @class ApiRequest
 */
declare class ApiRequest {
    /**
     * Base configuration for the request.
     *
     * @type {ApiConfig}
     * @memberof ApiRequest
     */
    config: ApiConfig;
    /**
     * The parameters associated with the request.
     *
     * @private
     * @type {ApiRequestOptions}
     * @memberof ApiRequest
     */
    private _params;
    private _http;
    private _endpoint;
    private _action;
    private _requests;
    private _paramKeys;
    private _range;
    private _route;
    get requests(): ApiRequest[];
    /**
     * Initializes a new request instance configured with the specified client access keys.
     *
     * @param {ApiConfig} [config]
     * @memberof ApiRequest
     */
    constructor(config: ApiConfig, opts?: ApiRequestOptions);
    /**
     * Sets or returns the specified parameter.
     *
     * @param {string} key
     * @param {*} [value]
     * @returns {(ApiRequest | any)}
     * @memberof ApiRequest
     */
    param(key: string, value?: any): ApiRequest | any;
    /**
     * Returns the current request parameters.
     *
     * @returns {ApiRequestOptions}
     * @memberof ApiRequest
     */
    getParams(): ApiRequestOptions;
    /**
     * Sets multiple request parameters.
     *
     * @param {ApiRequestOptions} params
     * @returns {ApiRequest}
     * @memberof ApiRequest
     */
    setParams(params: ApiRequestOptions): ApiRequest;
    resetParams(): ApiRequest;
    /**
     * Sets the endpoint for the request (required).
     *
     * @param {string} endpoint
     * @returns {ApiRequest}
     * @memberof ApiRequest
     */
    endpoint(endpoint: string): ApiRequest;
    /**
     * Returns the endpoint for the request.
     *
     * @returns {string}
     * @memberof ApiRequest
     */
    getEndpoint(): string;
    /**
     * Sets the action for the request.
     *
     * @param {string} action
     * @returns {ApiRequest}
     * @memberof ApiRequest
     */
    action(action: ApiAction): ApiRequest;
    /**
     * Returns the action for the request.
     *
     * @returns {string}
     * @memberof ApiRequest
     */
    getAction(): ApiAction;
    /**
     * Sets the place for the request.
     *
     * @param {string} value
     * @returns {ApiRequest}
     * @memberof ApiRequest
     */
    place(value: string): ApiRequest;
    /**
     * Sets the request's place to the coordinate bounds string.
     *
     * @param {GeoBounds} bounds
     * @returns {ApiRequest}
     * @memberof ApiRequest
     */
    bounds(bounds: GeoBounds): ApiRequest;
    /**
     * Sets the limit parameter.
     *
     * @param {number} value
     * @returns {ApiRequest}
     * @memberof ApiRequest
     */
    limit(value: number): ApiRequest;
    /**
     * Sets the lod (level-of-detail) parameter.
     *
     * @param {number} value
     * @returns {ApiRequest}
     * @memberof ApiRequest
     */
    lod(value: number): ApiRequest;
    /**
     * Sets the mindist parameter.
     *
     * @param {(string | number)} value
     * @returns {ApiRequest}
     * @memberof ApiRequest
     */
    mindist(value: string | number): ApiRequest;
    /**
     * Sets the radius parameter.
     *
     * @param {string} value
     * @returns {ApiRequest}
     * @memberof ApiRequest
     */
    radius(value: string): ApiRequest;
    /**
     * Sets the filter parameter.
     *
     * @param {string} value
     * @returns {ApiRequest}
     * @memberof ApiRequest
     */
    filter(value: string): ApiRequest;
    /**
     * Sets the fields parameter.
     *
     * @param {string} value
     * @returns {ApiRequest}
     * @memberof ApiRequest
     */
    fields(value: string): ApiRequest;
    /**
     * Sets the query parameter.
     *
     * @param {(string | Query)} value
     * @returns {ApiRequest}
     * @memberof ApiRequest
     */
    query(value: string | Query): ApiRequest;
    /**
     * Sets the sort parameter.
     *
     * @param {string} value
     * @returns {ApiRequest}
     * @memberof ApiRequest
     */
    sort(value: string): ApiRequest;
    /**
     * Sets the skip parameter.
     *
     * @param {number} value
     * @returns {ApiRequest}
     * @memberof ApiRequest
     */
    skip(value: number): ApiRequest;
    /**
     * Sets the from parameter.
     *
     * @param {(string | Date)} value
     * @returns {ApiRequest}
     * @memberof ApiRequest
     */
    from(value: string | Date): ApiRequest;
    /**
     * Sets the to parameter.
     *
     * @param {(string | Date)} value
     * @returns {ApiRequest}
     * @memberof ApiRequest
     */
    to(value: string | Date): ApiRequest;
    /**
     * Sets the plimit paramter.
     *
     * @param {number} value
     * @returns {ApiRequest}
     * @memberof ApiRequest
     */
    plimit(value: number): ApiRequest;
    /**
     * Sets the psort parameter.
     *
     * @param {string} value
     * @returns {ApiRequest}
     * @memberof ApiRequest
     */
    psort(value: string): ApiRequest;
    /**
     * Sets the pskip parameter.
     *
     * @param {number} value
     * @returns {ApiRequest}
     * @memberof ApiRequest
     */
    pskip(value: number): ApiRequest;
    /**
     * Sets the format parameters.
     *
     * @param value
     * @returns {ApiRequest}
     * @memberof ApiRequest
     */
    format(value: string): ApiRequest;
    route(value: any): ApiRequest;
    private _requestKeys;
    /**
     * Adds a request to the batch request.
     *
     * Adding child requests to this request automatically converts the containing request to a batch request.
     *
     * @param {ApiRequest} request
     * @returns {ApiRequest}
     * @memberof ApiRequest
     */
    addRequest(request: ApiRequest): ApiRequest;
    /**
     * Removes a request from the batch request.
     *
     * @param {ApiRequest} request
     * @returns {ApiRequest}
     * @memberof ApiRequest
     */
    removeRequest(request: ApiRequest): ApiRequest;
    /**
     * Removes all requests from the batch request, converting the request instance to a non-batch request.
     *
     * @memberof ApiRequest
     */
    removeAllRequests(): void;
    /**
     * Perform the request.
     *
     * @param {(result: ApiResult) => void} [callback]
     * @returns {Promise<ApiResult>}
     * @memberof ApiRequest
     */
    get(callback?: (result: ApiResult) => void): Promise<ApiResult>;
    /**
     * Cancels any active request.
     *
     * @memberof ApiRequest
     */
    cancel(): void;
    /**
     * Returns the url string for the request based on the configured parameters and options.
     *
     * @param {boolean} [isBatch=false]
     * @returns {string}
     * @memberof ApiRequest
     */
    url(isBatch?: boolean): string;
    /**
     * Returns a copy of the request.
     *
     * @returns {ApiRequest}
     * @memberof ApiRequest
     */
    clone(): ApiRequest;
}
export default ApiRequest;
