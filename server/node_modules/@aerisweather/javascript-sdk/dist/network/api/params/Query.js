"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.QueryCondition = void 0;

/**
 * A `QueryCondition` object stores information about a single property-value condition.
 */
class QueryCondition {
  /**
   * Initializes a query condition instance for the specified property and value and optional
   * next operator.
   *
   * @param {string} property
   * @param {*} value
   * @param {Operator} [nextOperator=Operator.AND]
   * @memberof QueryCondition
   */
  constructor(property, value, nextOperator = ","
  /* AND */
  ) {
    this.property = property;
    this.value = value;
    this.nextOperator = nextOperator;
  }
  /**
   * Returns the formatted query string to be used with API requests.
   *
   * @returns {string}
   * @memberof QueryCondition
   */


  toString() {
    return `${this.property}:${this.value}`;
  }

}
/**
 * A `Query` object is a convenience wrapper for setting up and configuring a query string used
 * for API queries.
 */


exports.QueryCondition = QueryCondition;

class Query {
  /**
   * Initializes a query instance, optionally with an array of query conditions.
   *
   * @param {QueryCondition[]} [conditions=[]]
   * @memberof Query
   */
  constructor(conditions = []) {
    this._conditions = conditions || [];
  }
  /**
   * Adds a query condition.
   *
   * @param {QueryCondition} condition
   * @returns {Query}
   * @memberof Query
   */


  addCondition(condition) {
    this._conditions.push(condition);

    return this;
  }
  /**
   * Removes a query condition.
   *
   * @param {QueryCondition} condition
   * @returns {Query}
   * @memberof Query
   */


  removeCondition(condition) {
    const index = this._conditions.indexOf(condition);

    if (index !== -1) {
      this._conditions.splice(index, 1);
    }

    return this;
  }
  /**
   * Removes all query conditions.
   *
   * @returns {Query}
   * @memberof Query
   */


  removeAllConditions() {
    this._conditions = [];
    return this;
  }
  /**
   * Returns the formatted string from all query conditions to be used for API requests.
   *
   * @returns {string}
   * @memberof Query
   */


  toString() {
    const last = this._conditions.length - 1;
    return this._conditions.reduce((prev, current, index) => {
      prev += `${current.toString()}${index < last ? current.nextOperator : ''}`;
      return prev;
    }, '');
  }

}

var _default = Query;
exports.default = _default;