"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.createCancelToken = exports.isCancel = void 0;

var _axios = _interopRequireDefault(require("axios"));

var _utils = require("../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

const CancelToken = _axios.default.CancelToken;

const isCancel = e => _axios.default.isCancel(e);

exports.isCancel = isCancel;

const createCancelToken = () => {
  const source = CancelToken.source();
  return {
    token: source.token,
    source,
    cancel: () => {
      source.cancel();
    },
    isCancel: e => isCancel(e)
  };
};
/**
 * An `Http` object is an adapter that performs HTTP requests using the underlying request library.
 */


exports.createCancelToken = createCancelToken;

class Http {
  /**
   * Initializes an instance with the baseUrl and header configuration. The `baseUrl` value will
   * be prepended to all relative urls made with this instance, whereas absolute urls will be
   * passed through without prefixing.
   *
   * @param baseUrl
   * @param headers
   */
  constructor(baseUrl, headers) {
    this._client = _axios.default.create({
      baseURL: baseUrl,
      headers: (0, _utils.extend)({
        'Content-Type': 'application/json'
      }, headers)
    });
  }
  /**
   * Performs a GET request for the relative or absolute url.
   *
   * @param {string} url
   * @param {*} [opts=undefined]
   * @returns
   * @memberof Http
   */


  get(url, opts = undefined) {
    return __awaiter(this, void 0, void 0, function* () {
      try {
        const res = yield this._client.get(url, (0, _utils.extend)({
          cancelToken: new CancelToken(c => {
            this._source = c;
          })
        }, opts));
        return res;
      } catch (e) {
        if (_axios.default.isCancel && _axios.default.isCancel(e)) {
          console.info('Request canceled', e.message); // eslint-disable-line no-console
        } else {
          throw e;
        }
      }

      return null;
    });
  }
  /**
   * Performs a POST request for the relative or absolute url.
   *
   * @param {string} url
   * @param {*} data
   * @param {*} [opts=undefined]
   * @returns
   * @memberof Http
   */


  post(url, data, opts = undefined) {
    return __awaiter(this, void 0, void 0, function* () {
      try {
        const res = yield this._client.post(url, data, (0, _utils.extend)({
          cancelToken: new CancelToken(c => {
            this._source = c;
          })
        }, opts));
        return res;
      } catch (e) {
        if (_axios.default.isCancel && _axios.default.isCancel(e)) {
          console.info('Request canceled', e.message); // eslint-disable-line no-console
        } else {
          throw e;
        }
      }

      return null;
    });
  }

  cancel() {
    if (this._source) {
      this._source();
    }
  }
  /**
   * A class method that performs a request to an absolute url.
   *
   * @param url
   * @param opts
   */


  static request(url, opts = undefined) {
    return __awaiter(this, void 0, void 0, function* () {
      const res = yield _axios.default.get(url, opts);
      return res;
    });
  }

}

var _default = Http;
exports.default = _default;