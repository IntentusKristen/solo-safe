import { Size } from '../types';
import { SVGCircleOptions, SVGImageOptions, SVGPathOptions, SVGRectOptions, SVGTextOptions } from '../types/svg.interface';
/**
 * The `SVG` module provides utility functions for generating the necessary HTML for various SVG
 * elements based on certain configurations and styles.
 */
export declare module SVG {
    const calculateTextSize: (str: string, fontSize: number, fontStyle?: string, padding?: number[]) => number[];
    /**
     * Returns the SVG path string using the specified path value string and style options.
     *
     * @param {string} value
     * @param {SVGPathOptions} opts
     * @returns {string}
     * @memberof SVG
     */
    const path: (value: string, opts?: SVGPathOptions) => string;
    /**
     * Returns the SVG rectangle string for the specified width, height and style options.
     *
     * @param {number} width
     * @param {number} height
     * @param {SVGRectOptions} opts
     * @returns {string}
     * @memberof SVG
     */
    const rect: (width: number, height: number, opts?: SVGRectOptions) => string;
    /**
     * Returns the SVG circle string for the specified style options.
     *
     * @param {SVGCircleOptions} opts
     * @returns {string}
     * @memberof SVG
     */
    const circle: (container: Size, opts?: SVGCircleOptions) => string;
    /**
     * Returns the SVG text string for the specified value and style options.
     *
     * @param {string | number} value
     * @param {SVGTextOptions} opts
     * @returns {string}
     * @memberof SVG
     */
    const text: (value: string | number, container: Size, opts?: SVGTextOptions) => string;
    const image: (url: string, container: Size, opts?: SVGImageOptions) => string;
    /**
     * Returns the SVG HTML string for the specified options and array of drawable elements.
     *
     * @param {number} width
     * @param {number} height
     * @param {string[]} elements
     * @param {string} [viewBox]
     * @returns {string}
     * @memberof SVG
     */
    const svg: (width: number, height: number, elements: string[], viewBox?: string) => string;
    /**
     * Returns the SVG HTML string using the specified size and options.
     *
     * @param {number} width
     * @param {number} height
     * @param {any} opts
     * @returns {string}
     * @memberof SVG
     */
    const draw: (width: number, height: number, opts: any) => string;
}
