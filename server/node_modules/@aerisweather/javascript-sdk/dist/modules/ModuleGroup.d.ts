import Account from '../account/Account';
import InteractiveMapApp from '../apps/InteractiveMapApp';
import InteractiveMap from '../maps/interactive/InteractiveMap';
import IMapSourceModule from './interfaces/IMapSourceModule';
import IModuleGroup from './interfaces/IModuleGroup';
/**
 * A module group is a container module for one or more child modules.
 *
 * @class ModuleGroup
 */
declare class ModuleGroup implements IModuleGroup {
    /**
     * Module identifier
     *
     * @readonly
     * @type {string}
     * @memberof ModuleGroup
     */
    get id(): string;
    /**
     * Array of child modules associated with the group.
     *
     * For groups that load on-demand modules, this value will be `null` until the modules have
     * been loaded via the group's `load()` method.
     *
     * @readonly
     * @type {IMapSourceModule[]}
     * @memberof ModuleGroup
     */
    get modules(): IMapSourceModule[];
    /**
     * Aeris account associated with the module group.
     *
     * @readonly
     * @type {Account}
     * @memberof MapSourceModule
     */
    get account(): Account;
    /**
     * Application the module group was initialized with.
     *
     * @readonly
     * @type {InteractiveMapApp}
     * @memberof MapSourceModule
     */
    get app(): InteractiveMapApp;
    /**
     * Application map instance.
     *
     * @readonly
     * @type {InteractiveMap}
     * @memberof MapSourceModule
     */
    get map(): InteractiveMap;
    protected _modules: IMapSourceModule[];
    private _account;
    private _app;
    private _map;
    /**
     * Creates and initializes a module group instance with the optional array of child modules if
     * provided. Alternatively, child modules can be loaded on-demand using the group's `load()`
     * method.
     *
     * @param {IMapSourceModule[]} [modules=null]
     * @memberof ModuleGroup
     */
    constructor(modules?: IMapSourceModule[]);
    /**
     * Initializes the module group with the specified AerisWeather account and application.
     *
     * @param {Account} account
     * @param {InteractiveMapApp} app
     * @memberof MapSourceModule
     */
    initialize(account: Account, app: InteractiveMapApp, map?: InteractiveMap): void;
    /**
     * Returns the app controls configuration for the module.
     *
     * @returns {*}
     * @memberof ModuleGroup
     */
    controls(): any;
    /**
     * Loads the child modules associated with the module group. This is an asynchronous method
     * that returns a Promise that provides the array of modules for the group once they've been
     * loaded.
     *
     * @returns {Promise<any>}
     * @memberof ModuleGroup
     */
    load(): Promise<IMapSourceModule[]>;
}
export default ModuleGroup;
