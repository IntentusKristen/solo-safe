"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _utils = require("../utils");

/**
 * A module group is a container module for one or more child modules.
 *
 * @class ModuleGroup
 */
class ModuleGroup {
  /**
   * Creates and initializes a module group instance with the optional array of child modules if
   * provided. Alternatively, child modules can be loaded on-demand using the group's `load()`
   * method.
   *
   * @param {IMapSourceModule[]} [modules=null]
   * @memberof ModuleGroup
   */
  constructor(modules = null) {
    if (modules) {
      this._modules = [...modules];
    }
  }
  /**
   * Module identifier
   *
   * @readonly
   * @type {string}
   * @memberof ModuleGroup
   */


  get id() {
    return null;
  }
  /**
   * Array of child modules associated with the group.
   *
   * For groups that load on-demand modules, this value will be `null` until the modules have
   * been loaded via the group's `load()` method.
   *
   * @readonly
   * @type {IMapSourceModule[]}
   * @memberof ModuleGroup
   */


  get modules() {
    return this._modules;
  }
  /**
   * Aeris account associated with the module group.
   *
   * @readonly
   * @type {Account}
   * @memberof MapSourceModule
   */


  get account() {
    return this._account;
  }
  /**
   * Application the module group was initialized with.
   *
   * @readonly
   * @type {InteractiveMapApp}
   * @memberof MapSourceModule
   */


  get app() {
    return this._app;
  }
  /**
   * Application map instance.
   *
   * @readonly
   * @type {InteractiveMap}
   * @memberof MapSourceModule
   */


  get map() {
    return (0, _utils.isset)(this._app) ? this._app.map : this._map;
  }
  /**
   * Initializes the module group with the specified AerisWeather account and application.
   *
   * @param {Account} account
   * @param {InteractiveMapApp} app
   * @memberof MapSourceModule
   */


  initialize(account, app, map = null) {
    this._account = account;
    this._app = app;
    this._map = app ? app.map : map;
  }
  /**
   * Returns the app controls configuration for the module.
   *
   * @returns {*}
   * @memberof ModuleGroup
   */


  controls() {
    return null;
  }
  /**
   * Loads the child modules associated with the module group. This is an asynchronous method
   * that returns a Promise that provides the array of modules for the group once they've been
   * loaded.
   *
   * @returns {Promise<any>}
   * @memberof ModuleGroup
   */


  load() {
    return null;
  }

}

var _default = ModuleGroup;
exports.default = _default;
module.exports = exports.default;