import { Coordinate } from '../../../types';
import Feature from '../../../maps/geo/Feature';
/**
 * A data type that represents the route data returned by a third-party directions API.
 */
export interface RouteResult {
    /**
     * Array of points returned by the API.
     *
     * @type {Coordinate[]}
     * @memberof RouteResult
     */
    points: Coordinate[];
    /**
     * Route path as a `Feature` generated from the returned GeoJSON.
     */
    feature: Feature;
    /**
     * Route waypoints as an array of `Feature` instances generated from the returned GeoJSON.
     */
    waypoints?: Feature[];
    /**
     * Total route distance as returned by the API, in meters.
     */
    distanceMeters: number;
    /**
     * Total route travel duration as returned by the API, in seconds.
     */
    durationSeconds: number;
    /**
     * Raw API response.
     *
     * @type {*}
     * @memberof RouteResult
     */
    response: any;
}
/**
 * An interface implemented by a class that will provide routing and direction-related
 * information.
 */
export interface RouteService {
    /**
     * Receives an array of at least two coordinates to use for the route with additional options
     * as supported by the specific third-party routing service.
     *
     * @param {Coordinate[]} coords
     * @param {*} [opts]
     * @returns {Promise<RouteResult>}
     * @memberof RouteService
     */
    getDirections(points: Coordinate[] | string[], params?: any): Promise<RouteResult>;
    /**
     * Geocodes a location string to coordinates.
     *
     * @param search
     */
    geocode(search: string): Promise<Coordinate>;
    /**
     * Cancels the active service request.
     */
    cancel(): void;
}
