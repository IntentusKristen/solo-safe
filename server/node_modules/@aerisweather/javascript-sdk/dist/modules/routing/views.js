"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.routeInfoView = exports.assetInfoView = exports.zoomRouteView = void 0;

var _utils = require("../../utils");

var _color = require("../../utils/color");

var _units = require("../../utils/units");

var _utils2 = require("./utils");

var _DOM = _interopRequireDefault(require("../../display/DOM"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const handleGoToMarker = (event, handler) => {
  const $el = (0, _DOM.default)(event.currentTarget);
  const coord = $el.data('coord');
  const type = $el.data('waypoint-type');

  if (!(0, _utils.isEmpty)(coord)) {
    const [lat, lon] = coord.split(',');

    if ((0, _utils.isset)(handler)) {
      handler({
        coordinate: {
          lat,
          lon
        },
        type
      });
    }
  }
};

const zoomRouteView = onClick => ({
  id: 'zoom',
  static: true,
  renderer: () => `
		<div class="awxjs__ui-btn awxjs__ui-btn-default awxjs__ui-btn-full awxjs__btn-routing-zoom">
			Zoom to Route
		</div>
	`,
  init: view => {
    view.el('.awxjs__btn-routing-zoom').on('click', () => {
      if (onClick) {
        onClick();
      }
    });
  }
});

exports.zoomRouteView = zoomRouteView;

const assetInfoView = onViewClick => ({
  id: 'asset',
  requiresData: true,
  init: view => {
    view.on('render', () => {
      view.el('.awxjs__ui-btn-goto').on('click', e => {
        handleGoToMarker(e, onViewClick);
      });
    });
  },
  data: data => (0, _utils.get)(data, 'route.asset'),
  renderer: data => {
    const {
      title,
      description,
      imageUrl,
      status,
      loc
    } = data;
    const badgeColor = (0, _utils.get)(status, 'color');
    const badgeTextColor = (0, _color.isLight)(badgeColor) ? '#333' : '#fff';
    const badgeStyles = `background-color: ${badgeColor}; color: ${badgeTextColor}`;
    const dataAttr = [`data-waypoint-type="current"`];

    if ((0, _utils.isset)(loc)) {
      dataAttr.push(`data-coord="${loc.lat},${loc.lon}"`);
    }

    return `
			<div class="awxjs__ui-cols">
				<div class="awxjs__text-xl awxjs__text-bold awxjs__push-bottom awxjs__ui-expand">
					${title}
				</div>
				${(0, _utils.isset)(loc) ? `
					<div class="awxjs__right">
						<div class="awxjs__ui-btn-icon awxjs__ui-btn-icon-filled awxjs__ui-btn-goto" ${dataAttr.join(' ')} title="Zoom to location">
							<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 100 100">
								<path d="M50,0C30.9,0,15.6,15.3,15.6,34.4C15.6,53.4,50,100,50,100s34.4-46.6,34.4-65.6C84.4,15.3,69.1,0,50,0z M50,50
									c-8.7,0-15.6-6.9-15.6-15.6c0-8.7,6.9-15.6,15.6-15.6c8.7,0,15.6,6.9,15.6,15.6C65.6,43.1,58.7,50,50,50z"/>
							</svg>
						</div>
					</div>
				` : ''}
			</div>
			<div class="awxjs__routing-asset__details">
				<div class="awxjs__ui-cols">
					<div>
						${(0, _utils.isset)(status) ? `
							<div class="awxjs__ui-row awxjs__ui-expand">
								<div class="awxjs__ui-expand label">Status</div>
								<div class="awxjs__ui-expand value">
									<div class="awxjs__routing-asset__details-status" style="${badgeStyles}">
										${(0, _utils.get)(status, 'label')}
									</div>
								</div>
							</div>
						` : ''}
						${description ? `
							<div class="awxjs__routing-asset__details-desc awxjs__text-sm awxjs__push-top">
								${description}
							</div>
						` : ''}
					</div>
					${imageUrl ? `
						<div class="awxjs__routing-asset__details-image">
							<img src="${(0, _utils.get)(data, 'imageUrl')}" />
						</div>
					` : ''}
				</div>
			</div>
		`;
  }
});

exports.assetInfoView = assetInfoView;

const routeInfoView = onViewClick => ({
  id: 'route',
  requiresData: true,
  init: view => {
    view.on('render', () => {
      view.el('.awxjs__ui-btn-goto').on('click', e => {
        handleGoToMarker(e, onViewClick);
      });
    });
  },
  data: data => {
    if (!(0, _utils.get)(data, 'route.departure') || !(0, _utils.get)(data, 'route.destination')) {
      return undefined;
    }

    const {
      departure,
      destination,
      waypoints = [],
      distanceMeters,
      durationSeconds
    } = (0, _utils.get)(data, 'route') || {};
    const departureWeather = (0, _utils.get)(data[`forecasts_${departure.id}`], '0.periods.0');
    const destinationWeather = (0, _utils.get)(data[`forecasts_${destination.id}`], '0.periods.0');
    return (0, _utils.extend)({}, data, {
      route: {
        distance: (0, _utils.isset)(distanceMeters) ? {
          distanceMI: distanceMeters * 0.00062,
          distanceKM: distanceMeters * 0.001
        } : undefined,
        duration: durationSeconds || 0,
        departure: {
          weather: departureWeather
        },
        destination: {
          weather: destinationWeather
        }
      }
    });
  },
  request: (account, data) => {
    const {
      departure,
      destination,
      durationSeconds = 0
    } = data || {};
    const request = account.api();
    let startTimestamp = Date.now();

    if (departure) {
      const {
        loc,
        timestamp = startTimestamp
      } = departure;

      if (loc) {
        const {
          lat,
          lon
        } = loc;
        const req = account.api();
        const {
          request: forecastRequest,
          date
        } = (0, _utils2.configureForecastRequest)(req, `${lat},${lon}`, timestamp);
        request.addRequest(forecastRequest);

        if (date) {
          startTimestamp = date.getTime();
        }
      }
    }

    if (destination) {
      const {
        loc,
        timestamp = startTimestamp + durationSeconds * 1000
      } = destination;

      if (loc) {
        const {
          lat,
          lon
        } = loc;
        const req = account.api();
        const {
          request: forecastRequest
        } = (0, _utils2.configureForecastRequest)(req, `${lat},${lon}`, timestamp);
        request.addRequest(forecastRequest);
      }
    }

    return request;
  },
  renderer: data => {
    const metric = data.units === "metric"
    /* Metric */
    ;
    const {
      departure,
      destination,
      waypoints = [],
      distance,
      duration,
      selectedIndex
    } = (0, _utils.get)(data, 'route') || {}; // console.log(data);

    const startLocation = (0, _utils2.renderLocation)('major', Object.assign(Object.assign({}, departure), {
      indicator: 'A',
      type: 'start',
      timeLabel: 'Departing',
      selected: selectedIndex === 'start',
      metric
    }), duration > 0);
    const endLocation = (0, _utils2.renderLocation)('major', Object.assign(Object.assign({}, destination), {
      indicator: 'B',
      type: 'end',
      timeLabel: 'Arriving',
      selected: selectedIndex === 'end',
      metric
    }), duration > 0);
    const waypointLocations = waypoints.length > 0 ? `<div class="awxjs__routing-waypoints">
			${waypoints.map((waypoint, index) => (0, _utils2.renderLocation)('waypoint', Object.assign(Object.assign({}, waypoint), {
      type: 'waypont',
      selected: index === selectedIndex
    }))).join('\n')}
				</div>` : '';
    return `
			${(0, _utils.isset)(distance) && distance.distanceMI > 0 ? `
				<div class="awxjs__text-md awxjs__push-bottom">
					<strong>${(0, _units.formatDataValue)(distance, 'distanceMI', 'distanceKM', metric)}</strong>
					${duration > 0 ? ` - ${(0, _units.secondsToString)(duration)}` : ''}
				</div>
			` : ''}
			<div class="awxjs__routing-route">
				<div class="awxjs__routing-track${duration > 0 ? ' awxjs__routing-track-tall' : ''}">
					<svg width="10px" height="300px" viewBox="0 0 10 300">
						<line x1="5" x2="5" y1="0" y2="300" stroke-width="4" stroke-linecap="round" stroke-dasharray="1,6"/>
					</svg>
				</div>
				${startLocation}
				${waypointLocations}
				${endLocation}
			</div>
		`;
  }
});

exports.routeInfoView = routeInfoView;