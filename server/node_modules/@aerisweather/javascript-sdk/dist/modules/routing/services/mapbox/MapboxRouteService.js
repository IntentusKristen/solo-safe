"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Http = _interopRequireWildcard(require("../../../../network/Http"));

var _Feature = _interopRequireDefault(require("../../../../maps/geo/Feature"));

var _strings = require("../../../../utils/strings");

var _utils = require("../../../../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

const MAPBOX_DIRECTIONS_API = 'https://api.mapbox.com/directions/v5/mapbox/{mode}/{points}';
const MAPBOX_GEOCODE_API = 'https://api.mapbox.com/geocoding/v5/mapbox.places/{query}.json';

class MapboxRouteService {
  constructor(opts) {
    this.opts = (0, _utils.extend)({}, opts);
  }

  getDirections(points, params) {
    this.cancel();
    this.cancelToken = (0, _Http.createCancelToken)();
    return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
      let coords = [];
      const geocodingTasks = [];
      (points || []).forEach(point => {
        if ((0, _utils.isString)(point)) {
          geocodingTasks.push(this.geocode(point));
        } else {
          coords.push(point);
        }
      });

      if (geocodingTasks.length > 0) {
        try {
          const geocodingResult = yield Promise.all(geocodingTasks);

          if (geocodingResult) {
            coords = geocodingResult;
          }
        } catch (e) {
          if (this.cancelToken.isCancel(e) === false) {
            reject(e);
          }
        }
      } // append coordinates


      const url = (0, _strings.parse)(MAPBOX_DIRECTIONS_API, {
        mode: 'driving',
        points: coords.filter(v => (0, _utils.isset)(v)).map(c => `${c.lon},${c.lat}`).join(';')
      });

      if (coords.length === 0) {
        console.warn('[Aeris] Routing - Cannot request directions, invalid or empty array of route coordinates provided.', points);
        return;
      }

      ;

      _Http.default.request(url, {
        params: Object.assign({
          geometries: 'geojson',
          access_token: this.opts.accessToken
        }, params),
        cancelToken: this.cancelToken.token
      }).then(response => {
        const result = {
          points: undefined,
          feature: undefined,
          distanceMeters: 0,
          durationSeconds: 0,
          response
        };
        const {
          routes,
          waypoints
        } = (0, _utils.get)(response, 'data') || {};
        const route = routes[0] || {};
        const geometry = route.geometry;

        if (geometry) {
          const feature = new _Feature.default(geometry);
          result.feature = feature;
        }

        result.distanceMeters = route.distance || 0;
        result.durationSeconds = route.duration || 0;

        if ((0, _utils.isArray)(waypoints)) {
          result.waypoints = waypoints.map((waypoint, index) => new _Feature.default({
            type: 'Point',
            coordinates: waypoint.location,
            properties: {
              name: (0, _utils.isString)(points[index]) ? points[index] : undefined,
              distance: waypoint.distance
            }
          }));
        }

        resolve(result);
      }).catch(e => {
        if (this.cancelToken.isCancel(e) === false) {
          console.error('[Aeris] - MapboxRouteService - Directions request failed', e);
          reject(e);
        }
      });
    }));
  }

  geocode(search) {
    const url = (0, _strings.parse)(MAPBOX_GEOCODE_API, {
      query: search
    });
    return _Http.default.request(url, {
      params: {
        access_token: this.opts.accessToken
      },
      cancelToken: this.cancelToken.token
    }).then(response => {
      let coord;

      if (response.status === 200) {
        const {
          features
        } = response.data || {};

        if (features) {
          for (let i = 0, len = features.length; i < len; i += 1) {
            const feature = features[i];
            const {
              place_type: type = [],
              geometry
            } = feature;

            if (type.includes('place') || type.includes('poi')) {
              const [lon, lat] = geometry.coordinates;
              coord = {
                lat,
                lon
              };
              break;
            }
          }
        }
      }

      return coord;
    });
  }

  cancel() {
    if (this.cancelToken) {
      this.cancelToken.cancel();
    }

    this.cancelToken = undefined;
  }

}

var _default = MapboxRouteService;
exports.default = _default;
module.exports = exports.default;