"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Http = _interopRequireWildcard(require("../../../../network/Http"));

var _Feature = _interopRequireDefault(require("../../../../maps/geo/Feature"));

var _utils = require("../../../../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

const GOOGLE_DIRECTIONS_API = 'https://maps.googleapis.com/maps/api/directions/json';
const GOOGLE_GEOCODE_API = 'https://maps.googleapis.com/maps/api/geocode/json';

const loadDependencies = key => new Promise((resolve, reject) => {
  if (typeof google === 'undefined' || typeof google.maps === 'undefined') {
    Promise.all([(0, _utils.loadScript)(`https://maps.googleapis.com/maps/api/js?key=${key}`)]).then(() => {
      resolve();
    });
  } else {
    resolve();
  }
});

class GoogleRouteService {
  constructor(opts) {
    this.opts = (0, _utils.extend)({}, opts);
  }

  getDirections(points, params) {
    this.cancel();
    this.cancelToken = (0, _Http.createCancelToken)();
    return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
      let coords = [];
      const geocodingTasks = [];
      (points || []).forEach(point => {
        if ((0, _utils.isString)(point)) {
          geocodingTasks.push(this.geocode(point));
        } else {
          coords.push(point);
        }
      });

      if (geocodingTasks.length > 0) {
        try {
          const geocodingResult = yield Promise.all(geocodingTasks);

          if (geocodingResult) {
            coords = geocodingResult;
          }
        } catch (e) {
          if (this.cancelToken.isCancel(e) === false) {
            reject(e);
          }
        }
      }

      if (coords.length === 0) {
        console.warn('[Aeris] Routing - Cannot request directions, invalid or empty array of route coordinates provided.', points);
        return;
      }

      ; // directions API via client-side must be used through the Google Maps JS SDK
      // https://github.com/googlemaps/google-maps-services-js/issues/59

      yield loadDependencies(this.opts.accessToken);
      const count = coords.length;
      const origin = coords[0];
      const destination = coords[count - 1];
      const intermediate = coords.filter((_, i) => i > 0 && i < count - 1);

      if (!this.directionsService) {
        this.directionsService = new google.maps.DirectionsService();
      }

      this.directionsService.route({
        travelMode: google.maps.TravelMode.DRIVING,
        origin: `${origin.lat},${origin.lon}`,
        destination: `${destination.lat},${destination.lon}`,
        waypoints: intermediate.map(p => ({
          location: `${p.lat},${p.lon}`
        }))
      }, response => {
        const result = {
          points: undefined,
          feature: undefined,
          distanceMeters: 0,
          durationSeconds: 0,
          response
        };
        const routes = response.routes;
        const route = routes[0] || {};
        const legs = route.legs || [];
        const pathPoints = route.overview_path;
        let distanceMeters = 0;
        let durationSeconds = 0;

        if (pathPoints) {
          const pathCoords = pathPoints.map(point => [point.lng(), point.lat()]);
          result.feature = new _Feature.default({
            type: 'LineString',
            coordinates: pathCoords
          });
        }

        legs.forEach(leg => {
          distanceMeters += (0, _utils.get)(leg, 'distance.value', 0);
          durationSeconds += (0, _utils.get)(leg, 'duration.value', 0);
        });
        result.distanceMeters = distanceMeters;
        result.durationSeconds = durationSeconds;
        result.waypoints = intermediate.map((coord, index) => new _Feature.default({
          type: 'Point',
          coordinates: [coord.lon, coord.lat],
          properties: {
            name: (0, _utils.isString)(points[index + 1]) ? points[index + 1] : undefined,
            distance: 0
          }
        }));
        resolve(result);
      });
    }));
  }

  geocode(search) {
    return _Http.default.request(GOOGLE_GEOCODE_API, {
      params: {
        address: search,
        key: this.opts.accessToken
      },
      cancelToken: this.cancelToken.token
    }).then(response => {
      let coord;

      if (response.status === 200) {
        const {
          results
        } = response.data || {};

        if (results && results.length > 0) {
          const {
            lat,
            lng: lon
          } = (0, _utils.get)(results[0], 'geometry.location') || {};
          coord = {
            lat,
            lon
          };
        }
      }

      return coord;
    });
  }

  cancel() {
    if (this.cancelToken) {
      this.cancelToken.cancel();
    }

    this.cancelToken = undefined;
  }

}

var _default = GoogleRouteService;
exports.default = _default;
module.exports = exports.default;