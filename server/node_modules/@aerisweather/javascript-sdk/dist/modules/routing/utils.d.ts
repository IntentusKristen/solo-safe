import { ApiRequest } from '../..';
import { Coordinate, LatLonValue } from '../../types';
import Feature from '../../maps/geo/Feature';
import { RouteConfig, RouteData } from './interfaces';
import { MarkerStyle } from '../../maps/types';
export declare const getEndpointForDataType: (type: string) => string;
export declare const getPropForDataType: (type: string) => string;
export declare const getMarkerOpts: (type: string) => any;
export declare const configureRouteRequest: (request: ApiRequest, dataType: string, endpoint: string, points: any[]) => void;
export declare const configureForecastRequest: (request: ApiRequest, loc: string, timestamp: Date | number) => {
    request: ApiRequest;
    date: Date;
};
export declare const createPoint: (coord: LatLonValue, properties?: any) => any;
export declare const convertPointsToFeatures: (points: any[]) => Feature[];
export declare const convertCoordsToGeoJSON: (coords: Coordinate[], distance?: number, duration?: number) => {
    points: any[];
    distance: number;
};
export declare const filterWaypoints: (waypoints: any[], startCoord: LatLonValue, endCoord: LatLonValue) => any[];
export declare const getLocationData: (point: LatLonValue, place?: any) => any;
export declare const generateRouteData: (config: RouteConfig, points: LatLonValue[]) => RouteData;
export declare const generateRouteFeatures: (routeId: string, points: any, routeData: RouteData) => any[];
export declare const getMarkerStyle: (modelData: any, routeData: RouteData) => MarkerStyle;
export declare const getWindsFormatted: (data: any, metric?: boolean) => string;
export declare const renderLocation: (type: 'major' | 'waypoint', data: any, includesDuration?: boolean) => string;
