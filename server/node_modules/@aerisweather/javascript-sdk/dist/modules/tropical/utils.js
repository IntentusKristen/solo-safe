"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getTropMarkerContent = exports.getStormMarkerConfig = exports.formatStormData = exports.getAlertTypeName = exports.getStormTypeName = exports.icon = exports.color = void 0;

var _index = require("../../utils/index");

const flipForSouthernLat = code => {
  const skip = ['DB', 'WV', 'I', 'LO'];
  return skip.indexOf(code) === -1;
};

const color = (code = '') => {
  code = code.toUpperCase();

  switch (code) {
    case 'DB':
    case 'WV':
    case 'I':
    case 'LO':
    case 'EX':
      return '#4875fb';

    case 'TD':
      return '#FFFF00';

    case 'TS':
      return '#FFA801';

    case 'H':
      return '#DD0101';

    case 'H1':
      return '#DD0101';

    case 'H2':
      return '#FF0491';

    case 'H3':
      return '#DD00FD';

    case 'H4':
      return '#FEAFFF';

    case 'H5':
      return '#EFEFEF';

    case 'TY':
      return '#DD0101';

    case 'STY':
      return '#EFEFEF';

    default:
      return '#000000';
  }
};

exports.color = color;

const icon = (code = '') => {
  code = code.toUpperCase();

  switch (code) {
    case 'DB':
    case 'WV':
    case 'I':
    case 'LO':
    case 'EX':
      return `data:image/png;base64,
			iVBORw0KGgoAAAANSUhEUgAAADIAAAAxCAYAAACYq/ofAAAAnklEQVR4Ae3PIQwB
			cQCF8dckkikGfaJsZnrRm6AXVaAnfdM0mz5FE1TZphLFuxfv2u3+u93d7fu2199P
			1Y2IiIiIjuruPxo9XhrcErt/Nb6u1Z7VCXIxJPL51Az5GbICAgQIECBAgAABAgQI
			kJwB8f7e2dt6uww7vDXcnNTrlA0JniFPQ/oqMiBAgACZGLL0kXngFoZMDWmpGRER
			ERHFyMkdx1u9TkkAAAAASUVORK5CYII=`;

    case 'TD':
      return `data:image/png;base64,
			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`;

    case 'TD-FLIPPED':
      return `data:image/png;base64,
			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
			X4ABABraXKFeUC2rAAAAAElFTkSuQmCC`;

    case 'TS':
      return `data:image/png;base64,
			iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAMAAAAp4XiDAAAAM1BMVEUAAADeDx3e
			Dx3eDx3eDx3eDx3eDx3eDx3eDx3eDx3eDx3eDx3eDx3eDx3eDx3eDx3eDx3haVmj
			AAAAEXRSTlMAMCC/cID/YM+PQO+vEN+fUCJrQLgAAAHWSURBVHgBlZVhssIgDIRT
			gC2QBnr/075RMLymdBy/f1o3JpstkGVz9BvOB/qNiJ1+wiVk+kcpMca9OHpkY/j5
			ISd84CPIk4KFOnuFoZVFVwyM0c+KBYcjQwIqvZADa9iYmQHso79H2mUQAPxu6qqo
			obyIrfeahBQPIA8pjEiGhfWiKQBQnrpqTn2cvTUAIJL0ZfCorgoA+O7BGi9j5squ
			L6LbsWHC3nvGhLdRPXl1GJG8Ps9bX2+oC436heh0z0JKnJphQn+IF7Ghs9voAWYp
			KmGrsJpMSummmO+VgA/FSDosdMNra0tJpDsnYMcUTBwt0Gn8HF+ptOK4V6ywZRSz
			nGCrfJfo8/BVotDAfZFkKNvNeQgtSLhvc7fOX3CYnGQ8W3fWlqs+TZnFn1QjIW9e
			C0UPhKCzDNz6tZiHZy0qOcVmk8v1AunEookRL+qaPbhIIutL8ZZwX21yqlFSDmWP
			HkrsDh29Uv10cjKeqNJTs+sUeZy7CQ+UkV2ZqeQhD4wVYWy7XdbL0fWB6/pe2cxW
			Wm84v6/fPS0UlHX4QYTFxqraYDy7xaduINgoNaxoolFvdMOp6B6DaLKnSPCY+KA/
			2lYKpZzxxbld838I/YRHpN9ofqN//AHYjCHIaCdi5QAAAABJRU5ErkJggg==`;

    case 'H1':
    case 'H2':
    case 'H3':
    case 'H4':
    case 'H5':
    case 'H':
    case 'TY':
    case 'STY':
      return `data:image/png;base64,
			iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAMAAAAp4XiDAAAAM1BMVEUAAADeDx3e
			Dx3eDx3eDx3eDx3eDx3eDx3eDx3eDx3eDx3eDx3eDx3eDx3eDx3eDx3eDx3haVmj
			AAAAEXRSTlMAMCC/cID/YM+PQO+vEN+fUCJrQLgAAAGJSURBVHgBldXR0qsgDATg
			FWBFMMD7P+2RNoPH/tLid9eLnZI1A/i0GDxjrMMzniseMYEb/hOj936NBkNLoj1/
			bIFUaXcySiTB25r5oUT8YRKpo9fMG7vBh0BmNLLzXnK42Eiuer6hchmEZMKhXhPZ
			xcaXzCYIOkty06jqIdEK8yUTeYijUxVz9ligCg+AhB+D+96q8GCBjSNWdOacDJr6
			rmPhWFrwIsH2hulhOZXpfdEbfpWMZtCw8YXf9YLPSOIPG7rIxvKneIlMCc8jXKGE
			sywUOM1AZc5yUPvzkzlOgzKctkBZzopQK2dVPO7M90jlT7lHpqdxOktnEr/LsUeq
			zO2mj31jxMpMa0lekYTGBzOR8e+GdjSSk85UE0eywPOw9ik2vXcDB6LurpxbmTTu
			0nDn8+W1KCSTNziIz/fvyqJ/dmaavL2e3zXcJLDp8J3/uVZZ78tu3Faq/Qs4XEnh
			nSJ91Qv+MGX4fsH3K/mDOMuTdQK1aOJerL6pC04SuAsesfR4ptgF//kH34UpW6ne
			P+cAAAAASUVORK5CYII=`;

    default:
      return null;
  }
};

exports.icon = icon;

const getStormTypeName = (type = '') => {
  switch (type) {
    case 'WV':
      return 'Tropical Wave';

    case 'DB':
      return 'Disturbance';

    case 'I':
      return 'Invest';

    case 'EX':
      return 'Extratropical Low';

    case 'LO':
      return 'Low';

    case 'TD':
      return 'Tropical Depression';

    case 'TS':
      return 'Tropical Storm';

    case 'H':
      return 'Hurricane';

    case 'H1':
      return 'Category 1 Hurricane';

    case 'H2':
      return 'Category 2 Hurricane';

    case 'H3':
      return 'Category 3 Hurricane';

    case 'H4':
      return 'Category 4 Hurricane';

    case 'H5':
      return 'Category 5 Hurricane';

    case 'TY':
      return 'Typhoon';

    case 'STY':
      return 'Super Typhoon';

    default:
      return null;
  }
};

exports.getStormTypeName = getStormTypeName;

const getAlertTypeName = (alertType = '') => {
  switch (alertType) {
    case 'TR.A':
      return 'Tropical Storm Watch';

    case 'TR.W':
      return 'Tropical Storm Warning';

    case 'HU.A':
      return 'Hurricane Watch';

    case 'HU.W':
      return 'Hurricane Warning';

    default:
      return null;
  }
};

exports.getAlertTypeName = getAlertTypeName;

const formatStormData = data => {
  if ((0, _index.isArray)(data)) {
    data.forEach(item => {
      const {
        profile,
        position,
        track,
        forecast,
        id
      } = item; // eslint-disable-line object-curly-newline

      let lonShift = 0;
      let startLon;
      let lastLon;
      let crossesDateline = false;

      if (track && track.length > 0) {
        track.forEach((row, index) => {
          const {
            loc: {
              lat: plat,
              long: plon
            }
          } = row; // handle wrap-around tracks by adjusting longitude value

          if (index === 0) {
            lastLon = plon;
            startLon = plon;
          } else if (lastLon < 0 && plon > 0) {
            lonShift = -360;
          } else if (lastLon > 0 && plon < 0) {
            lonShift = 360;
          }

          row.loc.long += lonShift;
          row.isForecast = false;
          lastLon = plon; // if storm is active, flag if track point is the current position

          if (position) {
            const {
              loc: {
                lat: clat,
                long: clon
              }
            } = position;
            row.isCurrent = plat === clat && plon === clon;
          } else if (index === 0) {
            (0, _index.set)(row, 'details.stormShortName', profile.name);
            row.label = true;
          }

          row.profile = profile;
        });
      }

      if (forecast && forecast.length > 0) {
        forecast.forEach((row, index) => {
          const plon = row.loc.long;

          if (lastLon < 0 && plon > 0) {
            lonShift = -360;
          } else if (lastLon > 0 && plon < 0) {
            lonShift = 360;
          }

          row.loc.long += lonShift;
          row.isForecast = true;
          row.isCurrent = false;
          row.profile = profile;
          lastLon = plon;
        });
      }

      crossesDateline = lonShift !== 0; // if lonShift is not 0, we also need to adjust the forecast cone coords

      const coneCoords = (0, _index.get)(item, 'errorCone.coordinates');

      if (lonShift !== 0 && (0, _index.isset)(coneCoords)) {
        if ((0, _index.isset)(coneCoords[0])) {
          const coords = coneCoords[0];
          coords.forEach(coord => {
            const plon = coord[0];

            if (crossesDateline) {
              if (plon > 0 && startLon < 0) {
                lonShift = -360;
              } else if (plon < 0 && startLon > 0) {
                lonShift = 360;
              } else {
                lonShift = 0;
              }
            }

            coord[0] += lonShift;
            lastLon = plon;
          });
        }
      }
    });
  }

  return data;
};

exports.formatStormData = formatStormData;

const getStormMarkerConfig = data => {
  const {
    lat
  } = (0, _index.get)(data, 'loc');
  const type = (0, _index.get)(data, 'details.stormCat');
  const isCurrent = data.isCurrent;
  const flipped = lat < 0 && flipForSouthernLat(type);

  if (isCurrent) {
    return {
      className: 'marker-tropicalcyclone',
      svg: {
        image: {
          url: flipped && type === 'TD' ? icon(`${type}-flipped`) : icon(type),
          size: [34, 34],
          transform: flipped && type !== 'TD' ? 'scale(-1, 1) translate(-80, 0)' : ''
        },
        text: [{
          value: type === 'STY' ? 'S' : type.replace(/[^\d]/g, ''),
          anchor: 'start',
          position: 'center',
          translate: {
            y: -3
          },
          size: 20,
          color: '#ffffff',
          autosize: false
        }, {
          value: (0, _index.get)(data, 'details.stormShortName'),
          anchor: 'start',
          translate: {
            y: 22
          },
          autosize: false
        }]
      },
      size: [80, 60],
      zIndex: 50
    };
  }

  return {
    className: 'marker-tropicalcyclone',
    svg: {
      shape: {
        type: 'circle',
        fill: {
          color: color(type)
        },
        stroke: {
          color: '#ffffff',
          width: 2
        },
        size: [14, 14]
      },
      text: data.label ? {
        value: (0, _index.get)(data, 'details.stormShortName'),
        anchor: 'start',
        translate: {
          y: 12
        },
        autosize: false
      } : null
    },
    size: data.label ? [60, 40] : [14, 14],
    zIndex: data.label ? 50 : null
  };
}; // a function to create the pop up content


exports.getStormMarkerConfig = getStormMarkerConfig;

const getTropMarkerContent = data => {
  const latPos = Math.abs(data.loc.lat) + (data.loc.lat < 0 ? 'S' : 'N');
  const lonPos = Math.abs(data.loc.long) + (data.loc.long < 0 ? 'W' : 'E');
  return `
		<div class="content">
			<div class="title">${data.details.stormName}</div>
			<div class="row">
				<div class="label">Date:</div>
				<div class="value">${(0, _index.formatDate)(new Date(data.timestamp * 1000), 'h:mm a, MMM d, yyyy')}
				</div>
			</div>
			<div class="row">
				<div class="label">Advisory:</div>
				<div class="value">${(0, _index.isNull)(data.details.advisoryNumber) ? 'N/A' : data.details.advisoryNumber}</div>
			</div>
			<div class="row">
				<div class="label">Postion:</div>
				<div class="value">${latPos}, ${lonPos}</div>
			</div>
			<div class="row">
				<div class="label">Wind Speed:</div>
				<div class="value">${data.details.windSpeedMPH} mph / ${data.details.windSpeedKTS} kts</div>
			</div>
			${!(0, _index.isEmpty)(data.details.gustSpeedKPH) ? `
				<div class="row">
					<div class="label">Wind Gusts:</div>
					<div class="value">${data.details.gustSpeedMPH} mph / ${data.details.gustSpeedKTS} kts</div>
				</div>
			` : ''}
			${!(0, _index.isEmpty)(data.details.pressureIN) ? `
				<div class="row">
					<div class="label">Pressure:</div>
					<div class="value">${data.details.pressureIN} in / ${data.details.pressureMB} mb</div>
				</div>
			` : ''}
		</div>
	`;
};

exports.getTropMarkerContent = getTropMarkerContent;