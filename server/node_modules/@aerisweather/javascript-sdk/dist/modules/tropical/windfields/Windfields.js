"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _MapSourceModule = require("../../MapSourceModule");

var _index = require("../../../utils/index");

const windFieldColors = {
  '34': '#ffff00',
  '50': '#FFA500',
  '64': '#FF0000'
};

const getWindFieldColor = speedKTS => {
  const defaultColor = '#000000';
  return windFieldColors[speedKTS] || defaultColor;
};

class Windfields extends _MapSourceModule.BaseMapSourceModule {
  get id() {
    return this.opts.id || 'tropical-windfields-current';
  }

  source() {
    const request = this.account.api().endpoint('tropicalcyclones').action("search"
    /* SEARCH */
    ).fields('id,position.details.windRadii,forecast.details.windRadii').filter('windfield');
    return {
      type: 'vector',
      data: {
        service: request,
        properties: {
          id: 'id',
          category: 'windSpeedKTS',
          path: 'windField'
        },
        formatter: data => {
          const windFields = [];

          if ((0, _index.isArray)(data)) {
            data.forEach(system => {
              const {
                id,
                position,
                forecast
              } = system;
              let windRadii = (0, _index.get)(position, 'details.windRadii') || [];

              if (forecast && (0, _index.isArray)(forecast)) {
                forecast.forEach(period => {
                  const fradii = (0, _index.get)(period, 'details.windRadii');

                  if (fradii) {
                    windRadii = windRadii.concat(fradii);
                  }
                });
              }

              if ((0, _index.isArray)(windRadii)) {
                windRadii.forEach(radii => {
                  if (radii.windField) {
                    const windField = {
                      id: `${id}_${windFields.length}`,
                      windSpeedKTS: radii.windSpeedKTS,
                      windSpeedMPH: radii.windSpeedMPH,
                      windField: radii.windField
                    };
                    windFields.push(windField);
                  }
                });
              }
            });
          }

          return windFields;
        }
      },
      style: {
        polygon: data => {
          if (data && data.windSpeedKTS) {
            return {
              fill: {
                color: getWindFieldColor(data.windSpeedKTS),
                opacity: 0.85
              }
            };
          }

          return null;
        }
      }
    };
  }

  controls() {
    return {
      value: this.id,
      title: 'Windfields'
    };
  }

  legend() {
    return {
      title: 'Tropical Windfields',
      code: 'tropical-windfields'
    };
  }

}

var _default = Windfields;
exports.default = _default;
module.exports = exports.default;