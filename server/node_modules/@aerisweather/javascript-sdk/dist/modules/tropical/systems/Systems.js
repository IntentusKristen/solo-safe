"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _MapSourceModule = require("../../MapSourceModule");

var _index = require("../../../utils/index");

var _utils = require("../utils");

var _units = require("../../../utils/units");

var _strings = require("../../../utils/strings");

require("../styles/systems.css");

class Systems extends _MapSourceModule.BaseMapSourceModule {
  get id() {
    return this.opts.id || 'tropical-systems';
  }

  source() {
    const properties = {
      id: 'id',
      category: 'details.stormCat',
      timestamp: 'timestamp',
      points: ['track', 'forecast'],
      path: 'errorCone'
    };
    return {
      type: 'vector',
      data: {
        request: {
          endpoint: 'tropicalcyclones/archive',
          action: "search"
          /* SEARCH */
          ,
          parameters: {
            filter: 'active,geo',
            limit: 50
          }
        },
        properties,
        formatter: data => (0, _utils.formatStormData)(data)
      },
      style: {
        marker: data => (0, _utils.getStormMarkerConfig)(data),
        polygon: data => ({
          fill: {
            color: '#ffffff',
            opacity: 0.7
          }
        }),
        polyline: data => {
          const type = (0, _index.get)(data, 'details.stormCat');
          return {
            adjustOpacity: false,
            stroke: {
              color: (0, _utils.color)(type),
              width: 3
            }
          };
        }
      },
      animation: {
        enabled: true
      }
    };
  }

  controls() {
    return {
      value: this.id,
      title: 'Cyclones',
      filter: true,
      multiselect: false,
      segments: [{
        title: 'Active Cyclones',
        value: 'active,geo'
      }, {
        title: 'All Cyclones',
        value: 'active;notactive,geo'
      }]
    };
  }

  legend() {
    return {
      title: 'Tropical Cyclones',
      code: 'tropical-cyclones'
    };
  }

  infopanel() {
    return {
      views: [{
        renderer: data => {
          if (!(0, _index.isset)(data) || (0, _index.isEmpty)(data)) return null;
          if ((0, _index.isEmpty)(data.details) || (0, _index.isEmpty)(data.profile)) return null;
          const category = (0, _index.get)(data, 'details.stormCat');
          const [lon, lat] = (0, _index.get)(data, 'location.coordinates');
          const startTime = (0, _index.get)(data, 'profile.lifespan.startTimestamp');
          const endTime = (0, _index.get)(data, 'profile.lifespan.endTimestamp');
          const metric = data.units === "metric"
          /* Metric */
          ;
          const advisoryInfo = [];
          const advisoryNumber = (0, _index.get)(data, 'details.advisoryNumber');
          const advisoryTimestamp = data.timestamp;

          if ((0, _index.isset)(advisoryNumber)) {
            advisoryInfo.push(`Advisory #${advisoryNumber}`);
          }

          if ((0, _index.isset)(data.timestamp)) {
            advisoryInfo.push((0, _index.formatDate)(new Date(advisoryTimestamp * 1000), 'h:mm a, MMM d, yyyy'));
          }

          return `
						<div class="awxjs__tropical-system awxjs__tropical-system-profile">
							<div class="awxjs__tropical-system-profile__header awxjs__ui-row">
								<div class="awxjs__tropical-system-profile__icon">
									<img src="${(0, _utils.icon)(category)}">
									${/^H/.test(category) ? `<div class="awxjs__tropical-system-profile__icon-label">${category.replace(/^H/, '')}</div>` : ''}
								</div>
								<div class="awxjs__tropical-system-profile__metadata">
									<div class="awxjs__tropical-system-profile__name">${(0, _index.get)(data, 'details.stormName')}</div>
									<div class="awxjs__tropical-system-profile__timestamp">
										<span class="timestamp">
											${data.isForecast ? 'Forecast' : advisoryInfo.join(' - ')}
										</span>
									</div>
								</div>
							</div>
							<div class="awxjs__tropical-system-profile__details">
								<div class="awxjs__ui-row">
									<div class="awxjs__ui-expand label">Basin</div>
									<div class="awxjs__ui-expand value">${(0, _index.get)(data, 'details.basin')}</div>
								</div>
								<div class="awxjs__ui-row">
									<div class="awxjs__ui-expand label">Location</div>
									<div class="awxjs__ui-expand value">${lat && lon ? (0, _strings.toCoord)(lat, lon, 1) : 'N/A'}</div>
								</div>
								<div class="awxjs__ui-row">
									<div class="awxjs__ui-expand label">Moving</div>
									<div class="awxjs__ui-expand value">
									${(0, _index.get)(data, 'details.movement.speedMPH') === 0 ? `Stationary` : `
										${(0, _index.get)(data, 'details.movement.direction') || ''}
										${(0, _units.formatDataValue)(data, 'details.movement.speedMPH', 'details.movement.speedKPH', metric)}
									`}
									</div>
								</div>
								<div class="awxjs__ui-row">
									<div class="awxjs__ui-expand label">Winds</div>
									<div class="awxjs__ui-expand value">${(0, _index.get)(data, 'details.windSpeedMPH') > 0 ? `
										${(0, _units.formatDataValue)(data, 'details.windSpeedMPH', 'details.windSpeedKPH', metric)}&nbsp;
										${(0, _index.get)(data, 'details.gustSpeedMPH') > 0 ? `(${(0, _units.formatDataValue)(data, 'details.gustSpeedMPH', 'details.gustSpeedKPH', metric)} gusts)` : ''}
									` : `Calm`}</div>
								</div>
								<div class="awxjs__ui-row">
									<div class="awxjs__ui-expand label">Pressure</div>
									<div class="awxjs__ui-expand value">${(0, _units.formatDataValue)(data, 'details.pressureIN', 'details.pressureMB', metric)}</div>
								</div>
							</div>
						</div>
					`;
        }
      }, {
        title: 'System Summary',
        renderer: data => {
          if (!(0, _index.isset)(data) || (0, _index.isEmpty)(data)) return null;
          if ((0, _index.isEmpty)(data.details) || (0, _index.isEmpty)(data.profile)) return null;
          const category = (0, _index.get)(data, 'details.stormCat');
          const [lon, lat] = (0, _index.get)(data, 'location.coordinates');
          const startTime = (0, _index.get)(data, 'profile.lifespan.startTimestamp');
          const endTime = (0, _index.get)(data, 'profile.lifespan.endTimestamp');
          const metric = data.units === "metric"
          /* Metric */
          ;
          const advisoryInfo = [];
          const advisoryNumber = (0, _index.get)(data, 'details.advisoryNumber');
          const advisoryTimestamp = data.timestamp;

          if ((0, _index.isset)(advisoryNumber)) {
            advisoryInfo.push(`Advisory #${advisoryNumber}`);
          }

          if ((0, _index.isset)(data.timestamp)) {
            advisoryInfo.push((0, _index.formatDate)(new Date(advisoryTimestamp * 1000), 'h:mm a, MMM d, yyyy'));
          }

          return `
						<div class="awxjs__tropical-system awxjs__tropical-system-profile">
							<div class="awxjs__tropical-system-profile__summary">
								${(0, _index.isset)(startTime) ? `
									<div class="awxjs__ui-row">
										<div class="awxjs__ui-expand label">Lifespan</div>
										<div class="awxjs__ui-expand value">
											${(0, _index.formatDate)(new Date(startTime * 1000), 'L/d/yyyy')}${' - '}
											${(0, _index.isset)(endTime) ? (0, _index.formatDate)(new Date(endTime * 1000), 'L/d/yyyy') : ''}
										</div>
									</div>
								` : ''}
								${(0, _index.get)(data, 'profile.windSpeed.maxMPH') > 0 ? `
									<div class="awxjs__ui-row">
										<div class="awxjs__ui-expand label">Max Winds</div>
										<div class="awxjs__ui-expand value">
											${(0, _units.formatDataValue)(data, 'profile.windSpeed.maxMPH', 'profile.windSpeed.maxKPH', metric)}
											on ${(0, _index.formatDate)(new Date((0, _index.get)(data, 'profile.windSpeed.maxTimestamp') * 1000), 'L/d/yyyy')}
										</div>
									</div>
								` : ''}
								${(0, _index.get)(data, 'profile.pressure.minIN') > 0 ? `
									<div class="awxjs__ui-row">
										<div class="awxjs__ui-expand label">Min Pressure</div>
										<div class="awxjs__ui-expand value">
											${(0, _units.formatDataValue)(data, 'profile.pressure.minIN', 'profile.pressure.minMB', metric)}
											on ${(0, _index.formatDate)(new Date((0, _index.get)(data, 'profile.pressure.minTimestamp') * 1000), 'L/d/yyyy')}
										</div>
									</div>
								` : ''}
							</div>
						</div>
					`;
        }
      }]
    };
  }

  onInit() {// Perform custom actions when the module has been initialized with a map application
    // instance.
  }

  onAdd() {// Perform custom actions when the module's map source has been added to the map and is
    // active.
  }

  onRemove() {// Perform custom actions when the module's map source has been removed from the map and
    // is no longer active.
  }

  onMarkerClick(marker, data) {
    this.showInfoPanel(data.profile.name, data);
  }

  onShapeClick(shape, data) {// Perform custom actions when a vector shape object associated with the module's map
    // source was clicked on the map. You can use this method to perform additional actions or
    // to display the info panel for the module with the shape's data, e.g.:
    //
    // this.showInfoPanel(`Outlook`, data);
  }

}

var _default = Systems;
exports.default = _default;
module.exports = exports.default;