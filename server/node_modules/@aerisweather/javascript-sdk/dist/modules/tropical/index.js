"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loader = loader;
exports.utils = utils;

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
/* eslint-disable import/prefer-default-export */


function loader() {
  return __awaiter(this, void 0, void 0, function* () {
    const module = yield Promise.resolve().then(() => _interopRequireWildcard(require('./TropicalGroup')));
    return new Promise((resolve, reject) => {
      resolve(module);
    }).catch(error => {
      console.error('AerisWeather.Module - ERROR', error);
    });
  });
}

function utils() {
  return __awaiter(this, void 0, void 0, function* () {
    const module = yield Promise.resolve().then(() => _interopRequireWildcard(require('./utils')));
    return new Promise((resolve, reject) => {
      resolve(module);
    }).catch(error => {
      console.error('AerisWeather.Module - ERROR', error);
    });
  });
}