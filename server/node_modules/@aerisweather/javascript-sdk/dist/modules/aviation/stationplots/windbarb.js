"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.windbarb = void 0;

var _skycover = require("./skycover");

var _utils = require("./utils");

const build = (startY, windSpeed, strokeColor, strokeWidth, lineCap) => {
  let offset = startY;
  let result = '';

  if (windSpeed <= 5) {
    return `
			<line
				x1="${_skycover.DEFAULT_X}" y1="${4.5 + offset}"
				x2="${_skycover.DEFAULT_X + 2}" y2="${3.25 + offset}"
				stroke="white" stroke-width="1.5"
				stroke-linecap="round"
			/>
			<line
				x1="${_skycover.DEFAULT_X}" y1="${4.5 + offset}"
				x2="${_skycover.DEFAULT_X + 2}" y2="${3.25 + offset}"
				stroke="black"
				stroke-width=".5"
				stroke-linecap="round"
			/>
		`;
  }

  while (windSpeed >= 5) {
    if (windSpeed >= 50) {
      result += `
				<polygon
					points="${_skycover.DEFAULT_X},${2 + offset} ${_skycover.DEFAULT_X + 4},${2 + offset} ${_skycover.DEFAULT_X},${4.5 + offset}"
					fill="${strokeColor}"
					stroke-linejoin="round"
					stroke="${strokeColor}"
					stroke-width="${strokeWidth}"
				/>
			`;
      offset += 2.75;
      windSpeed -= 50;
    } else if (windSpeed >= 10) {
      result += `
				<line
					x1="${_skycover.DEFAULT_X}"
					y1="${3 + offset}"
					x2="${_skycover.DEFAULT_X + 4}"
					y2="${0.5 + offset}"
					stroke="${strokeColor}"
					stroke-width="${strokeWidth}"
					stroke-linecap="${lineCap}"
				/>
			`;
      offset += 1.5;
      windSpeed -= 10;
    } else if (windSpeed >= 5) {
      result += `
				<line
					x1="${_skycover.DEFAULT_X}" y1="${3 + offset}"
					x2="${_skycover.DEFAULT_X + 2}" y2="${1.75 + offset}"
					stroke="${strokeColor}"
					stroke-width="${strokeWidth}"
					stroke-linecap="${lineCap}"
				/>
			`;
      windSpeed -= 5;
    }
  }

  return result;
};

const calm = ({
  radius = _skycover.BASE_RADIUS,
  strokeColor = 'black'
} = {}) => `
	${(0, _skycover.circle)()}
	${(0, _skycover.circle)({
  radius,
  strokeColor
})}
`;

const flags = (startY, windSpeed, windGust) => {
  let result = '';
  const windSpeedInterval = (0, _utils.roundToInterval)(windSpeed, 5);
  const windGustInterval = (0, _utils.roundToInterval)(windGust, 5);
  result += build(startY, windGustInterval, 'white', 1.5, 'round');
  result += build(startY, windSpeedInterval, 'white', 1.5, 'round'); // TODO: wind gusts dont work for wind speeds <= 10. pass wind into
  // and color into function

  result += build(startY, windGustInterval, 'red', 0.5, 'round');
  result += build(startY, windSpeedInterval, 'black', 0.5, 'round');
  return result;
};

const windbarb = (windSpeed, windGust, direction = 0) => {
  const windSpeedInterval = (0, _utils.roundToInterval)(windSpeed, 5);
  const windGustInterval = (0, _utils.roundToInterval)(windGust, 5);

  if (!windSpeed || windSpeedInterval === 0) {
    return calm();
  }

  return `
		<g transform="${direction && `rotate(${direction || 0} ${_skycover.DEFAULT_X} ${_skycover.DEFAULT_Y})`}">
			<line class="barb2" x1="${_skycover.DEFAULT_X}" y1="${_skycover.DEFAULT_Y}" x2="${_skycover.DEFAULT_X}" y2="${_skycover.DEFAULT_Y - 16}" stroke="white" stroke-width="1.5" stroke-linecap="round"/>
			${flags(_skycover.DEFAULT_Y - 19, windSpeedInterval, windGustInterval)}
			<line class="barb" x1="${_skycover.DEFAULT_X}" y1="${_skycover.DEFAULT_Y}" x2="${_skycover.DEFAULT_X}" y2="${_skycover.DEFAULT_Y - 16}" stroke="black" stroke-width=".5" stroke-linecap="round" />
		</g>
	`;
};

exports.windbarb = windbarb;