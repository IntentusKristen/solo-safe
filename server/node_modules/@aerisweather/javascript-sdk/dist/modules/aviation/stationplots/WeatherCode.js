"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var Icons = _interopRequireWildcard(require("./icons"));

var _utils = require("../../../utils");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const coverage = {
  intermittent: ['AR', 'BR', 'IN', 'IS', 'O', 'PA', 'PD', 'SC'],
  continuous: ['NM', 'FQ'],
  forecast: ['C', 'D', 'L', 'S', 'VC', 'WD']
};
const intensity = {
  slight: ['VL', 'L'],
  heavy: ['H', 'VH']
};
const weather = {
  hail: ['A'],
  rain: ['R'],
  drizzle: ['L'],
  rainShowers: ['RW'],
  snow: ['BS', 'S'],
  thunderstorms: ['T'],
  freezingRain: ['ZR'],
  freezingDrizzle: ['ZL'],
  rainAndSnow: ['RS', 'WM', 'SI'],
  iceCrystals: ['IC'],
  icePellets: ['IP'],
  fog: ['F'],
  smoke: ['K', 'VA'],
  haze: ['H'],
  mist: ['BR'],
  blowingDustOrSand: ['BD', 'BS']
};
const icons = {
  mist: {
    coverage: [null, 'intermittent', 'continuous'],
    intensity: [null, 'slight', 'moderate', 'heavy'],
    weather: ['mist'],
    icon: Icons.lightFog
  },
  lightFog: {
    coverage: [null, 'intermittent'],
    intensity: [null, 'slight', 'moderate'],
    weather: ['fog'],
    icon: Icons.lightFog
  },
  continuousFog: {
    coverage: ['continuous'],
    intensity: [null, 'slight', 'moderate', 'heavy'],
    weather: ['fog'],
    icon: Icons.continuousFog
  },
  drizzleSlightIntermittent: {
    coverage: [null, 'intermittent'],
    intensity: ['slight'],
    weather: ['drizzle'],
    icon: Icons.drizzleSlightIntermittent
  },
  drizzleSlightContinuous: {
    coverage: ['continuous'],
    intensity: ['slight'],
    weather: ['drizzle'],
    icon: Icons.drizzleSlightContinuous
  },
  drizzleModerateIntermittent: {
    coverage: [null, 'intermittent'],
    intensity: [null, 'moderate'],
    weather: ['drizzle'],
    icon: Icons.drizzleModerateIntermittent
  },
  drizzleModerateContinuous: {
    coverage: ['continuous'],
    intensity: [null, 'moderate'],
    weather: ['drizzle'],
    icon: Icons.drizzleModerateContinuous
  },
  drizzleHeavyIntermittent: {
    coverage: [null, 'intermittent'],
    intensity: [null, 'heavy'],
    weather: ['drizzle'],
    icon: Icons.drizzleHeavyIntermittent
  },
  drizzleHeavyContinuous: {
    coverage: ['continuous'],
    intensity: [null, 'heavy'],
    weather: ['drizzle'],
    icon: Icons.drizzleHeavyContinuous
  },
  drizzleFreezingSlight: {
    coverage: [null, 'intermittent', 'continuous'],
    intensity: [null, 'slight'],
    weather: ['freezingDrizzle'],
    icon: Icons.drizzleFreezingSlight
  },
  drizzleFreezingHeavy: {
    coverage: [null, 'intermittent', 'continuous'],
    intensity: ['heavy'],
    weather: ['freezingDrizzle'],
    icon: Icons.drizzleFreezingHeavy
  },
  intermittentSlightRain: {
    coverage: ['intermittent'],
    intensity: ['slight'],
    weather: ['rain'],
    icon: Icons.rainSlightIntermittent
  },
  rainSlightContinuous: {
    coverage: [null, 'continuous'],
    intensity: [null, 'slight'],
    weather: ['rain'],
    icon: Icons.rainSlightContinuous
  },
  rainModerateIntermittent: {
    coverage: [null, 'intermittent'],
    intensity: ['moderate'],
    weather: ['rain'],
    icon: Icons.rainModerateIntermittent
  },
  rainModerateContinous: {
    coverage: ['continuous'],
    intensity: [null, 'moderate'],
    weather: ['rain'],
    icon: Icons.rainModerateContinuous
  },
  rainHeavyIntermittent: {
    coverage: [null, 'intermittent'],
    intensity: ['heavy'],
    weather: ['rain'],
    icon: Icons.rainHeavyIntermittent
  },
  rainHeavyContinuous: {
    coverage: ['continuous'],
    intensity: ['heavy'],
    weather: ['rain'],
    icon: Icons.rainHeavyContinuous
  },
  freezingRainSlight: {
    coverage: [null, 'intermittent', 'continuous'],
    intensity: ['slight'],
    weather: ['freezingRain'],
    icon: Icons.rainFreezingSlight
  },
  freezingRainModerateOrHeavy: {
    coverage: [null, 'intermittent', 'continuous'],
    intensity: ['moderate', 'heavy'],
    weather: ['freezingRain'],
    icon: Icons.rainFreezingModerateOrHeavy
  },
  rainOrDrizzleAndSnowSlight: {
    coverage: [null, 'intermittent'],
    intensity: ['slight'],
    weather: ['rainAndSnow'],
    icon: Icons.rainOrDrizzleAndSnowSlight
  },
  rainOrDrizzleAndSnowModerateOrHeavy: {
    coverage: [null, 'intermittent', 'continuous'],
    intensity: ['moderate', 'heavy'],
    weather: ['rainAndSnow'],
    icon: Icons.rainOrDrizzleAndSnowModerateOrHeavy
  },
  snowIntermittentSlight: {
    coverage: [null, 'intermittent'],
    intensity: ['slight'],
    weather: ['snow'],
    icon: Icons.snowIntermittentSlight
  },
  snowContinuousSlight: {
    coverage: [null, 'continuous'],
    intensity: [null, 'slight'],
    weather: ['snow'],
    icon: Icons.snowContinuousSlight
  },
  snowModerateContinuous: {
    coverage: ['continuous'],
    intensity: ['moderate'],
    weather: ['snow'],
    icon: Icons.snowModerateContinuous
  },
  snowHeavyIntermittents: {
    coverage: ['intermittent'],
    intensity: ['heavy'],
    weather: ['snow'],
    icon: Icons.snowHeavyIntermittent
  },
  snowHeavyContinuous: {
    coverage: [null, 'continuous'],
    intensity: ['heavy'],
    weather: ['snow'],
    icon: Icons.snowHeavyContinuous
  },
  iceCrystals: {
    coverage: [null, 'intermittent', 'continuous'],
    intensity: [null, 'slight', 'moderate', 'heavy'],
    weather: ['iceCrystals'],
    icon: Icons.iceCrystals
  },
  icePellets: {
    coverage: [null, 'intermittent', 'continuous'],
    intensity: [null, 'slight', 'moderate', 'heavy'],
    weather: ['icePellets'],
    icon: Icons.icePellets
  },
  rainShowersSlight: {
    coverage: [null, 'intermittent', 'continuous'],
    intensity: ['slight'],
    weather: ['rainShowers'],
    icon: Icons.rainShowersSlight
  },
  rainShowersModerateOrHeavy: {
    coverage: [null, 'intermittent', 'continuous'],
    intensity: [null, 'moderate', 'heavy'],
    weather: ['rainShowers'],
    icon: Icons.rainShowersModerateOrHeavy
  },
  thunderstormsSlightOrModerate: {
    coverage: [null, 'intermittent', 'continuous'],
    intensity: [null, 'slight', 'moderate'],
    weather: ['thunderstorms'],
    icon: Icons.slightThunderstormWithRain
  },
  thunderstormsHeavy: {
    coverage: [null, 'intermittent', 'continuous'],
    intensity: ['heavy'],
    weather: ['thunderstorms'],
    icon: Icons.heavyThunderstormWithRain
  },
  vicinityThunderstorm: {
    coverage: ['forecast'],
    intensity: [null, 'slight', 'moderate', 'heavy'],
    weather: ['thunderstorms'],
    icon: Icons.distantLightning
  },
  distantLightning: {
    coverage: [null, 'forecast', 'intermittent', 'continuous'],
    intensity: [null, 'slight', 'moderate', 'heavy'],
    weather: ['distantLightning'],
    icon: Icons.distantLightning
  },
  haze: {
    coverage: [null, 'intermittent', 'continuous'],
    intensity: [null, 'slight', 'moderate', 'heavy'],
    weather: ['haze'],
    icon: Icons.haze
  },
  smoke: {
    coverage: [null, 'intermittent', 'continuous'],
    intensity: [null, 'slight', 'moderate', 'heavy'],
    weather: ['smoke'],
    icon: Icons.smoke
  },
  virga: {
    coverage: [null, 'forecast', 'intermittent', 'continuous'],
    intensity: [null, 'slight', 'moderate', 'heavy'],
    weather: ['virga'],
    icon: Icons.virga
  },
  squalls: {
    coverage: [null, 'forecast', 'intermittent', 'continuous'],
    intensity: [null, 'slight', 'moderate', 'heavy'],
    weather: ['squalls'],
    icon: Icons.squalls
  },
  tornado: {
    coverage: [null, 'forecast', 'intermittent', 'continuous'],
    intensity: [null, 'slight', 'moderate', 'heavy'],
    weather: ['tornado'],
    icon: Icons.tornado
  },
  blowingDustOrSand: {
    coverage: [null, 'forecast', 'intermittent', 'continuous'],
    intensity: [null, 'slight', 'moderate', 'heavy'],
    weather: ['blowingDustOrSand'],
    icon: Icons.dustOrSand
  }
};

const findMatch = (code, collection, fallback = null) => {
  const result = Object.keys(collection).filter(key => {
    const codes = collection[key];
    return codes.indexOf(code) !== -1;
  });
  return result && result[0] ? result[0] : fallback;
};

class WeatherCode {
  constructor(code, obs) {
    this._code = code || '';
    this._obs = obs;

    this._process(code);
  }

  get coverage() {
    return this._coverage;
  }

  get intensity() {
    return this._intensity;
  }

  get weather() {
    return this._weather;
  }

  get icon() {
    const name = Object.keys(icons).filter(key => icons[key].coverage.includes(this.coverage)).filter(key => icons[key].intensity.includes(this.intensity)).filter(key => icons[key].weather.includes(this.weather));
    return icons[name[0]] ? icons[name[0]].icon : '';
  }

  toString() {
    return `${this.coverage} ${this.intensity} ${this._weather}`.trim();
  }

  _process(code) {
    if (!(0, _utils.isset)(code)) return;
    const parts = code.split(':').map(s => s.toUpperCase());

    if (parts.length === 3) {
      const [coverageCode, intensityCode, weatherCode] = parts;
      this._coverage = findMatch(coverageCode, coverage);
      this._intensity = findMatch(intensityCode, intensity, 'moderate');
      this._weather = findMatch(weatherCode, weather);
    }

    this._overrideWithSpecialCases();
  }

  _overrideWithSpecialCases() {
    const metar = this._obs.raw || ''; // set to a specific weather code because stations do not have this
    // weather code, but show the symbol for lightning in the area

    if (metar.includes(" LTG DSNT ") && !this._weather) {
      this._weather = 'distantLightning';
      return;
    } // set to continuous fog if it contains "CONS" in the remarks.  This
    // is due to this weather type having a certain symbol.


    if (this._weather === 'fog') {
      if (metar.includes(' CONS ')) {
        this._coverage = 'continuous';
      }
    }

    if (!this._weather) {
      if (metar.includes(' VIRGA ')) {
        this._weather = 'virga';
      }

      if (metar.includes(' SQ ')) {
        this._weather = 'squalls';
      }
    } // If it's not a distant funnel cloud, show it.


    if (metar.includes(' FC ') && !metar.includes(' DSNT FC ')) {
      this._weather = 'tornado';
    }
  }

}

var _default = WeatherCode;
exports.default = _default;
module.exports = exports.default;