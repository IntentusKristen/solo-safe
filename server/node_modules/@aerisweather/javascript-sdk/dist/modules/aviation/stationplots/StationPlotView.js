"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _StationPlotLegend = _interopRequireDefault(require("./StationPlotLegend"));

var _WeatherCode = _interopRequireDefault(require("./WeatherCode"));

var _skycover = require("./skycover");

var _windbarb = require("./windbarb");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const flightRuleColors = {
  VFR: '#1bbe08',
  MVFR: '#1c56cf',
  IFR: '#fa0708',
  LIFR: '#fb06ff'
};

class StationPlotView {
  constructor(obs) {
    obs = obs || {};

    if (obs.ob) {
      const metar = obs.raw;
      const id = obs.id;
      obs = Object.assign(Object.assign({}, obs.ob), {
        id,
        raw: metar
      });
    }

    this._obs = obs;
    this._legend = new _StationPlotLegend.default();
  }

  render(zoom, legend = false) {
    return `
			<div class="station-plot-map-symbol">
				<svg viewbox="0 0 44 44" xmlns="http://www.w3.org/2000/svg" class="wind-barb">
					${this.symbol(this._obs)}
					${zoom >= 7 ? this.values(this._obs) : ''}
					${legend ? this.legend(this._obs) : ''}
				</svg>
			</div>
		`;
  }

  symbol(obs) {
    const {
      sky,
      windSpeedKTS: windSpeed,
      windGustKTS: windGust,
      windDirDEG: direction,
      flightRule
    } = obs;
    const skyColor = flightRuleColors[flightRule] || '#000';
    return `
			${(0, _windbarb.windbarb)(windSpeed, windGust, direction)}
			${(0, _skycover.skycover)((0, _utils.coverageCodeForPercent)(sky), skyColor)}
		`;
  }

  values(obs) {
    const props = {
      font: "'RobotoMono-bold',monospace",
      size: '3.5px',
      stroke: 0.75
    };
    const weather = new _WeatherCode.default(obs.weatherPrimaryCoded, obs);
    return `
			<g transform="translate(13.2, 18.4) scale(.16)">
				${weather.icon}
			</g>
			${(0, _utils.text)(obs.tempF, 19, 18, Object.assign(Object.assign({}, props), {
      fill: 'firebrick'
    }))}
			${(0, _utils.text)(obs.dewpointF, 19, 29, Object.assign(Object.assign({}, props), {
      fill: 'seagreen'
    }))}
			${(0, _utils.text)(obs.pressureMB, 25, 18, Object.assign(Object.assign({}, props), {
      anchor: 'start'
    }))}
			${(0, _utils.text)(obs.id, 25, 29, Object.assign(Object.assign({}, props), {
      anchor: 'start'
    }))}
		`;
  }

  legend(obs) {
    return this._legend.render(this._obs);
  }

}

var _default = StationPlotView;
exports.default = _default;
module.exports = exports.default;