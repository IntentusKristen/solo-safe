"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setupMapsGL = void 0;

var _utils = require("../utils");

var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

const SUPPORTED_STRATEGIES = ['mapbox', 'maplibre', 'google', 'leaflet'];

const addWeatherLayer = (controller, code, _a = {}) => {
  var {
    beforeId
  } = _a,
      options = __rest(_a, ["beforeId"]);

  const wxcode = code.replace(/^mapsgl___/, '');

  if (!controller.hasWeatherLayer(wxcode)) {
    controller.addWeatherLayer(wxcode, (0, _utils.extend)({
      id: wxcode,
      animation: {
        interval: 8
      }
    }, options), beforeId);
  }
};

const removeWeatherLayer = (controller, code) => {
  const wxcode = code.replace(/^mapsgl___/, '');

  if (controller.hasWeatherLayer(wxcode)) {
    controller.removeWeatherLayer(wxcode);
  }
};

const createButton = (controller, config) => {
  const {
    id,
    title,
    value,
    controls,
    options
  } = config;
  return {
    id: id || value,
    title,
    value,
    controls,
    options: Object.assign(Object.assign({}, options), {
      validate: false,
      mapsgl: true
    }),
    onSelect: button => {
      addWeatherLayer(controller, button.value, Object.assign({
        id
      }, options));
    },
    onDeselect: button => {
      removeWeatherLayer(controller, button.value);
    }
  };
};

const createSegmentedButton = (controller, config) => {
  const {
    id,
    title,
    segments,
    controls,
    options
  } = config;
  return {
    id,
    title,
    segments: segments.map(segment => ({
      title: segment.title,
      id: segment.id || segment.value,
      value: segment.value,
      options: {
        validate: false,
        mapsgl: true
      }
    })),
    controls,
    onChange: button => {// console.log(button.value);
    },
    onSelectSegment: segment => {
      if (!segment.value) {
        throw new Error(`[Aeris] Cannot add layer, invalid layer value '${segment.value}`);
      }

      addWeatherLayer(controller, segment.value, options);
    },
    onDeselectSegment: segment => {
      removeWeatherLayer(controller, segment.value);
    },
    onSelect: button => {
      var _a;

      (_a = button.value) === null || _a === void 0 ? void 0 : _a.forEach(code => {
        addWeatherLayer(controller, code, options);
      });
    },
    onDeselect: button => {
      var _a;

      (_a = button.value) === null || _a === void 0 ? void 0 : _a.forEach(code => {
        removeWeatherLayer(controller, code);
      });
    }
  };
};

const createButtonGroup = (controller, config) => {
  const {
    id,
    title,
    buttons
  } = config;
  return {
    id,
    title,
    multiselect: true,
    buttons: buttons.map(btn => btn.segments ? createSegmentedButton(controller, btn) : createButton(controller, btn))
  };
};

const addLayerButton = (config, controller, panel) => {
  let button;

  if (config.buttons) {
    button = createButtonGroup(controller, config);
  } else if (config.segments) {
    button = createSegmentedButton(controller, config);
  } else {
    button = createButton(controller, config);
  }

  if (config.index >= 0) {
    panel.insertAt(config.index, button);
  } else {
    panel.add(button);
  }

  return button;
};

const setupMapsGL = (mapsgl, app, options = {}, callback) => {
  const map = app.map.map;
  const timeline = app.map.timeline;
  const target = app.$el;

  if (SUPPORTED_STRATEGIES.includes(app.map.strategy.strategy) === false) {
    throw new Error(`[Aeris] MapsGL does not currently support the '${app.map.strategy.strategy}' map strategy. MapsGL only supports the following map strategies: ${SUPPORTED_STRATEGIES.join(', ')}`);
  }

  const timelinePanel = app.getPanel('timeline');
  let controller;
  const controllerOptions = {
    account: app.account,
    animation: {
      // duration: timeline.duration,
      // endDelay: timeline.endDelay,
      repeat: true,
      manualAdvance: true
    }
  };
  app.mapsgl = {
    controller,
    addLayerPanelItems: configs => {
      const layersPanel = app.getPanel('layers');
      configs.forEach(config => {
        addLayerButton(config, controller, layersPanel);
      });
    }
  };

  if (app.map.strategy.strategy === 'mapbox') {
    controller = new mapsgl.MapboxMapController(map, controllerOptions);
  } else if (app.map.strategy.strategy === 'maplibre') {
    controller = new mapsgl.MaplibreMapController(map, controllerOptions);
  } else if (app.map.strategy.strategy === 'google') {
    controller = new mapsgl.GoogleMapController(map, controllerOptions);
  } else if (app.map.strategy.strategy === 'leaflet') {
    controller = new mapsgl.LeafletMapController(map, controllerOptions);
  }

  if (!controller) {
    throw new Error('[Aeris] Could not initialize MapsGL, no valid strategy or map controller found.');
  }

  app.on("layer:change:control"
  /* LAYER_CONTROL_CHANGE */
  , e => {
    const {
      id,
      control
    } = e.data || {};

    if (control.id === 'opacity') {
      const layer = controller.getLayer(id);

      if (layer) {
        layer.setPaintProperty('sample.opacity', 0);
      }
    }
  });

  if (timeline) {
    controller.timeline.startDate = timeline.startDate();
    controller.timeline.endDate = timeline.endDate(); // sync timeline date ranges

    timeline.on('start:change end:change', () => {
      controller.timeline.startDate = timeline.startDate();
      controller.timeline.endDate = timeline.endDate();
    }); // sync timeline playback control

    timeline.on('play', () => {
      controller.timeline.play();
    }).on('stop', () => {
      controller.timeline.stop();
    }); // handle timeline scrubbing

    timeline.on('advance', e => {
      controller.timeline.goTo(e.data.position, false);
    });

    if (timelinePanel) {
      controller.on('load:start', () => {
        timelinePanel.showLoading(true);
      }).on('load:complete', () => {
        timelinePanel.showLoading(false);
      });
    }
  } // set up layers in button panel


  const layersPanel = app.getPanel('layers');

  if (layersPanel && (0, _utils.isArray)(options.layers)) {
    options.layers.forEach(config => {
      addLayerButton(config, controller, layersPanel);
    });
  }

  callback(controller);
};

exports.setupMapsGL = setupMapsGL;