import IMapSourceModule from './interfaces/IMapSourceModule';
import ModuleGroup from './ModuleGroup';
import Account from '../account/Account';
import InteractiveMapApp from '../apps/InteractiveMapApp';
import InteractiveMap from '../maps/interactive/InteractiveMap';
import InfoPanel from '../apps/views/InfoPanel';
import { LayerOptions } from '../maps/types';
import EventDispatcher from '../event/EventDispatcher';
import { InfoPanelContentViewOptions, InfoPanelSectionView } from '../apps/types';
export interface ModuleLegendOptions {
    title: string;
    url?: string;
    code?: string;
}
export interface MapSourceModuleOptions {
    id: string;
    type?: 'vector' | 'geojson' | 'text';
    source?: LayerOptions;
    controls?: any;
    legend?: ModuleLegendOptions | (() => ModuleLegendOptions);
    infopanel?: {
        sections: {
            [key: string]: InfoPanelSectionView;
        };
        view: InfoPanelContentViewOptions;
    };
    onInit?: () => void;
    onAdd?: () => void;
    onRemove?: () => void;
    onData?: (result: any) => void;
    onMarkerClick?: (marker: any, data: any) => void;
    onShapeClick?: (shape: any, data: any) => void;
}
/**
 * A map source module is a container for providing all of the required configuration and
 * functionality needed for rendering and controlling a map content source on an interactive map
 * application.
 *
 * A module can be a direct instance of `MapSourceModule`, in which case a configuration object
 * must be provided when instantiating the instance. Or, a module can be provided as a subclass
 * of `MapSourceModule`, in which case the subclass can override the necessary properties and
 * methods of the parent class to provide the necessary configuration and functionality.
 *
 * Regardless which implementation method is used, a module must return a valid map content
 * source from the `source()` method.
 *
 * @class MapSourceModule
 * @implements {IMapSourceModule}
 */
declare class MapSourceModule<T extends MapSourceModuleOptions> extends EventDispatcher implements IMapSourceModule {
    private _account;
    private _app;
    private _map;
    private _source;
    protected _data: any;
    private _opts;
    private _group;
    /**
     * Module identifier.
     *
     * @readonly
     * @type {string}
     * @memberof MapSourceModule
     */
    get id(): string;
    /**
     * Aeris account associated with the module.
     *
     * @readonly
     * @type {Account}
     * @memberof MapSourceModule
     */
    get account(): Account;
    /**
     * Application the module was initialized with.
     *
     * @readonly
     * @type {InteractiveMapApp}
     * @memberof MapSourceModule
     */
    get app(): InteractiveMapApp;
    /**
     * Application map instance.
     *
     * @readonly
     * @type {InteractiveMap}
     * @memberof MapSourceModule
     */
    get map(): InteractiveMap;
    /**
     * Map data source created for the module.
     *
     * @type {*}
     * @memberof MapSourceModule
     */
    get dataSource(): any;
    /**
     * Sets the module's map data source.
     *
     * @memberof MapSourceModule
     */
    set dataSource(value: any);
    /**
     * Data associated with the module.
     *
     * If the module loads remote data when added to a map, this value will return the data that
     * was last returned by the remote request.
     *
     * @readonly
     * @type {*}
     * @memberof MapSourceModule
     */
    get data(): any;
    /**
     * Returns the module's configuration options.
     */
    get opts(): T;
    /**
     * Parent module group the module belongs to, if any.
     *
     * @type {ModuleGroup}
     * @memberof MapSourceModule
     */
    get group(): ModuleGroup;
    /**
     * Sets the parent module group.
     *
     * @memberof MapSourceModule
     */
    set group(group: ModuleGroup);
    /**
     * Initializes and returns a map source module instance configured with the specified options
     * if provided.
     *
     * @param {any} [opts=null]
     * @memberof MapSourceModule
     */
    constructor(opts?: any);
    /**
     * Initializes the module with the specified Aeris account and application.
     *
     * @param {Account} account
     * @param {InteractiveMapApp} app
     * @memberof MapSourceModule
     */
    initialize(account: Account, app: InteractiveMapApp, map?: InteractiveMap): void;
    /**
     * Returns the map content source configuration.
     *
     * @see LayerOptions
     * @returns {*}
     * @memberof MapSourceModule
     */
    source(): LayerOptions;
    /**
     * Returns the application controls configuration.
     *
     * @see ButtonOptions
     * @see SegmentedButtonOptions
     * @see ButtonGroupOptions
     * @returns {*}
     * @memberof MapSourceModule
     */
    controls(): any;
    /**
     * Returns the legend configuration.
     *
     * @see LegendOptions
     * @returns {*}
     * @memberof MapSourceModule
     */
    legend(): any;
    /**
     * Returns the configuration for the info panel content view.
     *
     * @see InfoPanelContentViewOptions
     * @returns {*}
     * @memberof MapSourceModule
     */
    infopanel(): any;
    /**
     * Shows the map info panel using the specified title and data for the configured view
     * associated with the module.
     *
     * @param {string} title
     * @param {*} [data]
     * @returns {InfoPanel}
     * @memberof MapSourceModule
     */
    showInfoPanel(title: string, data?: any): InfoPanel;
    /**
     * Called when the module has been initialized with an application.
     *
     * @memberof MapSourceModule
     */
    onInit(): void;
    /**
     * Called when the module's map content source has been added to the map.
     *
     * @memberof MapSourceModule
     */
    onAdd(): void;
    /**
     * Called when the module's map content source is removed from the map.
     *
     * @memberof MapSourceModule
     */
    onRemove(): void;
    /**
     * Called when the module's map content source has loaded data.
     *
     * @param {*} result
     * @memberof MapSourceModule
     */
    onData(result: any): void;
    /**
     * Called when a marker associated with the module's map content source is clicked on the map.
     *
     * @param {*} marker
     * @param {*} data
     * @memberof MapSourceModule
     */
    onMarkerClick(marker: any, data: any): void;
    /**
     * Called when a polygon or polyline associated with the module's map content source is clicked
     * on the map.
     *
     * @param {*} shape
     * @param {*} data
     * @memberof MapSourceModule
     */
    onShapeClick(shape: any, data: any): void;
}
export declare class BaseMapSourceModule extends MapSourceModule<MapSourceModuleOptions> {
}
export default MapSourceModule;
