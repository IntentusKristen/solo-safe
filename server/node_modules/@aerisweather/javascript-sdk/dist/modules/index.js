"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Modules = void 0;

var _modules = _interopRequireWildcard(require("./loaders"));

var _MapSourceModule2 = _interopRequireDefault(require("./MapSourceModule"));

var _ModuleGroup2 = _interopRequireDefault(require("./ModuleGroup"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var Modules;
exports.Modules = Modules;

(function (Modules) {
  Modules.MapSourceModule = _MapSourceModule2.default;
  Modules.ModuleGroup = _ModuleGroup2.default; // modules

  Modules.aviation = {
    FlightRules: _modules.FlightRules,
    Sigmets: _modules.Sigmets,
    StationPlots: _modules.StationPlots
  };
  Modules.tropical = {
    Systems: _modules.Systems,
    Invests: _modules.Invests,
    Windfields: _modules.Windfields,
    Breakpoints: _modules.Breakpoints,
    utils: _modules.TropicalUtils
  };
  Modules.Routing = _modules.Routing; // groups

  Modules.groups = {
    Aviation: _modules.Aviation,
    Tropical: _modules.Tropical
  };
})(Modules || (exports.Modules = Modules = {}));