"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.BaseMapSourceModule = void 0;

var _utils = require("../utils");

var _EventDispatcher = _interopRequireDefault(require("../event/EventDispatcher"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * A map source module is a container for providing all of the required configuration and
 * functionality needed for rendering and controlling a map content source on an interactive map
 * application.
 *
 * A module can be a direct instance of `MapSourceModule`, in which case a configuration object
 * must be provided when instantiating the instance. Or, a module can be provided as a subclass
 * of `MapSourceModule`, in which case the subclass can override the necessary properties and
 * methods of the parent class to provide the necessary configuration and functionality.
 *
 * Regardless which implementation method is used, a module must return a valid map content
 * source from the `source()` method.
 *
 * @class MapSourceModule
 * @implements {IMapSourceModule}
 */
class MapSourceModule extends _EventDispatcher.default {
  /**
   * Initializes and returns a map source module instance configured with the specified options
   * if provided.
   *
   * @param {any} [opts=null]
   * @memberof MapSourceModule
   */
  constructor(opts = null) {
    super();
    this._opts = opts || {};
    this._account = (0, _utils.get)(opts, 'account');
  }
  /**
   * Module identifier.
   *
   * @readonly
   * @type {string}
   * @memberof MapSourceModule
   */


  get id() {
    return this._opts.id;
  }
  /**
   * Aeris account associated with the module.
   *
   * @readonly
   * @type {Account}
   * @memberof MapSourceModule
   */


  get account() {
    return this._account;
  }
  /**
   * Application the module was initialized with.
   *
   * @readonly
   * @type {InteractiveMapApp}
   * @memberof MapSourceModule
   */


  get app() {
    return this._app;
  }
  /**
   * Application map instance.
   *
   * @readonly
   * @type {InteractiveMap}
   * @memberof MapSourceModule
   */


  get map() {
    return (0, _utils.isset)(this._app) ? this._app.map : this._map;
  }
  /**
   * Map data source created for the module.
   *
   * @type {*}
   * @memberof MapSourceModule
   */


  get dataSource() {
    return this._source;
  }
  /**
   * Sets the module's map data source.
   *
   * @memberof MapSourceModule
   */


  set dataSource(value) {
    this._source = value;

    if (value) {
      value.on('data:load', e => {
        const {
          results
        } = e.data;

        if (results) {
          this.onData(results);
        }
      });
    }
  }
  /**
   * Data associated with the module.
   *
   * If the module loads remote data when added to a map, this value will return the data that
   * was last returned by the remote request.
   *
   * @readonly
   * @type {*}
   * @memberof MapSourceModule
   */


  get data() {
    return this._data;
  }
  /**
   * Returns the module's configuration options.
   */


  get opts() {
    return this._opts;
  }
  /**
   * Parent module group the module belongs to, if any.
   *
   * @type {ModuleGroup}
   * @memberof MapSourceModule
   */


  get group() {
    return this._group;
  }
  /**
   * Sets the parent module group.
   *
   * @memberof MapSourceModule
   */


  set group(group) {
    this._group = group;
    this._opts.controls = null;
  }
  /**
   * Initializes the module with the specified Aeris account and application.
   *
   * @param {Account} account
   * @param {InteractiveMapApp} app
   * @memberof MapSourceModule
   */


  initialize(account, app, map = null) {
    this._account = account;
    this._app = app;
    this._map = app ? app.map : map;
  }
  /**
   * Returns the map content source configuration.
   *
   * @see LayerOptions
   * @returns {*}
   * @memberof MapSourceModule
   */


  source() {
    return this._opts.source;
  }
  /**
   * Returns the application controls configuration.
   *
   * @see ButtonOptions
   * @see SegmentedButtonOptions
   * @see ButtonGroupOptions
   * @returns {*}
   * @memberof MapSourceModule
   */


  controls() {
    return this._opts.controls;
  }
  /**
   * Returns the legend configuration.
   *
   * @see LegendOptions
   * @returns {*}
   * @memberof MapSourceModule
   */


  legend() {
    return this._opts.legend;
  }
  /**
   * Returns the configuration for the info panel content view.
   *
   * @see InfoPanelContentViewOptions
   * @returns {*}
   * @memberof MapSourceModule
   */


  infopanel() {
    return this._opts.infopanel;
  }
  /**
   * Shows the map info panel using the specified title and data for the configured view
   * associated with the module.
   *
   * @param {string} title
   * @param {*} [data]
   * @returns {InfoPanel}
   * @memberof MapSourceModule
   */


  showInfoPanel(title, data) {
    return this.app.showInfo(this.id, title, data);
  }
  /**
   * Called when the module has been initialized with an application.
   *
   * @memberof MapSourceModule
   */


  onInit() {
    if (this._opts.onInit) {
      this._opts.onInit();
    }
  }
  /**
   * Called when the module's map content source has been added to the map.
   *
   * @memberof MapSourceModule
   */


  onAdd() {
    if (this._opts.onAdd) {
      this._opts.onAdd();
    }
  }
  /**
   * Called when the module's map content source is removed from the map.
   *
   * @memberof MapSourceModule
   */


  onRemove() {
    if (this._opts.onRemove) {
      this._opts.onRemove();
    }
  }
  /**
   * Called when the module's map content source has loaded data.
   *
   * @param {*} result
   * @memberof MapSourceModule
   */


  onData(result) {
    if (this._opts.onData) {
      this._opts.onData(result);
    }
  }
  /**
   * Called when a marker associated with the module's map content source is clicked on the map.
   *
   * @param {*} marker
   * @param {*} data
   * @memberof MapSourceModule
   */


  onMarkerClick(marker, data) {
    if (this._opts.onMarkerClick) {
      this._opts.onMarkerClick(marker, data);
    }
  }
  /**
   * Called when a polygon or polyline associated with the module's map content source is clicked
   * on the map.
   *
   * @param {*} shape
   * @param {*} data
   * @memberof MapSourceModule
   */


  onShapeClick(shape, data) {
    if (this._opts.onShapeClick) {
      this._opts.onShapeClick(shape, data);
    }
  }

}

class BaseMapSourceModule extends MapSourceModule {}

exports.BaseMapSourceModule = BaseMapSourceModule;
var _default = MapSourceModule;
exports.default = _default;