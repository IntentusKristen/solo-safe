import { GeoBounds, LayerGroups } from '.';
import { MapRequestType } from './request.enum';
export interface Servers {
    api: string;
    maps: string;
}
/**
 * A data type that represents the configuration options for an API data request.
 */
export interface ApiRequestOptions {
    /**
     * Request endpoint (required).
     *
     * @type {string}
     */
    endpoint: string;
    /**
     * Request action.
     *
     * @type {string}
     */
    action?: string;
    /**
     * Coordinate bounds to search within.
     *
     * @type {GeoBounds}
     */
    bounds?: GeoBounds;
    /**
     * A comma-delimited list of response properties for the API to return. This parameter is often
     * used to limit the amount of data returned.
     *
     * @type {string}
     */
    fields?: string;
    /**
     * Predefined filters for limiting the results. The filter value can be a single,
     * comma-delimited or a semicolon delimited string of filter names.
     *
     * @type {string}
     */
    filter?: string;
    /**
     * Either a `Date` or [valid time string](http://php.net/manual/en/datetime.formats.php) from
     * which to return results for.
     *
     * @type {(string | Date)}
     */
    from?: string | Date;
    /**
     * Maximum number of results to return.
     *
     * @type {number}
     */
    limit?: number;
    /**
     * Location to request data for. Refer to the list of
     * [supported place values](https://www.aerisweather.com/support/docs/api/reference/places/).
     *
     * @type {string}
     */
    place?: string;
    /**
     * Applied only on the `periods` response property, the total number of periods to return as
     * an integer.
     *
     * @type {number}
     */
    plimit?: number;
    /**
     * Applied only on the `periods` response property, used to skip over a specific number of
     * periods in the data set.
     *
     * @type {number}
     */
    pskip?: number;
    /**
     * Applied only on the `periods` response property, used to sort results based on certain
     * fields contained within the periods.
     *
     * @type {string}
     */
    psort?: string;
    /**
     * Filters results based on certain fields and values in the dataset. Refer to the
     * [advanced queries](https://www.aerisweather.com/support/docs/api/getting-started/queries/)
     * documentation.
     *
     * @type {string}
     */
    query?: string;
    /**
     * When requesting the closest results within a circle, the radius determines how far from the
     * specified location to search. A valid unit value must be included in your radius value,
     * e.g., `5mi`, `10km`, `25miles`. If no unit is provided, your value is assumed to be in
     * meters by default.
     *
     * @type {string}
     */
    radius?: string;
    /**
     * Skips over a specific number of results in the dataset.
     *
     * @type {number}
     */
    skip?: number;
    /**
     * Sorts results based on certain fields in the dataset. Refer to the
     * [sorting](https://www.aerisweather.com/support/docs/api/getting-started/sorting/)
     * documentation.
     *
     * @type {string}
     */
    sort?: string;
    /**
     * Either a `Date` or [valid time string](http://php.net/manual/en/datetime.formats.php) up to
     * which to return results for. When used in conjunction with `from()`, this value be relative
     * to the *from* value, not relative to the current time.
     *
     * @type {(string | Date)}
     */
    to?: string | Date;
}
/**
 * A data type that represents the configuration options for an API map request.
 */
export interface MapRequestOptions {
    /**
     * Type of map request, which determines the request URL format.
     *
     * @type {MapRequestType}
     */
    type?: MapRequestType;
    /**
     * Layer groups.
     *
     * @type {(string[] | LayerGroups)}
     */
    layers?: string[] | LayerGroups;
    /**
     * Location the map will be centered on.
     *
     * @type {string}
     */
    p?: string;
    /**
     * Zoom level.
     *
     * @type {number}
     */
    zoom?: number;
    /**
     * Coordinate bounds defining the visible region.
     *
     * @type {GeoBounds}
     */
    bounds?: GeoBounds;
    /**
     * Output image size.
     *
     * @type {{
     * 		width: number;
     * 		height: number;
     * 	}}
     */
    size?: {
        width: number;
        height: number;
    };
    /**
     * Time offset for the map data.
     *
     * @type {string}
     */
    offset?: string;
    /**
     * Whether text values should be output in Metric units.
     *
     * @type {boolean}
     */
    metric?: boolean;
    /**
     * Output format, e.g. `png` or `jpg`.
     *
     * @type {string}
     */
    format?: string;
}
