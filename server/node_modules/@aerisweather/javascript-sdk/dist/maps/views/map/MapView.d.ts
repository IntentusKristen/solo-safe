import EventDispatcher from '../../../event/EventDispatcher';
import MapConfig from './MapConfig';
import { MapConfigLayersOptions, MapViewOptions } from '../../types';
import LegendView from '../legends/LegendView';
import ImageAnimation, { ImageAnimationProvider } from '../../anim/ImageAnimation';
import Timeline from '../../anim/Timeline';
import Account from '../../../account/Account';
/**
 * A view object that displays and manages static map content using imagery from the Aeris Maps
 * Platform (AMP).
 *
 * A `MapView` instance does not support user interaction in regards to panning and zooming other
 * support for static control elements to reload map content. If you need to support greater user
 * interaction for map panning and zooming, use an instance of `Map` instead.
 */
declare class MapView extends EventDispatcher implements ImageAnimationProvider {
    private _target;
    private _map;
    private _opts;
    private _config;
    private _layers;
    private _targets;
    private _request;
    private _animator;
    private _timestamp;
    private _ready;
    private _indicator;
    private _legend;
    private _legendUrl;
    /**
     * Primary DOM element associated with the view.
     *
     * @readonly
     * @type {*}
     * @memberof MapView
     */
    get $el(): any;
    /**
     * DOM element associated with the map.
     *
     * @readonly
     * @type {*}
     * @memberof MapView
     */
    get $map(): any;
    /**
     * DOM element associated with the map's container.
     *
     * @readonly
     * @type {*}
     * @memberof MapView
     */
    get $container(): any;
    /**
     * Aeris account used for the map data requests.
     *
     * @readonly
     * @type {Account}
     * @memberof MapView
     */
    get account(): Account;
    /**
     * Configuration options for the view.
     *
     * @readonly
     * @type {{ [key: string]: any }}
     * @memberof MapView
     */
    get opts(): {
        [key: string]: any;
    };
    /**
     * Map configuration instance managing the underlying map imagery.
     *
     * @readonly
     * @type {MapConfig}
     * @memberof MapView
     */
    get config(): MapConfig;
    /**
     * Animation timeline used to control the map view's current time and animation.
     *
     * @readonly
     * @type {Timeline}
     * @memberof MapView
     */
    get timeline(): Timeline;
    /**
     * Legend view associated with the map.
     *
     * @readonly
     * @type {LegendView}
     * @memberof MapView
     */
    get legend(): LegendView;
    /**
     * Initializes a map view instance with the specified target and configuration object.
     *
     * @param {HTMLElement} target
     * @param {MapViewOptions} [opts=undefined]
     * @memberof MapView
     */
    constructor(target: HTMLElement, opts?: MapViewOptions);
    /**
     * Returns the DOM element within the view's container for the specified selector.
     *
     * @param {string} selector
     * @returns {*}
     * @memberof MapView
     */
    el(selector: string): any;
    /**
     * Sets the map layers.
     *
     * The legend displayed for the specified map layers can be overridden by providing a value for
     * the `legend` parameter, which can either be an array of layer codes for multiple
     * auto-configured legends, or a single URL string for a single legend image.
     *
     * @param {MapConfigLayersOptions} layers
     * @param {string} [legend]
     * @memberof MapView
     */
    setLayers(layers: MapConfigLayersOptions, legend?: string): void;
    /**
     * Sets the legend type(s) or image URL to display. If a source URL is provided, then this
     * image will be displayed regardless of which layer types exist on the map.
     *
     * @param {(string | string[])} source
     * @memberof MapView
     */
    setLegend(source: string | string[]): void;
    /**
     * Sets the units to display on the map view.
     *
     * @param {boolean} metric
     * @memberof MapView
     */
    setMetric(metric: boolean): void;
    private render;
    private setupEvents;
    private setupContainers;
    private setupControls;
    private setupOverlays;
    private setupAnimation;
    private setupLegend;
    private handleLayerChange;
    private handleOffsetChange;
    private setImage;
    private _loadingGroups;
    private updateGroups;
    private update;
    private _adjustTypesForUpdate;
    animationUrlForDate(animation: ImageAnimation, date: Date): string;
    animationSizeForImage(animation: ImageAnimation): {
        width: number;
        height: number;
    };
}
export default MapView;
