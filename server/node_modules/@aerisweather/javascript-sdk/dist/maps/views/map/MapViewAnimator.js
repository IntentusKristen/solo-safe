"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _ImageAnimation = _interopRequireDefault(require("../../anim/ImageAnimation"));

var _Timeline = _interopRequireDefault(require("../../anim/Timeline"));

var _utils = require("../../../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class MapViewAnimator {
  constructor(targets, opts) {
    this._targets = targets;
    this._opts = (0, _utils.extend)({
      enabled: true,
      autoplay: false,
      alwaysShowPast: false,
      alwaysShowFuture: false
    }, opts);
    this.init();
  }

  get timeline() {
    return this._timeline;
  }

  set provider(provider) {
    Object.keys(this.timeline.animations).forEach(key => {
      const anim = this.timeline.animations[key];

      if (anim instanceof _ImageAnimation.default) {
        anim.provider = provider;
      }
    });
  }

  get past() {
    return this.timeline.get('past');
  }

  get future() {
    return this.timeline.get('future');
  }

  get pastText() {
    return this.timeline.get('pastText');
  }

  get futureText() {
    return this.timeline.get('futureText');
  }

  init() {
    const targets = this._targets;
    const tl = new _Timeline.default(this._opts);
    this._timeline = tl; // break up past and future layers into separate animations so we can show/hide their containers based on
    // the parent timeline animation's time

    if (targets.past) {
      const pastAnim = new _ImageAnimation.default(targets.past, (0, _utils.extend)({}, this._opts, {
        key: 'past',
        alwaysShow: this._opts.alwaysShowPast
      }));
      tl.add('past', pastAnim);
    }

    if (targets.future) {
      const futureAnim = new _ImageAnimation.default(targets.future, (0, _utils.extend)({}, this._opts, {
        key: 'future',
        future: true,
        alwaysShow: this._opts.alwaysShowFuture
      }));
      tl.add('future', futureAnim);
    }

    if (targets.pastText) {
      const pastTextAnim = new _ImageAnimation.default(targets.pastText, (0, _utils.extend)({}, this._opts, {
        key: 'pastText',
        alwaysShow: this._opts.alwaysShowPast
      }));
      tl.add('pastText', pastTextAnim);
    }

    if (targets.futureText) {
      const futureTextAnim = new _ImageAnimation.default(targets.futureText, (0, _utils.extend)({}, this._opts, {
        key: 'futureText',
        future: true,
        alwaysShow: this._opts.alwaysShowFuture
      }));
      tl.add('futureText', futureTextAnim);
    }
  }

}

var _default = MapViewAnimator;
exports.default = _default;
module.exports = exports.default;