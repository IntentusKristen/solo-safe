"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _EventDispatcher = _interopRequireDefault(require("../../../event/EventDispatcher"));

var _StyledLegend = _interopRequireDefault(require("./StyledLegend"));

var _utils = require("../../../utils");

var _DOM = _interopRequireDefault(require("../../../display/DOM"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * A grouped legend is an object that is responsible for displaying and managing multiple related
 * legends within a single view along with title labels for each as required.
 *
 * @export
 * @class GroupedLegend
 * @implements {LegendRenderable}
 */
class GroupedLegend extends _EventDispatcher.default {
  /**
   * Initializes and returns a grouped legend instance for the specified key and configuration
   * options.
   *
   * @param {string} key
   * @param {GroupedLegendOptions} opts
   * @memberof GroupedLegend
   */
  constructor(key, opts) {
    super();
    this._loaded = [];
    this._key = key;
    this._opts = (0, _utils.extend)({
      types: null
    }, opts);
    this._target = (0, _DOM.default)(`<div class="awxjs__legend awxjs__legend-group awxjs__legend-${key}"></div>`);
    this._legends = {};

    if (this._opts.types) {
      this.trigger('load:start');
      Object.keys(this._opts.types).forEach(type => {
        const config = (0, _utils.extend)({}, opts, (0, _utils.cloneDeep)(this._opts.types[type]));
        delete config.types;

        if (!(0, _utils.isEmpty)(config.use)) {
          type = config.use;
        }

        const legend = new _StyledLegend.default(type, config);
        legend.on('load:done', () => {
          this._loaded.push(type);

          this._checkLoaded();
        });
        this._legends[type] = legend;
        this.$el.append(legend.$el);
      });
    }
  }
  /**
   * Key associated with the legend.
   *
   * @readonly
   * @type {string}
   * @memberof GroupedLegend
   */


  get key() {
    return this._key;
  }
  /**
   * Configuration options.
   *
   * @readonly
   * @type {GroupedLegendOptions}
   * @memberof GroupedLegend
   */


  get opts() {
    return this._opts;
  }
  /**
   * DOM element for the legend.
   *
   * @readonly
   * @type {*}
   * @memberof GroupedLegend
   */


  get $el() {
    return this._target;
  }
  /**
   * Shows the legend DOM element.
   *
   * @memberof GroupedLegend
   */


  show() {
    this.$el.show();
  }
  /**
   * Hides the legend DOM element.
   *
   * @memberof GroupedLegend
   */


  hide() {
    this.$el.hide();
  }
  /**
   * Sets the size of the legend.
   *
   * @param {Size} size
   * @memberof GroupedLegend
   */


  setSize(size) {
    Object.keys(this._legends).forEach(key => {
      const opts = this.opts.types[key];
      const legend = this._legends[key];
      legend.setSize({
        width: size.width * opts.factor,
        height: size.height
      });
    });
  }

  getSize() {
    const container = this.$el.bounds();
    let width = 0;
    let height = container.height;
    Object.keys(this._legends).forEach(key => {
      const legend = this._legends[key];

      if (legend.$el) {
        const bounds = legend.$el.bounds();
        width += bounds.width;
        height = Math.max(height, bounds.height);
      }
    });
    return {
      width,
      height
    };
  }
  /**
   * Sets whether to display data values in Metric units.
   *
   * @param {boolean} metric
   * @memberof GroupedLegend
   */


  setMetric(metric) {
    Object.keys(this._legends).forEach(key => {
      const legend = this._legends[key];
      legend.setMetric(metric);
    });
  }
  /**
   * Resets the legend by removing all existing images.
   *
   * @memberof GroupedLegend
   */


  reset() {
    this.$el.empty();
    this._legends = null;
    this._loaded = [];
  }
  /**
   * Forces the legend to update if needed.
   *
   * @param {*} [opts]
   * @memberof GroupedLegend
   */


  update(opts, force = false) {
    this.trigger('load:start');
    Object.keys(this._legends).forEach(key => {
      this._legends[key].update(null, force);
    });
  }

  _checkLoaded() {
    if (this._loaded.length === Object.keys(this._opts.types).length) {
      this.trigger('load:done');
      setTimeout(() => {
        const size = this.getSize();
        this.$el.css('width', `${size.width}px`);
        this.trigger('resize', size);
      }, 150);
    }
  }

}

var _default = GroupedLegend;
exports.default = _default;
module.exports = exports.default;