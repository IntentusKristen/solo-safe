import EventDispatcher from '../../../event/EventDispatcher';
import { LegendOptions } from '../../types';
import { Size } from '../../../types';
import { LegendRenderable } from '../../types/legend.interface';
/**
 * A legend view is responsible for displaying and manging a series of legend elements.
 *
 * @export
 * @class LegendView
 * @extends {EventDispatcher}
 */
declare class LegendView extends EventDispatcher {
    private _target;
    private _opts;
    private _configs;
    private _store;
    private _loading;
    private _loadCallbacks;
    /**
     * The DOM element for the legend view.
     *
     * @readonly
     * @type {*}
     * @memberof LegendView
     */
    get $el(): any;
    get count(): number;
    /**
     * Initializes and returns a legend view instance with the specified target and configuration
     * object.
     *
     * @param {*} target
     * @param {LegendOptions} [opts]
     * @memberof LegendView
     */
    constructor(target: any, opts?: LegendOptions);
    /**
     * Adds a legend for the specified legend type code and options.
     *
     * @param {string} type
     * @param {LegendOptions} [opts]
     * @returns
     * @memberof LegendView
     */
    add(type: string, opts?: LegendOptions): void;
    /**
     * Returns the legend for the specified type code if it exists in the view.
     *
     * @param {string} type
     * @returns {LegendRenderable}
     * @memberof LegendView
     */
    get(type: string): LegendRenderable;
    /**
     * Updates the legend view for the specified type codes and options. All previously existing
     * legends will be removed.
     *
     * @param {string[]} types
     * @param {*} [opts]
     * @memberof LegendView
     */
    set(types: string[], opts?: any): void;
    /**
     * Removes the legend for the specified type code.
     *
     * @param {string} type
     * @memberof LegendView
     */
    remove(type: string): void;
    /**
     * Sets the legend using a static image URL. All previously existing legends will be removed.
     *
     * @param {string} url
     * @memberof LegendView
     */
    setUrl(url: string): void;
    /**
     * Adds a legend item to the view.
     *
     * @param {LegendRenderable} legend
     * @memberof LegendView
     */
    addLegend(legend: LegendRenderable): void;
    /**
     * Removes a legend item from the view.
     *
     * @param {LegendRenderable} legend
     * @memberof LegendView
     */
    removeLegend(legend: LegendRenderable): void;
    /**
     * Removes all existing legends from the view.
     *
     * @param {string[]} [exclude]
     * @memberof LegendView
     */
    removeAll(exclude?: string[]): void;
    /**
     * Returns whether the view contains a legend for the specified type code.
     *
     * @param {string} type
     * @returns {boolean}
     * @memberof LegendView
     */
    has(type: string): boolean;
    /**
     * Forces an update of all existing legends.
     *
     * @param {{ [key: string]: any }} [opts]
     * @memberof LegendView
     */
    update(opts?: {
        [key: string]: any;
    }): void;
    /**
     * Sets whether the display data values in Metric units.
     *
     * @param {boolean} metric
     * @memberof LegendView
     */
    setMetric(metric: boolean): void;
    /**
     * Sets the size of the view and existing legends.
     *
     * @param {Size} size
     * @memberof LegendView
     */
    setSize(size: Size): void;
    getSize(): Size;
    /**
     * Sets the width of the view and all existing legends. The previous height value will be
     * used.
     *
     * @param {number} width
     * @memberof LegendView
     */
    setWidth(width: number): void;
    private _onResize;
    private configForType;
    private _reset;
    private _each;
    private getKey;
    private createLegend;
    private loadStyles;
}
export default LegendView;
