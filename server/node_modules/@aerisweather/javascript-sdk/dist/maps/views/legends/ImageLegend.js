"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Legend = _interopRequireDefault(require("./Legend"));

var _utils = require("../../../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * An image legend is an object that is responsible for displaying and managing multiple related
 * legends within a single view along with title labels for each as required.
 *
 * @export
 * @class ImageLegend
 * @implements {LegendRenderable}
 */
class ImageLegend extends _Legend.default {
  constructor() {
    super(...arguments);
    this._load = (0, _utils.debounce)(url => {
      if (!url) {
        const error = new Error('Invalid legend url');
        this.trigger('load:error', {
          error
        });
        this.$el.hide();
        return;
      }

      if (!this._image) {
        this._image = new Image();
      }

      this.trigger('load:start');

      this._image.onload = () => {
        const units = this.units();
        const title = this.opts.title ? this.opts.title.replace(/\([^\)]+\)$/, `${units ? `(${units})` : ''}`) : null;
        this.$el.html(`
				${this.opts.title ? `<div class="awxjs__legend-title">${title}</div>` : ''}
				<div class="awxjs__legend-content"><img src="${url}"></div>
			`); // this.$el.show();

        this.trigger('load:done');
        setTimeout(() => {
          const size = this.getSize();
          size.width = Math.max(size.width, this._image.width);
          this.$el.css('width', `${size.width}px`);
          this.trigger('resize', size);
        }, 150);
      };

      this._image.onerror = () => {
        console.warn(`[Aeris] ImageLegend - Failed to load image from ${url}`);
      };

      this._image.src = url;
    }, 250);
  }

  get image() {
    return this._image;
  }

  url() {
    let url;

    if ((0, _utils.isPlainObject)(this.opts.url)) {
      const key = this.opts.metric ? 'metric' : 'imperial';
      url = url[key];
    } else if ((0, _utils.isString)(this.opts.url)) {
      url = this.opts.url;
    }

    return url;
  }

  getSize() {
    const size = super.getSize();

    if (this._image) {
      size.width = Math.max(size.width, this._image.width);
    }

    return size;
  }
  /**
   * Resets the legend by removing all existing images.
   *
   * @memberof ImageLegend
   */


  reset() {
    this.$el.empty();

    if (this._image) {
      this._image.onload = null;
    }

    this._image = null;
  }

  update(opts, force = false) {
    if (!(0, _utils.isEmpty)(opts)) force = true;

    if (force || !this._image) {
      this._load(this.url());
    }
  }

}

var _default = ImageLegend;
exports.default = _default;
module.exports = exports.default;