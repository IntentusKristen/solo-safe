import EventDispatcher from '../../../event/EventDispatcher';
import Account from '../../../account/Account';
import { LegendOptions } from '../../types';
import { Size } from '../../../types';
import { LegendRenderable } from '../../types/legend.interface';
/**
 * A legend implements the `LegendRenderable` interface and provides the base legend
 * functionality.
 *
 * @export
 * @class Legend
 * @implements {LegendRenderable}
 */
declare class Legend extends EventDispatcher implements LegendRenderable {
    private _key;
    private _opts;
    private _target;
    /**
     * Configuration options.
     *
     * @readonly
     * @type {LegendOptions}
     * @memberof Legend
     */
    get opts(): LegendOptions;
    /**
     * Key associated with the legend.
     *
     * @readonly
     * @type {string}
     * @memberof Legend
     */
    get key(): string;
    /**
     * Aeris account used when requesting data for dynamic legends.
     *
     * @readonly
     * @type {Account}
     * @memberof Legend
     */
    get account(): Account;
    /**
     * DOM element for the legend.
     *
     * @readonly
     * @type {*}
     * @memberof Legend
     */
    get $el(): any;
    /**
     * Initializes and returns a legend for the specified key and configuration options.
     *
     * @param {string} key
     * @param {LegendOptions} opts
     * @memberof Legend
     */
    constructor(key: string, opts: LegendOptions);
    /**
     * Shows the legend DOM element.
     *
     * @memberof Legend
     */
    show(): void;
    /**
     * Hides the legend DOM element.
     *
     * @memberof Legend
     */
    hide(): void;
    /**
     * Sets the size of the legend.
     *
     * @param {Size} size
     * @memberof Legend
     */
    setSize(size: Size): void;
    getSize(): Size;
    /**
     * Sets whether to display data values in Metric units.
     *
     * @param {boolean} metric
     * @memberof Legend
     */
    setMetric(metric: boolean): void;
    /**
     * Returns the unit based on whether the legend is displaying values in Metric or Imperial.
     *
     * @returns {string}
     * @memberof Legend
     */
    units(): string;
    /**
     * Resets the legend by removing an existing image.
     *
     * @memberof Legend
     */
    reset(): void;
    /**
     * Forces the legend to update if needed.
     *
     * @param {*} [opts]
     * @memberof Legend
     */
    update(opts?: any, force?: boolean): void;
    resize(): void;
}
export default Legend;
