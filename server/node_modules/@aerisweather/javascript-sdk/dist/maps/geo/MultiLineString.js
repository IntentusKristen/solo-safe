"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _LineString = _interopRequireDefault(require("./LineString"));

var _CoordinateBounds = _interopRequireDefault(require("../../geo/CoordinateBounds"));

var _utils = require("../../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class MultiLineString {
  constructor(coords) {
    if ((0, _utils.isEmpty)(coords)) {
      throw new Error('Invalid coordinates for MultiLineString');
    }

    this.lines = coords.map(lineCoords => new _LineString.default(lineCoords));
    this.coordinates = this.lines.map(line => line.coordinates);
  }

  toArray(reversed = false) {
    return this.lines.map(line => line.toArray(reversed));
  }

  bounds() {
    const bounds = {
      north: null,
      south: null,
      west: null,
      east: null
    };
    this.lines.forEach(line => {
      const b = line.bounds();

      if ((0, _utils.isset)(b)) {
        bounds.north = Math.max(bounds.north, b.north);
        bounds.south = Math.min(bounds.south, b.south);
        bounds.west = Math.min(bounds.west, b.west);
        bounds.east = Math.max(bounds.east, b.east);
      }
    });
    return _CoordinateBounds.default.fromBounds(bounds);
  }

}

var _default = MultiLineString;
exports.default = _default;
module.exports = exports.default;