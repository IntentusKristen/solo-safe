"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.PolygonGeometry = void 0;

var _CoordinateBounds = _interopRequireDefault(require("../../geo/CoordinateBounds"));

var _utils = require("../../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class PolygonGeometry {
  constructor(vertices) {
    if ((0, _utils.isEmpty)(vertices)) {
      throw new Error('Invalid vertices for PolygonGeometry');
    }

    this.coordinates = vertices.map(vertex => {
      if (vertex.length < 2) {
        throw new Error('Coordinate dimension count is less than 2');
      }

      const [lon, lat] = vertex;
      return {
        lat,
        lon
      };
    });
  }

}

exports.PolygonGeometry = PolygonGeometry;

class Polygon {
  constructor(coords) {
    if ((0, _utils.isEmpty)(coords)) {
      throw new Error('Invalid coordinates for Polygon');
    }

    this.inner = [];
    this.coordinates = coords.map((vertices, index) => {
      if (vertices.length < 4) {
        throw new Error('Vertex count in Polygon is less than 4');
      }

      const polygon = new PolygonGeometry(vertices);

      if (index === 0) {
        this.outer = polygon;
      } else {
        this.inner.push(polygon);
      }

      return polygon.coordinates; // return element.map((latlon: LatLonValue) => {
      // 	if (latlon.length < 2) {
      // 		throw new Error('Coordinate dimension count is less than 2');
      // 	}
      // 	const [ lon, lat ] = latlon;
      // 	return { lat, lon };
      // });
    });
  }

  toArray(reversed = false) {
    return this.coordinates.map(polygon => polygon.map(coord => reversed ? [coord.lon, coord.lat] : [coord.lat, coord.lon]));
  }

  bounds() {
    return _CoordinateBounds.default.fromPoints(this.outer.coordinates);
  }

}

var _default = Polygon;
exports.default = _default;