"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Views = void 0;

var _InteractiveMap2 = _interopRequireDefault(require("./interactive/InteractiveMap"));

var _MapView = _interopRequireDefault(require("./views/map/MapView"));

var _LegendView = _interopRequireDefault(require("./views/legends/LegendView"));

var _sources = require("./interactive/sources");

var mapUtils = _interopRequireWildcard(require("./utils"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable spaced-comment */
/// <reference path="../../node_modules/@types/leaflet/index.d.ts" />
/// <reference path="../../node_modules/@types/mapbox-gl/index.d.ts" />
/// <reference path="../../node_modules/@types/openlayers/index.d.ts" />

/* eslint-enable spaced-comment */

/* eslint-disable func-names */

/* eslint-disable object-shorthand */

/* eslint-disable no-redeclare */

/**
 * @ignore
 * Private class extension to better handle naming conflicts within this public interface.
 *
 * @class _InteractiveMap
 * @extends {Map}
 */
class _InteractiveMap extends _InteractiveMap2.default {}
/**
 * @ignore
 */


let _account;
/**
 * @ignore
 */


let _servers;
/**
 * The `Views` module provides the public interface for all mapping functionality, including both
 * static and interactive map views.
 */


var Views;
exports.Views = Views;

(function (Views) {
  /**
   * Provides access to the `View` module's utility functions.
   *
   * @readonly
   * @type { [key: string]: Function }
   */
  Views.utils = Object.assign({}, mapUtils);
  /**
   * Data source classes that can be used to add custom datasets to an `InteractiveMap` instance.
   *
   * @readonly
   * @type {
   * 			Tile: TileSource,
   * 			Vector: VectorSource,
   * 			GeoJson: GeoJsonSource,
   *          Text: TextSource
   * 		}
   */

  Views.datasources = {
    Tile: _sources.TileSource,
    Vector: _sources.VectorSource,
    GeoJson: _sources.GeoJsonSource,
    Text: _sources.TextSource
  };
  /**
   * Sets the Aeris account instance to use with the `Views` module.
   *
   * @param {Account} account
   */

  Views.setAccount = account => {
    _account = account;
  };
  /**
   * Sets the base paths for the API servers to use with data and image requests.
   *
   * @param {Servers} servers
   */


  Views.setServers = servers => {
    _servers = servers;
  };
  /**
   * Initializes and returns a new `Map` instance.
   *
   * @param {*} target
   * @param {InteractiveMapOptions} [opts]
   * @param {(map: Map) => void} [onInit]
   * @returns {InteractiveMap}
   */


  Views.InteractiveMap = function (target, opts, onInit) {
    return new _InteractiveMap(target, Object.assign({}, opts, {
      account: _account,
      servers: opts.servers || _servers
    }), onInit);
  };
  /**
   * Initializes and returns a new `MapView` instance.
   *
   * @param {HTMLElement} target
   * @param {MapViewOptions} [opts]
   * @returns {MapView}
   */


  Views.Map = function (target, opts) {
    return new _MapView.default(target, Object.assign({}, opts, {
      account: _account,
      servers: opts.servers || _servers
    }));
  };
  /**
   * Initializes and returns a new `LegendView` instance.
   *
   * @param {HTMLElement} target
   * @param {LegendOptions} [opts]
   * @returns {LegendView}
   */


  Views.Legend = function (target, opts) {
    return new _LegendView.default(target, Object.assign({}, opts, {
      account: _account
    }));
  };
})(Views || (exports.Views = Views = {}));