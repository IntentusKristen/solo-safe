"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadMapModuleConfig = exports.renderWithFallback = exports.isMapsGLLayer = exports.isOpenLayers = exports.isGoogle = exports.isMaplibre = exports.isMapbox = exports.isLeaflet = exports.isCoordObject = exports.mapTimestampFromDate = void 0;

var _AerisWeather = require("../AerisWeather");

var _utils = require("../utils");

/* eslint-disable spaced-comment */
/// <reference path="../../node_modules/@types/leaflet/index.d.ts" />
/// <reference path="../../node_modules/@types/mapbox-gl/index.d.ts" />
/// <reference path="../../node_modules/@types/googlemaps/index.d.ts" />
/// <reference path="../../node_modules/@types/openlayers/index.d.ts" />
/// <reference path="../../node_modules/maplibre-gl/dist/maplibre-gl.d.ts" />

/* eslint-enable spaced-comment */
const mapTimestampFromDate = date => {
  const gmtDate = new Date(date.getTime() + date.getTimezoneOffset() * 60 * 1000);
  return (0, _utils.formatDate)(gmtDate, 'yyyyMMddHHmm00');
};

exports.mapTimestampFromDate = mapTimestampFromDate;

const isCoordObject = value => {
  if ((0, _utils.isPlainObject)(value)) {
    const {
      lat,
      lon
    } = value;
    return (0, _utils.isset)(lat) && (0, _utils.isset)(lon);
  }

  return false;
};

exports.isCoordObject = isCoordObject;

const isLeaflet = value => {
  if (value) {
    const hasMapProp = (0, _utils.has)(value, 'openPopup');

    if (typeof L !== 'undefined' && (value instanceof L.map || value instanceof L.Map) && hasMapProp) {
      return true;
    }

    if (!(0, _utils.isHTMLElement)(value) && hasMapProp) {
      return true;
    }
  }

  return false;
};

exports.isLeaflet = isLeaflet;

const isMapbox = value => {
  if (value) {
    const hasMapProp = (0, _utils.has)(value, 'queryRenderedFeatures');

    if (typeof mapboxgl !== 'undefined' && value instanceof mapboxgl.Map && hasMapProp) {
      return true;
    }

    if (!(0, _utils.isHTMLElement)(value) && hasMapProp) {
      return true;
    }
  }

  return false;
};

exports.isMapbox = isMapbox;

const isMaplibre = value => {
  if (value) {
    const hasMapProp = (0, _utils.has)(value, 'queryRenderedFeatures');

    if (typeof maplibregl !== 'undefined' && value instanceof maplibregl.Map && hasMapProp) {
      return true;
    }

    if (!(0, _utils.isHTMLElement)(value) && hasMapProp) {
      return true;
    }
  }

  return false;
};

exports.isMaplibre = isMaplibre;

const isGoogle = value => {
  if (value) {
    const hasMapProp = (0, _utils.has)(value, 'getStreetView');

    if (typeof google !== 'undefined' && value instanceof google.maps.Map && hasMapProp) {
      return true;
    }

    if (!(0, _utils.isHTMLElement)(value) && hasMapProp) {
      return true;
    }
  }

  return false;
};

exports.isGoogle = isGoogle;

const isOpenLayers = value => {
  if (value) {
    const hasMapProp = (0, _utils.has)(value, 'forEachFeatureAtPixel');

    if (typeof ol !== 'undefined' && value instanceof ol.Map && hasMapProp) {
      return true;
    }

    if (!(0, _utils.isHTMLElement)(value) && hasMapProp) {
      return true;
    }
  }

  return false;
};

exports.isOpenLayers = isOpenLayers;

const isMapsGLLayer = value => /^mapsgl__/.test(value) || /^mapsgl::/.test(value);

exports.isMapsGLLayer = isMapsGLLayer;

const renderWithFallback = (renderer, data, fallback = '') => {
  if (renderer && (0, _utils.isset)(data) && !(0, _utils.isEmpty)(data)) {
    return renderer(data);
  }

  return fallback;
};

exports.renderWithFallback = renderWithFallback;

const loadMapModuleConfig = (namespace, callback) => {
  (0, _AerisWeather.modulesLoader)().then(modules => {
    const module = (0, _utils.get)(modules, namespace);

    if (module) {
      module().then(Module => {
        Module = Module.default || Module;
        const result = new Module();
        callback(result.id, result.source(), result);
      });
    }
  });
};

exports.loadMapModuleConfig = loadMapModuleConfig;