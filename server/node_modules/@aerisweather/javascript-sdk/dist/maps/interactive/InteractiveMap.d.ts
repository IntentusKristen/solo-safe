import EventDispatcher from '../../event/EventDispatcher';
import Account from '../../account/Account';
import Timeline from '../anim/Timeline';
import { InteractiveMapOptions, LayerOptions } from '../types';
import { Coordinate, GeoBounds } from '../../types';
import MapLayerConfig from './MapLayerConfig';
import Layers from '../Layers';
import MapRequest from '../../network/maps/MapRequest';
import { MapStrategyDataSource } from '../types/mapstrategy.interface';
import { AnyMapStrategy } from '../types/mapstrategy.type';
export declare const isModule: (key: string) => boolean;
export interface MapState {
    center: Coordinate;
    bounds: GeoBounds;
    zoom: number;
}
/**
 * An `InteractiveMap` object provides an abstract interface for displaying weather-related data on an interactive map view using
 * one of the supported third-party mapping libraries.
 *
 * @export
 * @class InteractiveMap
 * @extends {EventDispatcher}
 * @implements {MapStrategyDataSource}
 */
declare class InteractiveMap extends EventDispatcher implements MapStrategyDataSource {
    private _opts;
    private _strategy;
    private _account;
    private _timeline;
    private _layers;
    private _config;
    private _ready;
    private _metric;
    private _indicator;
    private store;
    private _sourceOrder;
    private _stateForData;
    private _refreshInterval;
    private _resumeAnimationTimer;
    private _resumeOnBoundsChange;
    /**
     * Initializes a map instance with the specified target and configuration object.
     *
     * @param {*} target Either the `HTMLElement` where you want your map view to be rendered, or
     * an existing map object instance that pertains to one of the supported third-party mapping
     * libraries. If a map object instance if provided, then that instance will be used for
     * rendering weather data instead of the library creating a new instance.
     * @param {InteractiveMapOptions} [opts] Map configuration
     * @param {(map: InteractiveMap) => void} [onInit] Optional callback to be called when the map
     * view has been fully initialized
     * @memberof InteractiveMap
     */
    constructor(target: any, opts?: InteractiveMapOptions, onInit?: (map: InteractiveMap) => void);
    /**
     * Returns the underlying third-party map object instance associated with the current map strategy.
     *
     * @readonly
     * @memberof InteractiveMap
     */
    get map(): any;
    /**
     * Returns the current map strategy being used.
     *
     * @readonly
     * @type {MapStrategy}
     * @memberof InteractiveMap
     */
    get strategy(): AnyMapStrategy;
    /**
     * Returns the configured options for the map.
     *
     * @readonly
     * @type {InteractiveMapOptions}
     * @memberof InteractiveMap
     */
    get opts(): InteractiveMapOptions;
    /**
     * Configuration and style manager for the map content sources and associated layers.
     *
     * @readonly
     * @type {MapLayerConfig}
     * @memberof InteractiveMap
     */
    get config(): MapLayerConfig;
    /**
     * Returns the map's animation timeline.
     *
     * @readonly
     * @type {Timeline}
     * @memberof InteractiveMap
     */
    get timeline(): Timeline;
    /**
     * Returns the layer metadata info instance.
     *
     * @readonly
     * @type {Layers}
     * @memberof InteractiveMap
     */
    get layerInfo(): Layers;
    /**
     * The Aeris account to use when requesting data for the map.
     *
     * @type {Account}
     * @memberof InteractiveMap
     */
    get account(): Account;
    set account(value: Account);
    /**
     * Returns whether the current map units are set to metric.
     *
     * @readonly
     * @type {boolean}
     * @memberof InteractiveMap
     */
    get isMetric(): boolean;
    /**
     * Returns whether the map is ready, meaning the underlying map view and events have been fully
     * setup and initialized.
     *
     * @returns {boolean}
     * @memberof InteractiveMap
     */
    isReady(): boolean;
    /**
     * Returns the map's center coordinate.
     *
     * @returns {Coordinate}
     * @memberof InteractiveMap
     */
    getCenter(): Coordinate;
    /**
     * Sets the map's center coordinate.
     *
     * @param {Coordinate} coord
     * @memberof InteractiveMap
     */
    setCenter(coord: Coordinate): void;
    /**
     * Returns the current map zoom level.
     *
     * @returns {number}
     * @memberof InteractiveMap
     */
    getZoom(): number;
    /**
     * Sets the map zoom level.
     *
     * @param {number} zoom
     * @memberof InteractiveMap
     */
    setZoom(zoom: number): void;
    /**
     * Sets the map's center coordinate and zoom level.
     *
     * @param {Coordinate} center
     * @param {number} zoom
     * @memberof InteractiveMap
     */
    setView(center: Coordinate, zoom: number): void;
    /**
     * Returns the geographical bounds for the visible map region.
     *
     * @returns {GeoBounds}
     * @memberof InteractiveMap
     */
    getBounds(): GeoBounds;
    /**
     * Sets the map bounds to contain the specified geographical bounds.
     *
     * @param {GeoBounds} bounds
     * @memberof InteractiveMap
     */
    setBounds(bounds: GeoBounds): void;
    /**
     * Sets the map bounds to contain the specified geographical bounds with optional padding insets.
     *
     * @param {GeoBounds} bounds
     * @param {number[]} [padding]
     * @memberof InteractiveMap
     */
    fitBounds(bounds: GeoBounds, padding?: number[]): void;
    /**
     * Sets the units to display on the map.
     *
     * Map content sources that display measurement values should observe the change:unit event
     * and update their content on the map accordingly.
     *
     * @param {boolean} isMetric
     * @memberof InteractiveMap
     */
    setMetric(isMetric: boolean): void;
    /**
     * AMP Layers
     */
    /**
     * Adds an AMP layer to the map for the specified layer code.
     *
     * @param {string} layer
     * @param {LayerOptions} [opts]
     * @returns {InteractiveMap}
     * @memberof InteractiveMap
     */
    addLayer(layer: string, opts?: LayerOptions): InteractiveMap;
    /**
     * Adds a series of AMP layers for the specified array of layer codes.
     *
     * @param {string[]} layers
     * @returns {InteractiveMap}
     * @memberof InteractiveMap
     */
    addLayers(layers: string[]): InteractiveMap;
    /**
     * Removes an AMP layer from the map for the specified layer code.
     *
     * @param {string} layer
     * @returns {InteractiveMap}
     * @memberof InteractiveMap
     */
    removeLayer(layer: string): InteractiveMap;
    /**
     * Removes an AMP layer from the map for the specified identifier.
     *
     * @param {string} id
     * @returns
     * @memberof InteractiveMap
     */
    removeLayerForId(id: string): this;
    /**
     * Removes a series of AMP layers associated with the specified array of layer codes.
     *
     * @param {string[]} layers
     * @returns {InteractiveMap}
     * @memberof InteractiveMap
     */
    removeLayers(layers: string[]): InteractiveMap;
    /**
     * Updates the layer's zIndex order by bringing it to the top of the layer stack. This only
     * affects tile and image layers.
     *
     * @param {string} layer
     * @memberof InteractiveMap
     */
    bringLayerToFront(layer: string): void;
    /**
     * Updates the layer's zIndex order by sending it to the bottom of the layer stack. This only
     * affects tile and image layers.
     *
     * @param {string} layer
     * @memberof InteractiveMap
     */
    sendLayerToBack(layer: string): void;
    /**
     * Updates the layer's zIndex order. This only affects tile and image layers.
     *
     * @param {string} layer
     * @param {number} zIndex
     * @memberof InteractiveMap
     */
    setLayerOrder(layer: string, zIndex: number): void;
    /**
     * Returns the map content source associated with the specified layer code, if any.
     *
     * @param {string} layer
     * @returns {*}
     * @memberof InteractiveMap
     */
    getSourceForLayer(layer: string): any;
    /**
     * Returns the map content source associated with the specified identifier, if any.
     *
     * @param {string} id
     * @returns {*}
     * @memberof InteractiveMap
     */
    getSourceForId(id: string): any;
    /**
     * Instantiates and returns a new map content source instance based on the specified type and
     * configuration options.
     *
     * @param {string} key
     * @param {string} type
     * @param {any} config
     * @returns {any}
     * @memberof InteractiveMap
     */
    createSource(key: string, type: string, config: any): any;
    /**
     * Content Sources
     */
    /**
     * Adds a new map content source for the specified layer code.
     *
     * @param {*} source
     * @param {string} key
     * @returns {InteractiveMap}
     * @memberof InteractiveMap
     */
    addSource(source: any, opts?: LayerOptions): InteractiveMap;
    /**
     * Adds the map content source associated with a map module.
     *
     * @param {*} module
     * @param {*} [overrides=null]
     * @memberof InteractiveMap
     */
    addModule(module: any, overrides?: any, constructorOpts?: any): void;
    /**
     * Removes the map content source associated with the specified layer code.
     *
     * @param {*} source
     * @returns {InteractiveMap}
     * @memberof InteractiveMap
     */
    removeSource(source: any): InteractiveMap;
    /**
     * Removes all active data sources from the map.
     *
     * @returns {InteractiveMap}
     * @memberof InteractiveMap
     */
    removeAllSources(): InteractiveMap;
    /**
     * Returns the map content source associated with the specified key, if any.
     *
     * @param {string} key
     * @returns {*}
     * @memberof InteractiveMap
     */
    getSource(key: string): any;
    /**
     * Returns whether a data source exists on the map for the specified key.
     *
     * @param {string} key
     * @returns {boolean}
     * @memberof InteractiveMap
     */
    hasSource(key: string): boolean;
    /**
     * Presents a callout bubble on the map from the specified target. The target can either be an
     * `Coordinate` object or a native marker object for the current mapping strategy.
     *
     * You can provide native options to configure the callout via the `opts` parameter, which is
     * a configuration object as supported by the strategy's mapping library.
     *
     * @param {*} target
     * @param {*} content
     * @param {*} opts
     * @memberof InteractiveMap
     */
    showCallout(target: any, content: any, opts?: any): void;
    /**
     * Updates the map timeline and all active map content sources on the map.
     *
     * @memberof InteractiveMap
     */
    update: () => void;
    /**
     * Enables auto-updating of map data on regular intervals based on the specified number of
     * seconds.
     *
     * @param {number} interval
     * @memberof InteractiveMap
     */
    enableAutoUpdate(seconds: number): void;
    /**
     * Disables auto-updating of map data.
     *
     * @memberof InteractiveMap
     */
    disableAutoUpdate(): void;
    private _restartAnimationTimeout;
    /**
     * @ignore
     *
     * @memberof InteractiveMap
     */
    _updateTimeline(): void;
    private _updateSourceStyle;
    /**
     * @ignore
     * Updates point and shape map content sources by loading new data for the current map bounds.
     *
     * @memberof InteractiveMap
     */
    _loadForBounds(force?: boolean, isAnimating?: boolean): void;
    /**
     * @ignore
     * Updates existing map content sources for the specified date and time.
     *
     * @param {(number | Date)} date
     * @memberof InteractiveMap
     */
    _updateSourcesForDate(date: number | Date): void;
    /**
     * @ignore
     * Called before the map's visible region changes, either from a center or zoom change.
     *
     * @memberof InteractiveMap
     */
    _beforeBoundsChange(): void;
    /**
     * @ignore
     * Called after the map's visible region changes, either from a center or zoom change. This method will also request an update
     * for all point and shape layers that are active on the map and require new data for the visible region change.
     *
     * @memberof InteractiveMap
     */
    _afterBoundsChange(): void;
    private _dblClickTimer;
    /**
     * @ignore
     * Sets up the event mappings between the internal strategy and Map instance.
     *
     * @memberof InteractiveMap
     */
    _setupEvents(): void;
    /**
     * @ignore
     * @private
     * @memberof InteractiveMap
     */
    private _checkReady;
    /**
     * Data Sources
     */
    /**
     * @ignore
     * @param {string} layer
     * @returns {MapRequest}
     * @memberof InteractiveMap
     */
    requestForMap(layer: string): MapRequest;
}
export default InteractiveMap;
