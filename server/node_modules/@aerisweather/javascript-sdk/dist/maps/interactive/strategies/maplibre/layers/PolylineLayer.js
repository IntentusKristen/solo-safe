"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Layer = _interopRequireDefault(require("./Layer"));

var _utils = require("../../../../../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable spaced-comment */
/// <reference path="../../../../../../node_modules/maplibre-gl/dist/maplibre-gl.d.ts" />

/* eslint-enable spaced-comment */
class MapboxPolylineLayer extends _Layer.default {
  constructor(layer, points, opts = {}, id = undefined) {
    super(layer, opts, id);
    this._needsEventSetup = true;
    this._points = points;
  }

  addTo(map) {
    super.addTo(map);

    if (this._needsEventSetup) {
      map.on('click', this.layerId, e => {
        this.trigger('click', {
          data: this.data,
          shape: this.renderable
        });
      });
      map.on('mouseenter', this.layerId, e => {
        this.trigger('mouseover', {
          data: this.data,
          shape: this.renderable
        });
      });
      map.on('mouseleave', this.layerId, e => {
        this.trigger('mouseout', {
          data: this.data,
          shape: this.renderable
        });
      });
      this._needsEventSetup = false;
    }
  }

  invalidate() {
    this.source = {
      type: 'geojson',
      data: {
        type: 'FeatureCollection',
        features: [{
          type: 'Feature',
          geometry: {
            type: 'LineString',
            coordinates: this._points.map(point => [point.lon, point.lat])
          }
        }]
      }
    };
    this.createRenderable();

    if (this.map) {
      const map = this.map;
      this.remove();
      this.addTo(map);
    }
  }

  createRenderable() {
    const style = (0, _utils.cloneDeep)(this.opts);
    return {
      id: this.layerId,
      type: 'line',
      source: this.sourceId,
      layout: {},
      paint: style
    };
  }

}

var _default = MapboxPolylineLayer;
exports.default = _default;
module.exports = exports.default;