"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var OpenLayers = _interopRequireWildcard(require("."));

var _SVG = require("../../../../display/SVG");

var _utils = require("../../../../utils");

var _color = require("../../../../utils/color");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/* eslint-disable spaced-comment */
/// <reference path="../../../../../node_modules/@types/openlayers/index.d.ts" />

/* eslint-enable spaced-comment */

/**
 * A factory class that generates and returns renderable map objects from data, such as tile layers
 * and annotations, as required by the associated mapping strategy.
 *
 * @export
 * @class OpenLayersOverlayFactory
 * @implements {OverlayFactory}
 * @implements {PointDataSource}
 */
class OpenLayersOverlayFactory {
  /**
   * Returns a map tile source instance configured with the specified layer code and url template
   * string.
   *
   * @param {string} layer
   * @param {MapRequest} service
   * @param {*} [opts]
   * @returns {OSMTileSource}
   * @memberof OSMOverlayFactory
   */
  tileLayer(layer, service, opts) {
    return new OpenLayers.TileSource(layer, service, opts);
  }
  /**
   * Returns a map annotation instance at the provided coordinate and configured for the
   * specified layer code and configuration.
   *
   * @param {string} layer
   * @param {Coordinate} coord
   * @param {MarkerStyle} style
   * @returns {L.Marker}
   * @memberof OSMOverlayFactory
   */


  marker(layer, coord, style) {
    if (style) {
      // if skipped via the style, then return null
      if (style.skip && style.skip === true) {
        return null;
      }
    }

    return new OpenLayers.Marker(coord, null, {
      style
    });
  }
  /**
   * Returns an annotation icon based on the provided configuration.
   *
   * @param {MarkerStyle} style
   * @returns {*}
   * @memberof OSMOverlayFactory
   */


  markerIcon(style) {
    if (style.html) {
      console.warn('awxjs - HTML markers are not currently supported with OpenLayers');
    }

    if (style.svg) {
      let [width, height] = style.size || [12, 12];

      if (style.svg.text) {
        const textStyle = style.svg.text;

        if ((0, _utils.isArray)(textStyle)) {
          textStyle.forEach(styleDef => {
            if (styleDef.autosize) {
              [width, height] = _SVG.SVG.calculateTextSize(styleDef.value, styleDef.size);
            }
          });
        } else {
          const styleDef = textStyle;

          if (styleDef.autosize) {
            [width, height] = _SVG.SVG.calculateTextSize(styleDef.value, styleDef.size);
          }
        }
      }

      height += 3;

      const image = _SVG.SVG.draw(width, height, style.svg);

      return new ol.style.Icon({
        src: `data:image/svg+xml;base64,${btoa(image)}`,
        size: [width, height],
        imgSize: [width, height],
        crossOrigin: 'anonymous'
      });
    }

    if (style.icon) {
      const icon = style.icon;
      return new ol.style.Icon({
        src: icon.url,
        size: style.size,
        imgSize: style.size,
        anchor: icon.anchor,
        crossOrigin: 'anonymous'
      });
    }

    return null;
  }
  /**
   * Returns a polygon instance configured for the specified layer code and configuration.
   *
   * @param {string} layer
   * @param {Polygon[]} shapes
   * @param {ShapeStyle} style
   * @returns {*}
   * @memberof OSMOverlayFactory
   */


  polygon(layer, shapes, style) {
    // generate OpenLayers options from config
    let opts;

    if (style) {
      opts = {
        stroke: null,
        fill: null
      };
      opts.id = style.id;

      if (style.stroke) {
        const {
          r,
          g,
          b
        } = (0, _color.toRGB)(style.stroke.color); // eslint-disable-line object-curly-newline

        opts.stroke = {
          color: `rgba(${r}, ${g}, ${b}, ${style.stroke.opacity || 1.0})`,
          width: style.stroke.width,
          lineCap: style.stroke.lineCap,
          lineJoin: style.stroke.lineJoin,
          lineDash: style.stroke.dashArray,
          lineDashOffset: style.stroke.dashOffset
        };
      }

      if (style.fill) {
        const {
          r,
          g,
          b
        } = (0, _color.toRGB)(style.fill.color); // eslint-disable-line object-curly-newline

        opts.fill = {
          color: `rgba(${r}, ${g}, ${b}, ${(0, _utils.isset)(style.fill.opacity) ? style.fill.opacity : 1.0})`
        };
      }
    }

    shapes.forEach(shape => {
      if (!opts.id) {
        opts.id = shape.id;
      }
    });
    return new OpenLayers.Polygon(layer, shapes, opts);
  }

  polyline(layer, points, style) {
    let opts;

    if (style) {
      opts = {
        stroke: null,
        fill: null
      };
      opts.id = style.id;

      if (style.stroke) {
        const {
          r,
          g,
          b
        } = (0, _color.toRGB)(style.stroke.color); // eslint-disable-line object-curly-newline

        opts.stroke = {
          color: `rgba(${r}, ${g}, ${b}, ${style.stroke.opacity || 1.0})`,
          width: style.stroke.width,
          lineCap: style.stroke.lineCap,
          lineJoin: style.stroke.lineJoin,
          lineDash: style.stroke.dashArray,
          lineDashOffset: style.stroke.dashOffset
        };
      }
    }

    return new OpenLayers.Polyline(layer, points, opts);
  }

}

var _default = OpenLayersOverlayFactory;
exports.default = _default;
module.exports = exports.default;