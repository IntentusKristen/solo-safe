"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _utils = require("../../../../../utils");

var _MapMarker = _interopRequireDefault(require("../../../layers/MapMarker"));

var _utils2 = require("../utils");

var _Popup = _interopRequireDefault(require("../Popup"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable spaced-comment */
///<reference path="../../../../../../node_modules/@types/leaflet/index.d.ts" />

/* eslint-enable spaced-comment */
class OpenLayersMarker extends _MapMarker.default {
  get feature() {
    return this._feature;
  }

  get popup() {
    return this._popup;
  }

  update(opts) {
    var _a;

    if (!(0, _utils.isset)(opts)) return;
    const value = (_a = opts.data) === null || _a === void 0 ? void 0 : _a.value;
    let style = opts.style || {};

    if ((0, _utils.isFunction)(style)) {
      style = style({
        value
      });
    }

    this.setStyle(style);
  }

  setStyle(style) {
    const icon = (0, _utils2.markerIconFromStyle)(style);

    if (this.feature && icon) {
      this.feature.setStyle(new ol.style.Style({
        image: icon
      }));
    }
  }

  setPopup(popup) {
    this._popup = popup;
  }

  createRenderable() {
    const {
      style
    } = this.opts;
    const coord = this.coordinate;
    let icon;

    if (style) {
      icon = (0, _utils2.markerIconFromStyle)(style);

      if (style.callout) {
        let content = style.callout;

        if ((0, _utils.isFunction)(style.callout)) {
          const fn = style.callout;
          content = fn();
        } // marker.setPopupContent(content);


        const popup = new _Popup.default(coord);
        popup.setHTML(content);
        this._popup = popup;
      }
    }

    this._feature = new ol.Feature({
      geometry: new ol.geom.Point(ol.proj.fromLonLat([coord.lon, coord.lat]))
    });
    return new ol.layer.Vector({
      source: new ol.source.Vector({
        features: [this.feature]
      }),
      style: new ol.style.Style({
        image: icon
      }),
      zIndex: style ? style.zIndex : null
    });
  }

  updateVisibility(visible) {}

  addToMap(map, index) {
    const observable = this.renderable;

    if (observable) {
      ['click', 'mouseover', 'mouseout'].forEach(name => {
        const handlerName = `__awxjs_${name}Handler`;

        if (observable[handlerName]) {
          observable.un(name, observable[handlerName]);
        } else {
          observable[handlerName] = e => {
            this.trigger(name, {
              data: this.data,
              marker: observable
            });

            if (this.popup) {
              if (this._activePopup) {
                this._activePopup.remove();
              }

              this.popup.addTo(map);
              this._activePopup = this.popup;
            }
          };

          observable.on('marker:click', observable[handlerName]);
        }
      });
    }

    map.addLayer(this.renderable);
  }

  removeFromMap(map) {
    const observable = this.renderable;

    if (observable) {
      ['click', 'mouseover', 'mouseout'].forEach(name => {
        const handlerName = `__awxjs_${name}Handler`;

        if (observable[handlerName]) {
          observable.un(name, observable[handlerName]);
        }
      });
    }

    map.removeLayer(this.renderable);
  }

}

var _default = OpenLayersMarker;
exports.default = _default;
module.exports = exports.default;