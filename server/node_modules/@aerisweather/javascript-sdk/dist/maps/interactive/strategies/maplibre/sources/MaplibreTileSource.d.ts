import TileSource from '../../../sources/TileSource';
import TileLayer from '../layers/TileLayer';
import MapRequest from '../../../../../network/maps/MapRequest';
import TileAnimation from '../../../../anim/TileAnimation';
import { TileSourceOptions } from '../../../../types/datasource.interface';
import { TiledLayer } from '../../../../types';
/**
 * `MapboxTileSource` is a subclass of `TileSource` that creates and manages a single tile layer to
 * be used with an `MapboxMapStrategy`.
 *
 * @export
 * @class MapboxTileSource
 * @extends {TileSource}
 */
declare class MaplibreTileSource extends TileSource {
    private _animationOverlay;
    constructor(key: string, service: MapRequest, opts?: TileSourceOptions);
    get overlay(): TileLayer;
    set timestamp(value: Date);
    /**
     * Shows the layer associated with the source.
     *
     * @memberof MapboxTileSource
     */
    show(): void;
    /**
     * Hides the layer associated with the source.
     *
     * @memberof MapboxTileSource
     */
    hide(): void;
    /**
     * Flags the source for removal from the managing map strategy.
     *
     * @memberof MapboxTileSource
     */
    remove(): void;
    /**
     * Changes the opacity of source's layer.
     *
     * @param {number} value
     * @memberof MapboxTileSource
     */
    setOpacity(value: number, update?: boolean): void;
    /**
     * Changes the z-index of the source's layer.
     *
     * @param {number} value
     * @memberof MapboxTileSource
     */
    setOrder(value: number): void;
    protected createOverlay(service: MapRequest, opts?: any): TileLayer;
    /**
     * Animation Providers
     */
    animationLayerForDate(animation: TileAnimation, date: Date, wait?: boolean): Promise<TiledLayer>;
}
export default MaplibreTileSource;
