"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Layer = _interopRequireDefault(require("./Layer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable spaced-comment */
/// <reference path="../../../../../../node_modules/@types/openlayers/index.d.ts" />

/* eslint-enable spaced-comment */

/**
 * `TileLayer` is a container class that is responsible for creating and managing a OpenLayers
 * source and associated layer representation on a OpenLayers map.
 */
class OpenLayersTileLayer extends _Layer.default {
  constructor() {
    super(...arguments);
    this._loadCounter = {
      loading: 0,
      loaded: 0
    };
  }
  /**
   * Updates the tile or image url for the layer.
   *
   * @param {string} url
   * @memberof TileLayer
   */


  setUrl(url) {
    this.opts.url = url;

    if (this.map) {
      this.invalidate();
    }
  }
  /**
   * Updates the bounds for the layer when rendered as an image.
   *
   * @param {GeoBounds} bounds
   * @memberof TileLayer
   */


  setBounds(bounds) {
    this.opts.bounds = bounds;
  }
  /**
   * Forces a redraw of the layer on the map.
   *
   * @returns
   * @memberof TileLayer
   */


  invalidate() {
    const map = this.map;
    this.remove();
    this.createRenderable();

    if (map) {
      this.addTo(map, this._targetIndex);
    }
  }

  createRenderable() {
    this._loadCounter = {
      loading: 0,
      loaded: 0
    };
    const source = new ol.source.XYZ({
      url: this.opts.url,
      attributions: this.opts.attribution ? [this.opts.attribution] : null
    });
    source.on('tileloadstart', e => {
      this._loadCounter.loading += 1;
    });
    source.on(['tileloadend', 'tileloaderror'], e => {
      this._loadCounter.loaded += 1;

      if (this._loadCounter.loaded === this._loadCounter.loading) {
        this.trigger('load');
      }
    });
    this._source = source;
    const renderable = new ol.layer.Tile({
      source: this._source
    });
    renderable.setOpacity(this.isHidden ? 0 : this.opacity);
    return renderable;
  }

}

var _default = OpenLayersTileLayer;
exports.default = _default;
module.exports = exports.default;