"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _utils = require("../../../../../utils");

var _MapMarker = _interopRequireDefault(require("../../../layers/MapMarker"));

var _utils2 = require("../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable spaced-comment */
// /<reference path="../../../../../node_modules/@types/googlemaps/index.d.ts" />

/* eslint-enable spaced-comment */
class GoogleMarker extends _MapMarker.default {
  update(opts) {
    var _a;

    if (!(0, _utils.isset)(opts)) return;
    const value = (_a = opts.data) === null || _a === void 0 ? void 0 : _a.value;
    let style = opts.style || {};

    if ((0, _utils.isFunction)(style)) {
      style = style({
        value
      });
    }

    this.setStyle(style);
  }

  setStyle(style) {
    const icon = (0, _utils2.markerIconFromStyle)(style);

    if (icon) {
      this.renderable.setIcon(icon);
    }
  }

  createRenderable() {
    const {
      style
    } = this.opts;
    const coord = this.coordinate;
    const opts = {};

    if (style) {
      opts.icon = (0, _utils2.markerIconFromStyle)(style);

      if (style.zIndex) {
        opts.zIndex = style.zIndex;
      }
    }

    const renderable = new google.maps.Marker((0, _utils.extend)({
      position: new google.maps.LatLng(coord.lat, coord.lon),
      optimized: false
    }, opts));

    if (style && style.callout) {
      let content = style.callout;

      if ((0, _utils.isFunction)(style.callout)) {
        const fn = style.callout;
        content = fn();
      } // const popup = L.popup().setContent(content);
      // marker.bindPopup(popup);

    }

    return renderable;
  }

  updateVisibility(visible) {}

  addToMap(map, index) {
    const renderable = this.renderable;

    if (renderable) {
      this._events.forEach(name => {
        const handlerName = `__awxjs_${name}Handler`;

        if (renderable[handlerName]) {
          renderable[handlerName].remove();
        } else {
          renderable[handlerName] = renderable.addListener(name, () => {
            this.trigger(name, {
              data: this.data,
              marker: renderable
            });
          });
        }
      });

      renderable.setMap(map);
    }
  }

  removeFromMap(map) {
    const renderable = this.renderable;

    if (renderable) {
      this._events.forEach(name => {
        const handlerName = `__awxjs_${name}Handler`;

        if (renderable[handlerName]) {
          renderable[handlerName].remove();
        }
      });

      renderable.setMap(null);
    }
  }

}

var _default = GoogleMarker;
exports.default = _default;
module.exports = exports.default;