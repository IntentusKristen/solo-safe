"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Layer = _interopRequireDefault(require("./Layer"));

var _utils = require("../../../../../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable spaced-comment */
///<reference path="../../../../../../node_modules/@types/leaflet/index.d.ts" />

/* eslint-enable spaced-comment */
class LeafletTileLayer extends _Layer.default {
  constructor(layer, service, opts = undefined, id = undefined) {
    super(layer, opts, id);
    this._service = service;
  }
  /**
   * Updates the tile or image url for the layer.
   *
   * @param {string} url
   * @memberof TileLayer
   */


  setUrl(url) {
    this.opts.url = url;

    if (this.map) {
      this.invalidate();
    }
  }

  setOpacity(value) {
    super.setOpacity(value);
    this.renderable.setOpacity(value);
  }

  setZIndex(index) {
    this.renderable.setZIndex(index);
  }

  updateVisibility(visible) {
    if (this.renderable) {
      this.renderable.setOpacity(visible ? this.opacity : 0);
    }
  }

  createRenderable() {
    const service = this._service;
    const overlay = L.tileLayer(service.url(), (0, _utils.extend)({}, this.opts, {
      subdomains: service.range().join('')
    })); // overlay.on('add', () => {
    // 	this._exists = true;
    // }).on('remove', () => {
    // 	this._exists = false;
    // });

    return overlay;
  }

}

var _default = LeafletTileLayer;
exports.default = _default;
module.exports = exports.default;