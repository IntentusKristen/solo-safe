"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var Maplibre = _interopRequireWildcard(require("."));

var _utils = require("../mapbox/utils");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * A factory class that generates and returns renderable map objects from data, such as tile layers
 * and annotations, as required by the associated mapping strategy.
 *
 * @export
 * @class MapboxOverlayFactory
 * @implements {OverlayFactory}
 * @implements {PointDataSource}
 */
class MaplibreOverlayFactory {
  /**
   * Returns a tile layer instance configured with the specified url template string and options.
   *
   * @param {string} layer
   * @param {MapRequest} service
   * @param {*} [opts]
   * @returns {TileSource}
   * @memberof OverlayFactory
   */
  tileLayer(layer, service, opts) {
    return new Maplibre.TileSource(layer, service, opts);
  }
  /**
   * Returns an annotation, or marker, instance with the specified coordinate and configuration
   * options.
   *
   * @param {string} layer
   * @param {Coordinate} coord
   * @param {MarkerStyle} style
   * @returns {*}
   * @memberof OverlayFactory
   */


  marker(layer, coord, style) {
    if (style) {
      // if skipped via the style, then return null
      if (style.skip && style.skip === true) {
        return null;
      }
    }

    return new Maplibre.Marker(coord, undefined, {
      style
    });
  }
  /**
   * Returns a polygon instance configured for the specified layer code and configuration.
   *
   * @param {string} layer
   * @param {Polygon[]} shapes
   * @param {ShapeStyle} style
   * @returns {*}
   * @memberof OverlayFactory
   */


  polygon(layer, shapes, style) {
    let opts;

    if (style) {
      opts = (0, _utils.formatLayerOptions)(style);
    }

    shapes.forEach(shape => {
      if (!opts.id) {
        opts.id = shape.id;
      }
    });
    return new Maplibre.Polygon(layer, shapes, opts, opts.id);
  }

  polyline(layer, points, style) {
    const mapping = {
      stroke: {
        color: 'lineColor',
        opacity: 'lineOpacity',
        width: 'lineWidth',
        dashArray: 'lineDashArray'
      }
    };
    let opts;

    if (style) {
      if (style) {
        opts = (0, _utils.formatLayerOptions)(style);
        delete opts.fill;
      }
    }

    const p = points.map(point => [point.lat, point.lon]);
    return new Maplibre.Polyline(layer, points, opts, opts.id);
  }

}

var _default = MaplibreOverlayFactory;
exports.default = _default;
module.exports = exports.default;