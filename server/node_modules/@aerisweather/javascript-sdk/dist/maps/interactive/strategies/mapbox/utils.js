"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.markerIconFromStyle = exports.formatLayerOptions = void 0;

var _SVG = require("../../../../display/SVG");

var _utils = require("../../../../utils");

var _strings = require("../../../../utils/strings");

// generate Mapbox paint options from config
const formatLayerOptions = opts => {
  const formatted = {
    stroke: false,
    fill: false
  };
  formatted.id = opts.id;

  if (opts.stroke) {
    formatted.stroke = true;
    formatted.lineColor = opts.stroke.color;
    formatted.lineOpacity = opts.stroke.opacity;
    formatted.lineWidth = opts.stroke.width;
    formatted.lineCap = opts.stroke.lineCap;
    formatted.lineJoin = opts.stroke.lineJoin;
    formatted.lineDasharray = opts.stroke.dashArray;
    formatted.dashOffset = opts.stroke.dashOffset;
  }

  if (opts.fill) {
    formatted.fill = true;
    formatted.fillColor = opts.fill.color;
    formatted.fillOpacity = opts.fill.opacity;
  }

  if (formatted.fill && !(0, _utils.isset)(opts.fillOpacity)) opts.fillOpacity = 1;
  if (formatted.stroke && !(0, _utils.isset)(opts.strokeOpacity)) opts.strokeOpacity = 1;
  delete formatted.fill;
  delete formatted.stroke; // convert camelcase style keys to hypenated strings

  Object.keys(formatted).forEach(key => {
    const k = (0, _strings.hyphenate)(key);

    if (k !== key) {
      formatted[k] = formatted[key];
      delete formatted[key];
    }
  });
  return formatted;
};

exports.formatLayerOptions = formatLayerOptions;

const markerIconFromStyle = style => {
  if (!style) {
    return null;
  }

  if (style.html) {
    console.warn('awxjs - HTML markers are not currently supported with Mapbox GL');
  }

  if (style.svg) {
    const [width, height] = style.size || [12, 12];

    if (document) {
      const div = document.createElement('div');
      div.innerHTML = _SVG.SVG.draw(width, height, style.svg);

      if (style.zIndex) {
        div.style.zIndex = `${style.zIndex}`;
      }

      return div;
    }
  }

  if (style.icon) {
    const image = new Image();
    image.src = style.icon.url;
    image.width = style.size[0];
    image.height = style.size[1];
    return image;
  }

  return null;
};

exports.markerIconFromStyle = markerIconFromStyle;