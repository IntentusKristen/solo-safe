"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var Leaflet = _interopRequireWildcard(require("."));

var _SVG = require("../../../../display/SVG");

var _utils = require("./utils");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// /<reference path="../../../../../node_modules/@types/leaflet/index.d.ts" />

/**
 * A factory class that generates and returns renderable map objects from data, such as tile layers
 * and annotations, as required by the associated mapping strategy.
 *
 * @export
 * @class LeafletOverlayFactory
 * @implements {OverlayFactory}
 * @implements {PointDataSource}
 */
class LeafletOverlayFactory {
  /**
   * Returns a map tile source instance configured with the specified layer code and url template
   * string.
   *
   * @param {string} layer
   * @param {MapRequest} service
   * @param {*} [opts]
   * @returns {OSMTileSource}
   * @memberof OSMOverlayFactory
   */
  tileLayer(layer, service, opts) {
    return new Leaflet.TileSource(layer, service, opts);
  }
  /**
   * Returns a map annotation instance at the provided coordinate and configured for the
   * specified layer code and configuration.
   *
   * @param {string} layer
   * @param {Coordinate} coord
   * @param {IMarker} config
   * @returns {L.Marker}
   * @memberof OSMOverlayFactory
   */


  marker(layer, coord, style) {
    if (style) {
      // if skipped via the style, then return null
      if (style.skip && style.skip === true) {
        return null;
      }
    }

    return new Leaflet.Marker(coord, null, {
      style
    });
  }
  /**
   * Returns an annotation icon based on the provided configuration.
   *
   * @param {IMarker} config
   * @returns {*}
   * @memberof OSMOverlayFactory
   */


  markerIcon(style) {
    if (style.html) {
      return L.divIcon({
        html: style.html,
        iconSize: style.size,
        className: style.className || ''
      });
    }

    if (style.svg) {
      const [width, height] = style.size || [12, 12];
      return L.divIcon({
        html: _SVG.SVG.draw(width, height, style.svg),
        iconSize: style.size,
        className: style.className || ''
      });
    }

    if (style.icon) {
      const icon = style.icon;
      return L.icon({
        iconUrl: icon.url,
        iconRetinaUrl: icon.retinaUrl,
        iconSize: style.size,
        iconAnchor: icon.anchor,
        className: style.className || ''
      });
    }

    return null;
  }
  /**
   * Returns a polygon instance configured for the specified layer code and configuration.
   *
   * @param {string} layer
   * @param {Polygon[]} shapes
   * @param {ShapeStyle} style
   * @returns {*}
   * @memberof OSMOverlayFactory
   */


  polygon(layer, shapes, style) {
    // generate Leaflet options from config
    let opts;

    if (style) {
      opts = (0, _utils.formatLayerOptions)(style);
    }

    return new Leaflet.Polygon(layer, shapes, opts);
  }

  polyline(layer, points, style) {
    let opts;

    if (style) {
      opts = (0, _utils.formatLayerOptions)(style);
    }

    const p = points.map(point => [point.lat, point.lon]);
    return new Leaflet.Polyline(layer, p, opts);
  }

}

var _default = LeafletOverlayFactory;
exports.default = _default;
module.exports = exports.default;