import * as Google from '.';
import { Coordinate } from '../../../../types';
import MapRequest from '../../../../network/maps/MapRequest';
import { MarkerStyle, OverlayFactory, ShapeStyle } from '../../../types';
import { PolygonDef } from '../../../types/layer.type';
/**
 * A factory class that generates and returns renderable map objects from data, such as tile layers
 * and annotations, as required by the associated mapping strategy.
 *
 * @export
 * @class LeafletOverlayFactory
 * @implements {OverlayFactory}
 * @implements {PointDataSource}
 */
declare class GoogleOverlayFactory implements OverlayFactory {
    /**
     * Returns a map tile source instance configured with the specified layer code and url template
     * string.
     *
     * @param {string} layer
     * @param {MapRequest} service
     * @param {*} [opts]
     * @returns {OSMTileSource}
     * @memberof OSMOverlayFactory
     */
    tileLayer(layer: string, service: MapRequest, opts?: any): Google.TileSource;
    /**
     * Returns a map annotation instance at the provided coordinate and configured for the
     * specified layer code and configuration.
     *
     * @param {string} layer
     * @param {Coordinate} coord
     * @param {MarkerStyle} style
     * @returns {L.Marker}
     * @memberof OSMOverlayFactory
     */
    marker(layer: string, coord: Coordinate, style: MarkerStyle): Google.Marker;
    /**
     * Returns a polygon layer for the specified shapes and configuration.
     *
     * @param {string} layer
     * @param {Polygon[]} shapes
     * @param {ShapeStyle} style
     * @returns {*}
     * @memberof OSMOverlayFactory
     */
    polygon(layer: string, shapes: PolygonDef[], style: ShapeStyle): Google.Polygon;
    /**
     * Returns a polyline layer for the specified points and configuration.
     *
     * @param layer
     * @param points
     * @param style
     * @returns
     */
    polyline(layer: string, points: Coordinate[], style: ShapeStyle): Google.Polyline;
}
export default GoogleOverlayFactory;
