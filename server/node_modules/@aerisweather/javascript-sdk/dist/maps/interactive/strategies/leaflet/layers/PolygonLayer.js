"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Layer = _interopRequireDefault(require("./Layer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class LeafletPolygonLayer extends _Layer.default {
  constructor(layer, polygons, opts = {}, id = undefined) {
    super(layer, opts, id);
    this.setOpacity(opts.fillOpacity);
    this._polygons = polygons;
  }

  setOpacity(value) {
    super.setOpacity(value);

    if (this.renderable) {
      // opacity gets applied to the original fill/stroke opacity separately
      this.renderable.setStyle(Object.assign(Object.assign({}, this.opts), {
        fillOpacity: this.opts.fillOpacity * value,
        opacity: this.opts.opacity * value
      }));
    }
  }

  addToMap(map, index) {
    this.renderable.off();
    this.renderable.on('click', () => this.trigger('click', {
      data: this.data,
      shape: this.renderable
    }));
    this.renderable.on('mouseover', () => this.trigger('mouseover', {
      data: this.data,
      shape: this.renderable
    }));
    this.renderable.on('mouseout', () => this.trigger('mouseout', {
      data: this.data,
      shape: this.renderable
    }));
    super.addToMap(map, index);
  }

  removeFromMap(map) {
    this.renderable.off();
    this.renderable.remove();
  }

  createRenderable() {
    const groups = []; // need to combine all polygon coordinate paths into a single grouped array for the multi
    // polygon layer

    this._polygons.forEach(shape => {
      const outer = shape.outer;
      const inner = shape.inner ? shape.inner : [];
      groups.push([outer, ...inner]);
    });

    return L.polygon(groups, Object.assign(Object.assign({}, this.opts), {
      fillOpacity: this.opts.fillOpacity * this.opacity,
      opacity: this.opts.opacity * this.opacity
    }));
  }

}

var _default = LeafletPolygonLayer;
exports.default = _default;
module.exports = exports.default;