"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _MapLayer = _interopRequireDefault(require("../../../layers/MapLayer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable spaced-comment */
/// <reference path="../../../../../../node_modules/@types/openlayers/index.d.ts" />

/* eslint-enable spaced-comment */

/**
 * `Layer` is a container class that is responsible for creating and managing a OpenLayers
 * source and associated layer representation on a OpenLayers map.
 */
class OpenLayersLayer extends _MapLayer.default {
  setOpacity(value) {
    var _a;

    super.setOpacity(value);
    (_a = this.renderable) === null || _a === void 0 ? void 0 : _a.setOpacity(value);
  }

  setZIndex(index) {
    var _a;

    (_a = this.renderable) === null || _a === void 0 ? void 0 : _a.setZIndex(index);
  }

  exists() {
    const map = this.map;

    if (!map) {
      return false;
    } // return (map.getLayer(this.layerId) !== undefined);


    return false;
  }

  invalidate() {}

  createRenderable() {
    return undefined;
  }

  updateVisibility(visible) {
    var _a;

    (_a = this.renderable) === null || _a === void 0 ? void 0 : _a.setVisible(visible);
  }

  addToMap(map, index) {
    this._targetIndex = index;

    if (this.renderable) {
      if (index >= 0) {
        map.getLayers().insertAt(index, this.renderable);
      } else {
        map.addLayer(this.renderable);
      }
    } else {
      this.invalidate();
    }
  }

  removeFromMap(map) {
    if (this.renderable) {
      map.removeLayer(this.renderable);
    }
  }

}

var _default = OpenLayersLayer;
exports.default = _default;
module.exports = exports.default;