"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _utils = require("../../../../../utils");

var _MapMarker = _interopRequireDefault(require("../../../layers/MapMarker"));

var _utils2 = require("../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable spaced-comment */
///<reference path="../../../../../../node_modules/@types/leaflet/index.d.ts" />

/* eslint-enable spaced-comment */
class LeafletMarker extends _MapMarker.default {
  update(opts) {
    var _a;

    if (!(0, _utils.isset)(opts)) return;
    const value = (_a = opts.data) === null || _a === void 0 ? void 0 : _a.value;
    let style = opts.style || {};

    if ((0, _utils.isFunction)(style)) {
      style = style({
        value
      });
    }

    this.setStyle(style);
  }

  setStyle(style) {
    const icon = (0, _utils2.markerIconFromStyle)(style);

    if (icon) {
      this.renderable.setIcon(icon);
    }
  }

  createRenderable() {
    const {
      style
    } = this.opts;
    const coord = this.coordinate;
    const opts = {};

    if (style) {
      opts.icon = (0, _utils2.markerIconFromStyle)(style);

      if (style.zIndex) {
        opts.zIndexOffset = style.zIndex;
      }
    }

    const renderable = L.marker([coord.lat, coord.lon], opts);

    if (style.callout) {
      let content = style.callout;

      if ((0, _utils.isFunction)(style.callout)) {
        const fn = style.callout;
        content = fn();
      }

      const popup = L.popup().setContent(content);
      renderable.bindPopup(popup);
    }

    return renderable;
  }

  updateVisibility(visible) {}

  addToMap(map, index) {
    this.renderable.off();
    this.renderable.on('click', () => this.trigger('click', {
      data: this.data,
      marker: this.renderable
    }));
    this.renderable.on('mouseover', () => this.trigger('mouseover', {
      data: this.data,
      marker: this.renderable
    }));
    this.renderable.on('mouseout', () => this.trigger('mouseout', {
      data: this.data,
      marker: this.renderable
    }));
    this.renderable.addTo(map);
  }

  removeFromMap(map) {
    this.renderable.off();
    this.renderable.remove();
  }

}

var _default = LeafletMarker;
exports.default = _default;
module.exports = exports.default;