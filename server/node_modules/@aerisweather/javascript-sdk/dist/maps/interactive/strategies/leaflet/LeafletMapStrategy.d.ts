import MapStrategy from '../MapStrategy';
import LeafletOverlayFactory from './LeafletOverlayFactory';
import { Coordinate, GeoBounds, Point } from '../../../../types';
import { MarkerOptions } from '../../../types';
declare global {
    const L: any;
}
/**
 * A map strategy for working with the third-party Leaflet mapping library.
 *
 * @export
 * @class LeafletMapStrategy
 * @extends {EventDispatcher}
 * @implements {MapStrategy}
 */
declare class LeafletMapStrategy extends MapStrategy<L.Map, LeafletOverlayFactory> {
    private _clickedMapLayer;
    private _baseLayer;
    get strategy(): string;
    get $el(): any;
    constructor(target: HTMLElement | HTMLElement[] | string | L.Map, opts?: any);
    protected loadDependencies(): Promise<void>;
    protected setupMap(target: HTMLElement | HTMLElement[] | string | L.Map): void;
    /**
     * Updates the base layer using tiles from the provided URL.
     *
     * @param {string} url
     * @memberof LeafletMapStrategy
     */
    setBaseStyle(url: string): void;
    setBaseUrl(url: string): void;
    setView(center: Coordinate, zoom: number): void;
    getCenter(): Coordinate;
    setCenter(coord: Coordinate): void;
    getZoom(): number;
    setZoom(zoom: number): void;
    getBounds(): GeoBounds;
    setBounds(bounds: GeoBounds): void;
    fitBounds(bounds: GeoBounds, padding?: number[]): void;
    /** Sources */
    isTile(source: any): boolean;
    isMarker(el: any): boolean;
    isPolygon(el: any): boolean;
    isPolyline(el: any): boolean;
    /** Overlays */
    addOverlay(overlay: any): void;
    removeOverlay(overlay: any): void;
    /** Markers */
    addMarker(marker: any, data?: any): void;
    removeMarker(marker: any): void;
    updateMarker(marker: any, options: MarkerOptions, layer?: string): void;
    bindCalloutToMarker(marker: any, content: string): void;
    /** Polygons & Polylines */
    addShape(shape: any, data?: any): void;
    removeShape(shape: any): void;
    showShape(shape: any): void;
    hideShape(shape: any): void;
    /** Conversions */
    coordToPoint(coord: Coordinate): Point;
    pointToCoord(point: Point): Coordinate;
    /** Callout */
    showCallout(target: any, content: any, opts?: any): void;
    protected _setupEvents(): void;
    protected _shouldTriggerEvent(name: string): boolean;
    protected _dataForMapEvent(name: string, event: any): any;
}
export default LeafletMapStrategy;
