/// <reference types="leaflet" />
import TileSource from '../../../sources/TileSource';
import TileAnimation from '../../../../anim/TileAnimation';
import MapRequest from '../../../../../network/maps/MapRequest';
import { TiledLayer } from '../../../../types';
/**
 * `LeafletTileSource` is a subclass of `TileSource` that creates and manages a single tile layer to
 * be used with an `LeafletMapStrategy`.
 *
 * @export
 * @class LeafletTileSource
 * @extends {TileSource}
 */
declare class LeafletTileSource extends TileSource {
    private _visible;
    private _exists;
    get overlay(): L.TileLayer;
    set timestamp(value: Date);
    /**
     * Shows the layer associated with the source.
     *
     * @memberof LeafletTileSource
     */
    show(): void;
    /**
     * Hides the layer associated with the source.
     *
     * @memberof LeafletTileSource
     */
    hide(): void;
    /**
     * Flags the source for removal from the managing map strategy.
     *
     * @memberof LeafletTileSource
     */
    remove(): void;
    /**
     * Changes the opacity of source's layer.
     *
     * @param {number} value
     * @memberof LeafletTileSource
     */
    setOpacity(value: number, update?: boolean): void;
    /**
     * Changes the z-index of the source's layer.
     *
     * @param {number} value
     * @memberof LeafletTileSource
     */
    setOrder(value: number): void;
    protected createOverlay(service: MapRequest, opts?: any): any;
    /**
     * Animation Providers
     */
    animationLayerForDate(animation: TileAnimation, date: Date, wait?: boolean): Promise<TiledLayer>;
}
export default LeafletTileSource;
