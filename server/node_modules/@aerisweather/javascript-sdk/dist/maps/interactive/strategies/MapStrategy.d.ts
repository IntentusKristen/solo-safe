import EventDispatcher from '../../../event/EventDispatcher';
import { TileSource } from '../sources';
import { Coordinate, GeoBounds, Point } from '../../../types';
import { MapStrategyDataSource } from '../../types/mapstrategy.interface';
import { MarkerOptions, OverlayFactory } from '../../types';
/**
 * An abstract map strategy class that provides the core functionality required for a specific
 * mapping strategy. This class should be subclassed per each strategy instead of being
 * instantiated directly.
 *
 * @export
 * @class MapStrategy
 * @extends {EventDispatcher}
 */
declare abstract class MapStrategy<Map, Factory extends OverlayFactory> extends EventDispatcher {
    dataSource: MapStrategyDataSource;
    protected _map: Map;
    protected _factory: Factory;
    protected _eventMapping: {
        [key: string]: string | string[];
    };
    protected _setInitialView: boolean;
    private _opts;
    private _ready;
    private _sources;
    private _sourceOrder;
    constructor(target: HTMLElement | HTMLElement[] | string | Map, opts?: any);
    get strategy(): string;
    /**
     * The HTML target in which the map is rendered to.
     */
    get $el(): any;
    /**
     * The third-party map view instance associated with the mapping strategy.
     */
    get map(): Map;
    /**
     * A factory provider that is responsible for generating the necessary map content as
     * required by the mapping strategy.
     */
    get factory(): Factory;
    get sources(): any[];
    get opts(): {
        [key: string]: any;
    };
    /**
     * Returns whether the map and underlying map strategy have been fully setup and initialized.
     *
     * @returns {boolean}
     * @memberof MapStrategy
     */
    isReady(): boolean;
    private init;
    protected loadDependencies(): Promise<void>;
    protected setupMap(target: any): void;
    /**
     * Sets the current map view using the specified center coordinate and zoom level.
     *
     * @param {Coordinate} center
     * @param {number} zoom
     * @memberof MapStrategy
     */
    setView(center: Coordinate, zoom: number): void;
    /**
     * Returns the geographical center coordinate of the map view.
     *
     * @returns {Coordinate}
     * @memberof MapStrategy
     */
    getCenter(): Coordinate;
    /**
     * Sets the geographical center coordinate of the map view.
     *
     * @param {Coordinate} coord
     * @memberof MapStrategy
     */
    setCenter(coord: Coordinate): void;
    /**
     * Returns the current zoom level of the map view.
     *
     * @returns {number}
     * @memberof MapStrategy
     */
    getZoom(): number;
    /**
     * Sets the zoom level of the map view.
     *
     * @param {number} zoom
     * @memberof MapStrategy
     */
    setZoom(zoom: number): void;
    /**
     * Returns the geographical bounds for the visible region of the map view.
     *
     * @returns {GeoBounds}
     * @memberof MapStrategy
     */
    getBounds(): GeoBounds;
    /**
     * Sets the geographical bounds for the visible region of the map view.
     *
     * @param {GeoBounds} bounds
     * @memberof MapStrategy
     */
    setBounds(bounds: GeoBounds): void;
    /**
     * Sets the minimum visible geographical bounds for the map view so that the specified bounds
     * are contained within the visible region with an optional inset.
     *
     * @param {GeoBounds} bounds
     * @param {number[]} padding
     * @memberof MapStrategy
     */
    fitBounds(bounds: GeoBounds, padding: number[]): void;
    /** Sources */
    /**
     * Adds the specified map content source to the map.
     *
     * @param {*} source
     * @memberof MapStrategy
     */
    addSource(source: any): void;
    /**
     * Removes the specified map content source from the map.
     *
     * @param {*} source
     * @memberof MapStrategy
     */
    removeSource(source: any): void;
    /**
     * Returns whether the element is a tile source object.
     *
     * @param el
     * @returns {boolean}
     * @memberof MapStrategy
     */
    isTile(source: any): boolean;
    /**
     * Returns whether the element is a vector source object.
     *
     * @param el
     * @returns {boolean}
     * @memberof MapStrategy
     */
    isVector(source: any): boolean;
    isText(source: any): boolean;
    /**
     * Returns whether the element is a native map marker instance.
     *
     * @param el
     * @returns {boolean}
     * @memberof MapStrategy
     */
    isMarker(el: any): boolean;
    /**
     * Returns whether the element is a native map polygon instance.
     *
     * @param el
     * @returns {boolean}
     * @memberof MapStrategy
     */
    isPolygon(el: any): boolean;
    /**
     * Returns whether the element is a native map polyline instance.
     *
     * @param el
     * @returns {boolean}
     * @memberof MapStrategy
     */
    isPolyline(el: any): boolean;
    /** Overlays */
    /**
     * Adds the specified overlay layer to the map. The overlay must be an instance of the type
     * required by the configured map strategy and underlying third-party mapping library.
     *
     * @param {*} overlay
     * @param {number} index
     * @memberof MapStrategy
     */
    addOverlay(overlay: any): void;
    /**
     * Adds a series of overlay layers to the map. The overlays must be an instance of the type
     * required by the configured map strategy and underlying third-party mapping library.
     *
     * @param {any[]} overlays
     * @memberof MapStrategy
     */
    addOverlays(overlays: any[]): void;
    /**
     * Removes the specified overlay layer from the map. The overlay must be an instance of the
     * type required by the configured map strategy and underlying third-party mapping library.
     *
     * @param {*} overlay
     * @memberof MapStrategy
     */
    removeOverlay(overlay: any): void;
    /**
     * Removes a series of overlay layers from the map. The overlay must be an instance of the
     * type required by the configured map strategy and underlying third-party mapping library.
     *
     * @param {any[]} overlays
     * @memberof MapStrategy
     */
    removeOverlays(overlays: any[]): void;
    /** Markers */
    /**
     * Adds the marker to the map view. The provided marker must be an instance type required by
     * the current mapping strategy.
     *
     * @param marker
     * @param data
     */
    addMarker(marker: any, data?: any): void;
    /**
     * Adds an array of markers to the map view. The provided markers must be an instance type
     * required by the current mapping strategy.
     *
     * @param markers
     */
    addMarkers(markers: any[]): void;
    /**
     * Removes the marker from the map view. The provided marker must be an instance type required
     * by the current mapping strategy.
     *
     * @param marker
     */
    removeMarker(marker: any): void;
    /**
     * Adds an array of markers from the map view. The provided markers must be an instance type
     * required by the current mapping strategy.
     *
     * @param markers
     */
    removeMarkers(markers: any[]): void;
    /**
     * Updates an existing marker using the specified options. The provided marker must already
     * exist on the map view and must be an instance type required by the current mapping strategy.
     *
     * @param marker
     * @param options
     */
    updateMarker(marker: any, options: MarkerOptions, layer?: string): void;
    bindCalloutToMarker(marker: any, content: string): void;
    /** Polygons & Polylines */
    /**
     * Adds a polygon or polyline to the map view. The provided shape must be an instance type
     * required by the current mapping strategy.
     *
     * @param {*} shape
     * @param {number} index
     * @memberof MapStrategy
     */
    addShape(shape: any, data?: any): void;
    /**
     * Adds an array of polylines and/or polygons to the map view. The provided shapes must be an
     * instance type required by the current mapping strategy.
     *
     * @param {any[]} shapes
     * @memberof MapStrategy
     */
    addShapes(shapes: any[], data?: any): void;
    /**
     * Removes the polyline or polygon from the map view. The provided shape must be an instance
     * type required by the current mapping strategy.
     *
     * @param {*} shape
     * @memberof MapStrategy
     */
    removeShape(shape: any): void;
    /**
     * Removes an array of polylines and/or polygons from the map view. The provided shape must be
     * an instance type required by the current mapping strategy.
     *
     * @param {any[]} shapes
     * @memberof MapStrategy
     */
    removeShapes(shapes: any[]): void;
    showShape(shape: any): void;
    showShapes(shapes: any[]): void;
    hideShape(shape: any): void;
    hideShapes(shapes: any[]): void;
    /** Callout */
    /**
     * Presents a callout bubble on the map from the specified target. The target can either be an
     * `Coordinate` object or a native marker object for the mapping strategy.
     *
     * @param {*} target
     * @param {*} content
     * @param {*} opts
     * @memberof MapStrategy
     */
    showCallout(marker: any, content: any, opts?: any): void;
    /**
     * Utilities
     */
    /**
     * Converts the specified geographical coordinate to pixel coordinates within the map view's
     * container.
     *
     * @param {Coordinate} coord
     * @returns {Point}
     * @memberof MapStrategy
     */
    coordToPoint(coord: Coordinate): Point;
    /**
     * Converts the specified pixel coordinates within the map view's container to geographical
     * coordinates on the map.
     *
     * @param {Point} point
     * @returns {Coordinate}
     * @memberof MapStrategy
     */
    pointToCoord(point: Point): Coordinate;
    clear(): void;
    protected _setupEvents(): void;
    protected _shouldTriggerEvent(name: string): boolean;
    protected _dataForMapEvent(name: string, event: Event): any;
    tileLayer(layer: string, date: Date, opts?: any): TileSource;
}
export default MapStrategy;
