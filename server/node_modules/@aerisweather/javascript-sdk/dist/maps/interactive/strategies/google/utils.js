"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.markerIconFromStyle = exports.formatLayerOptions = void 0;

var _SVG = require("../../../../display/SVG");

var _utils = require("../../../../utils");

const formatLayerOptions = opts => {
  const formatted = {};

  if (opts.stroke) {
    formatted.strokeColor = opts.stroke.color;
    formatted.strokeOpacity = opts.stroke.opacity;
    formatted.strokeWeight = opts.stroke.width; // formatted.lineCap = opts.stroke.lineCap;
    // formatted.lineJoin = opts.stroke.lineJoin;
    // formatted.dashArray = opts.stroke.dashArray;
    // formatted.dashOffset = opts.stroke.dashOffset;
  } else {
    formatted.strokeOpacity = 0;
  }

  if (opts.fill) {
    formatted.fillColor = opts.fill.color;
    formatted.fillOpacity = opts.fill.opacity;
  } else {
    formatted.fillOpacity = 0;
  }

  if (!(0, _utils.isset)(opts.fillOpacity)) opts.fillOpacity = 1;
  if (!(0, _utils.isset)(opts.strokeOpacity)) opts.strokeOpacity = 1;
  return formatted;
};

exports.formatLayerOptions = formatLayerOptions;

const markerIconFromStyle = style => {
  // html marker not supported, would require custom overlay
  // re: https://humaan.com/blog/custom-html-markers-google-maps/
  if (style.html) {
    console.warn('awxjs - HTML markers are not currently supported with Google Maps');
  }

  if (style.svg) {
    let [width, height] = style.size || [12, 12];

    if (style.svg.text) {
      const textStyle = style.svg.text;

      if ((0, _utils.isArray)(textStyle)) {
        textStyle.forEach(styleDef => {
          if (styleDef.autosize) {
            [width, height] = _SVG.SVG.calculateTextSize(styleDef.value, styleDef.size);
          }
        });
      } else {
        const styleDef = textStyle;

        if (styleDef.autosize) {
          [width, height] = _SVG.SVG.calculateTextSize(styleDef.value, styleDef.size);
        }
      }
    }

    height += 3;

    const image = _SVG.SVG.draw(width, height, style.svg);

    return {
      url: `data:image/svg+xml;base64,${btoa(image)}`,
      size: new google.maps.Size(width, height),
      scaledSize: new google.maps.Size(width, height),
      anchor: new google.maps.Point(width / 2, height / 2)
    };
  }

  if (style.icon) {
    const icon = style.icon;
    const options = {
      url: icon.url,
      size: new google.maps.Size(style.size[0], style.size[1]),
      scaledSize: new google.maps.Size(style.size[0], style.size[1])
    };

    if (icon.anchor && icon.anchor.length === 2) {
      options.anchor = new google.maps.Point(icon.anchor[0], icon.anchor[1]);
    }

    return options;
  }

  return null;
};

exports.markerIconFromStyle = markerIconFromStyle;