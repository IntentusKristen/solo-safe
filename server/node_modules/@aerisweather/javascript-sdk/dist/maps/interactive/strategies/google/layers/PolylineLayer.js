"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Layer = _interopRequireDefault(require("./Layer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable spaced-comment */
///<reference path="../../../../../../node_modules/@types/googlemaps/index.d.ts" />

/* eslint-enable spaced-comment */
class GooglePolylineLayer extends _Layer.default {
  constructor(layer, points, opts = undefined, id = undefined) {
    super(layer, opts, id);
    this._points = points;
  }

  setOpacity(value) {
    super.setOpacity(value);

    if (this.renderable) {
      this.renderable.setOptions(Object.assign(Object.assign({}, this.opts), {
        strokeOpacity: value
      }));
    }
  }

  createRenderable() {
    const renderable = new google.maps.Polyline(Object.assign(Object.assign({}, this.opts), {
      path: this._points.map(coord => ({
        lat: coord.lat,
        lng: coord.lon
      }))
    }));
    renderable.addListener('click', () => this.trigger('click', {
      polyline: this
    }));
    renderable.addListener('mouseover', () => this.trigger('mouseover', {
      polyline: this
    }));
    renderable.addListener('mouseout', () => this.trigger('mouseout', {
      polyline: this
    }));
    return renderable;
  }

  addToMap(map) {
    if (this.renderable) {
      this.renderable.setMap(map);
    }
  }

  removeFromMap(map) {
    if (this.renderable) {
      this.renderable.setMap(null);
    }
  }

}

var _default = GooglePolylineLayer;
exports.default = _default;
module.exports = exports.default;