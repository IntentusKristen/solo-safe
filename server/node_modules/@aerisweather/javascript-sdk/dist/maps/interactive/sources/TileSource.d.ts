import EventDispatcher from '../../../event/EventDispatcher';
import TileAnimation, { TileAnimationProvider } from '../../anim/TileAnimation';
import ImageAnimation from '../../anim/ImageAnimation';
import MapRequest from '../../../network/maps/MapRequest';
import TileDataAnimator from './TileDataAnimator';
import { TiledLayer, TileSourceOptions, AnimatableSource } from '../../types';
/**
 * An interface that is implemented by an object that provides the necessary data for a tile layer-based overlay.
 */
export interface ITileDataSource {
    /**
     * Asks the data source to return a new tile layer source for the specified layer code and date.
     * @param layer
     * @param date
     */
    tileLayer(layer: string, date: Date, opts?: any): TileSource;
}
/**
 * `TileSource` is an abstract object that is responsible for managing a single tile layer on a map view and providing
 * additional functionality for the layer, such as controlling a layer's opacity and loading and running animations.
 *
 * This class is intended to be subclassed by each supported mapping strategy in order to configure the appropriate underlying
 * layer instance that is added to the strategy's map view.
 */
declare class TileSource extends EventDispatcher implements TiledLayer, AnimatableSource<TileAnimation | ImageAnimation>, TileAnimationProvider {
    /**
     * Data key associated with the data source.
     *
     * @type {string}
     * @memberof TileSource
     */
    key: string;
    code: string;
    /**
     * Whether the data source is enabled.
     *
     * @type {boolean}
     * @memberof TileSource
     */
    enabled: boolean;
    /**
     * The receiver's data source.
     *
     * @type {ITileDataSource}
     * @memberof TileSource
     */
    dataSource?: ITileDataSource;
    isAnimationFrame: boolean;
    protected _overlay: any;
    protected _timestamp: Date;
    protected _opacity: number;
    protected _opts: any;
    protected _animator: TileDataAnimator;
    protected _service: MapRequest;
    protected _hidden: boolean;
    /**
     * Initializes a new tile source instance configured with the specified AMP layer code and tile url template string.
     *
     * @param {string} layer
     * @param {string} url
     * @param {TileSourceOptions} [opts]
     * @memberof TileSource
     */
    constructor(key: string, service: MapRequest, opts?: TileSourceOptions);
    /**
     * Identifier associated with the data source.
     *
     * @type {string}
     * @memberof TileSource
     */
    get identifier(): string;
    set identifier(value: string);
    /** Tile template URL */
    get url(): string;
    /** Underlying map layer instance that is added to a map view */
    get overlay(): any;
    /** Current timestamp to use when requesting tile data */
    get timestamp(): Date;
    set timestamp(value: Date);
    get service(): MapRequest;
    /**
     * Returns the animation associated with the static layer.
     */
    get animation(): TileAnimation | ImageAnimation;
    /**
     * Returns the url template string to use for tile requests based on the current timestamp.
     */
    urlTemplate(): string;
    isFuture(): boolean;
    updateVisibility(): void;
    canShow(): boolean;
    isAnimationActive(): boolean;
    isAnimating(): boolean;
    /**
     * Shows the tile layer.
     */
    show(): void;
    /**
     * Hides the tile layer.
     */
    hide(): void;
    remove(): void;
    /**
     * Returns whether the source is currently visible.
     *
     * @returns {boolean}
     * @memberof TileSource
     */
    isVisible(): boolean;
    /**
     * Updates the opacity of the tile layer.
     * @param value
     */
    setOpacity(value: number, update?: boolean): void;
    /**
     * Updates the z-index order of the tile layer on the parent map view.
     * @param value
     */
    setOrder(value: number): void;
    destroy(): void;
    protected createOverlay(service: MapRequest, opts?: any): any;
    /** Animation Provider */
    animationLayerForDate(animation: TileAnimation, date: Date, wait?: boolean): Promise<TiledLayer>;
}
export default TileSource;
