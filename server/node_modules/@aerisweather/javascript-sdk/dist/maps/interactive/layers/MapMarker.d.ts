import EventDispatcher from '../../../event/EventDispatcher';
import { Coordinate } from '../../../types';
import { MarkerOptions, MarkerStyle } from '../../types';
export interface MapMarkerOptions {
    id?: string;
    style?: MarkerStyle;
}
/**
 * `MapMarker` is a container class that is responsible for creating and managing a map marker
 * representation on an interactive map.
 */
declare abstract class MapMarker<Map, T extends MapMarkerOptions, Element> extends EventDispatcher {
    id: string;
    data: Record<string, any>;
    readonly coordinate: Coordinate;
    readonly opts: T;
    private _map;
    private _hidden;
    private _renderable;
    protected _events: Array<string>;
    /**
     * Map currently associated with the marker.
     *
     * @readonly
     * @type {Map}
     * @memberof MapMarker
     */
    get map(): Map;
    /**
     * Native map object(s) that gets rendered to the map.
     *
     * @readonly
     * @type {S}
     * @memberof MapMarker
     */
    get renderable(): Element;
    constructor(coord: Coordinate, data: unknown, opts: T, id?: string);
    /**
     * Returns whether the marker is currently hidden.
     *
     * @readonly
     * @type {boolean}
     * @memberof MapMarker
     */
    get isHidden(): boolean;
    /**
     * Adds the marker to the specified map.
     *
     * @param {Map} map
     * @param {number} index
     * @memberof MapMarker
     */
    addTo(map: Map, index?: number): void;
    /**
     * Removes the marker from the map it is currently active on.
     *
     * @returns
     * @memberof MapMarker
     */
    remove(): void;
    update(opts: MarkerOptions): void;
    setStyle(style: MarkerStyle): void;
    invalidate(): void;
    protected abstract createRenderable(): Element;
    protected abstract updateVisibility(visible: boolean): void;
    protected abstract addToMap(map: Map, index?: number): void;
    protected abstract removeFromMap(map: Map): void;
}
export default MapMarker;
