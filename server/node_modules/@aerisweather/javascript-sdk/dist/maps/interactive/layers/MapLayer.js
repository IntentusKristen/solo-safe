"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _EventDispatcher = _interopRequireDefault(require("../../../event/EventDispatcher"));

var _utils = require("../../../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * `MapLayer` is a container class that is responsible for creating and managing a layer representation
 * on an interactive map.
 */
class MapLayer extends _EventDispatcher.default {
  constructor(layer, opts, id = undefined) {
    super();
    this._opacity = 1;
    this._hidden = false;
    this._events = ['click', 'mouseover', 'mouseout'];
    this._idPrefix = `aeriswx`;
    this.id = id || layer;
    this._opts = (0, _utils.cloneDeep)(opts);
    this._opacity = (0, _utils.isset)(opts.opacity) ? opts.opacity : 1;
  }

  get opts() {
    return this._opts;
  }
  /**
   * Layer identifier on the map.
   *
   * @readonly
   * @type {string}
   * @memberof MapLayer
   */


  get layerId() {
    const id = this.id ? `-${this.id}` : '';
    return `${this._idPrefix}${id}`;
  }
  /**
   * Map currently associated with the layer.
   *
   * @readonly
   * @type {Map}
   * @memberof MapLayer
   */


  get map() {
    return this._map;
  }
  /**
   * Native map object(s) that gets rendered to the map.
   *
   * @readonly
   * @type {S}
   * @memberof MapLayer
   */


  get renderable() {
    return this._renderable;
  }
  /**
   * Returns the current layer opacity.
   *
   * @readonly
   * @type {number}
   * @memberof MapLayer
   */


  get opacity() {
    return this._opacity;
  }
  /**
   * Returns whether the layer is currently hidden.
   *
   * @readonly
   * @type {boolean}
   * @memberof MapLayer
   */


  get isHidden() {
    return this._hidden;
  }
  /**
   * Adds the layer to the specified map.
   *
   * @param {Map} map
   * @param {number} index
   * @memberof MapLayer
   */


  addTo(map, index) {
    if (this.map === map) return;
    this._map = map;
    this._targetIndex = index;
    this._renderable = this.createRenderable();
    this.addToMap(map, index);
    this.trigger('map:add', {
      map,
      index
    });
  }
  /**
   * Removes the layer from the map it is currently active on.
   *
   * @returns
   * @memberof MapLayer
   */


  remove() {
    if (!this.map) return;
    this.removeFromMap(this.map);
    this._map = null;
    this.trigger('map:remove');
  }
  /**
   * Shows the layer on the map.
   *
   * @memberof MapLayer
   */


  show() {
    this._hidden = false;
    this.updateVisibility(true);
  }
  /**
   * Hides the layer on the map.
   *
   * @memberof MapLayer
   */


  hide() {
    this._hidden = true;
    this.updateVisibility(false);
  }
  /**
   * Changes the opacity of the layer.
   *
   * @param {number} value
   * @memberof MapLayer
   */


  setOpacity(value) {
    this._opacity = value;
  }

  setZIndex(index) {
    throw new Error('Subclasses of MapLayer should override setZIndex()');
  }
  /**
   * Returns whether the layer currently exists on the map.
   *
   * @returns {boolean}
   * @memberof MapLayer
   */


  exists() {
    const map = this.map;

    if (!map) {
      return false;
    }

    return false;
  }

}

var _default = MapLayer;
exports.default = _default;
module.exports = exports.default;