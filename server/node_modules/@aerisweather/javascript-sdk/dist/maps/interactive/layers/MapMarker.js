"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _EventDispatcher = _interopRequireDefault(require("../../../event/EventDispatcher"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * `MapMarker` is a container class that is responsible for creating and managing a map marker
 * representation on an interactive map.
 */
class MapMarker extends _EventDispatcher.default {
  constructor(coord, data, opts, id = undefined) {
    super();
    this._hidden = false;
    this._events = ['click', 'mouseover', 'mouseout'];
    this.id = id;
    this.coordinate = coord;
    this.data = data;
    this.opts = Object.assign({}, opts);
  }
  /**
   * Map currently associated with the marker.
   *
   * @readonly
   * @type {Map}
   * @memberof MapMarker
   */


  get map() {
    return this._map;
  }
  /**
   * Native map object(s) that gets rendered to the map.
   *
   * @readonly
   * @type {S}
   * @memberof MapMarker
   */


  get renderable() {
    return this._renderable;
  }
  /**
   * Returns whether the marker is currently hidden.
   *
   * @readonly
   * @type {boolean}
   * @memberof MapMarker
   */


  get isHidden() {
    return this._hidden;
  }
  /**
   * Adds the marker to the specified map.
   *
   * @param {Map} map
   * @param {number} index
   * @memberof MapMarker
   */


  addTo(map, index) {
    if (this.map === map) return;
    this._map = map;

    if (!this._renderable) {
      this._renderable = this.createRenderable();
    }

    this.addToMap(map, index);
    this.trigger('map:add', {
      map,
      index
    });
  }
  /**
   * Removes the marker from the map it is currently active on.
   *
   * @returns
   * @memberof MapMarker
   */


  remove() {
    if (!this.map) return;
    this.removeFromMap(this.map);
    this._map = null;
    this.trigger('map:remove');
  }

  update(opts) {}

  setStyle(style) {}

  invalidate() {
    const map = this.map;
    this.remove();
    this._renderable = this.createRenderable();
    this.addTo(map);
  }

}

var _default = MapMarker;
exports.default = _default;
module.exports = exports.default;