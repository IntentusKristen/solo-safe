import EventDispatcher from '../../../event/EventDispatcher';
export interface MapLayerOptions {
    id?: string;
    opacity?: number;
}
/**
 * `MapLayer` is a container class that is responsible for creating and managing a layer representation
 * on an interactive map.
 */
declare abstract class MapLayer<Map, T extends MapLayerOptions, Element> extends EventDispatcher {
    id: string;
    source: any;
    enabled: boolean;
    data: Record<string, any>;
    private _idPrefix;
    private _opts;
    private _map;
    private _opacity;
    private _hidden;
    private _renderable;
    protected _targetIndex: number;
    protected _events: Array<string>;
    constructor(layer: string, opts: T, id?: string);
    get opts(): T;
    /**
     * Layer identifier on the map.
     *
     * @readonly
     * @type {string}
     * @memberof MapLayer
     */
    get layerId(): string;
    /**
     * Map currently associated with the layer.
     *
     * @readonly
     * @type {Map}
     * @memberof MapLayer
     */
    get map(): Map;
    /**
     * Native map object(s) that gets rendered to the map.
     *
     * @readonly
     * @type {S}
     * @memberof MapLayer
     */
    get renderable(): Element;
    /**
     * Returns the current layer opacity.
     *
     * @readonly
     * @type {number}
     * @memberof MapLayer
     */
    get opacity(): number;
    /**
     * Returns whether the layer is currently hidden.
     *
     * @readonly
     * @type {boolean}
     * @memberof MapLayer
     */
    get isHidden(): boolean;
    /**
     * Adds the layer to the specified map.
     *
     * @param {Map} map
     * @param {number} index
     * @memberof MapLayer
     */
    addTo(map: Map, index?: number): void;
    /**
     * Removes the layer from the map it is currently active on.
     *
     * @returns
     * @memberof MapLayer
     */
    remove(): void;
    /**
     * Shows the layer on the map.
     *
     * @memberof MapLayer
     */
    show(): void;
    /**
     * Hides the layer on the map.
     *
     * @memberof MapLayer
     */
    hide(): void;
    /**
     * Changes the opacity of the layer.
     *
     * @param {number} value
     * @memberof MapLayer
     */
    setOpacity(value: number): void;
    setZIndex(index: number): void;
    /**
     * Returns whether the layer currently exists on the map.
     *
     * @returns {boolean}
     * @memberof MapLayer
     */
    exists(): boolean;
    /**
     * Forces a redraw of the layer on the map.
     *
     * @returns
     * @memberof MapLayer
     */
    abstract invalidate(): void;
    protected abstract createRenderable(): Element;
    protected abstract updateVisibility(visible: boolean): void;
    protected abstract addToMap(map: Map, index?: number): void;
    protected abstract removeFromMap(map: Map): void;
}
export default MapLayer;
