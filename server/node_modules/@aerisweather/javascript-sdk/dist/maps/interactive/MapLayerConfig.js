"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _style = _interopRequireDefault(require("./style"));

var _Layers = require("../Layers");

var _utils = require("../../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Class that manages the configuration and style providers based on layer code.
 *
 * @export
 * @class MapLayerConfig
 */
class MapLayerConfig {
  /**
   * Initializes and returns a map configuration instance with the provided styles.
   *
   * @param {({ [key: string]: LayerStyleGroups | LayerStyle })} [styles]
   * @memberof MapLayerConfig
   */
  constructor(styles) {
    this._configs = {
      'air-quality': _style.default.airquality,
      'convective': _style.default.convectiveOutlook,
      'drought-monitor': _style.default.droughtMonitor,
      earthquakes: _style.default.earthquakes,
      fires: _style.default.fires,
      'fire-outlook': _style.default.fireOutlook,
      'lightning-strikes': _style.default.lightningStrikes,
      records: _style.default.records,
      'river-observations': _style.default.rivers,
      stormcells: _style.default.stormcells,
      stormreports: _style.default.stormreports,
      text: _style.default.text
    };
    if (styles) this.setStyles(styles);
  }
  /**
   * Returns the layer configuration for the specified layer code.
   *
   * @param {string} layer
   * @returns {LayerOptions}
   * @memberof MapLayerConfig
   */


  getConfig(layer) {
    return this._configs[layer];
  }

  setConfig(layer, config) {
    this._configs[layer] = config;
  }
  /**
   * Sets the style(s) for the specified layer code.
   *
   * @param {string} layer
   * @param {(LayerStyleGroups | LayerStyle)} style
   * @memberof MapLayerConfig
   */


  setStyle(layer, style) {
    const config = this.getConfig(layer) || {};

    if ((0, _Layers.isTile)(layer)) {
      let rasterStyle;

      if (style.raster) {
        rasterStyle = style.raster;
      } else {
        rasterStyle = style;
      }

      config.style = (0, _utils.extend)(config.style, rasterStyle);
    } else if ((0, _Layers.isVector)(layer) || (0, _Layers.isText)(layer)) {
      let markerStyle;
      let polygonStyle;
      let polylineStyle;
      const grouped = (0, _utils.isset)(style.marker) || (0, _utils.isset)(style.polygon) || (0, _utils.isset)(style.polyline);

      if (style.marker) {
        markerStyle = style.marker;
      } else if (grouped === false) {
        markerStyle = style;
      }

      if (style.polygon) {
        polygonStyle = style.polygon;
      } else if (grouped === false) {
        polygonStyle = style;
      }

      if (style.polyline) {
        polylineStyle = style.polyline;
      } else if (grouped === false) {
        polylineStyle = style;
      }

      config.style = (0, _utils.extend)(config.style, {
        marker: markerStyle,
        polygon: polygonStyle,
        polyline: polylineStyle
      });
    }

    this._configs[layer] = (0, _utils.cloneDeep)(config);
  }
  /**
   * Sets the style(s) for the specified layers.
   *
   * @param {({ [layer: string]: LayerStyleGroups | LayerStyle })} layers
   * @memberof MapLayerConfig
   */


  setStyles(layers) {
    Object.keys(layers).forEach(layer => this.setStyle(layer, layers[layer]));
  }
  /**
   * Returns the style associated with the specified layer code, if any.
   *
   * @param {string} layer
   * @param {(( 'raster' | 'marker' | 'polygon' | 'polyline'))} type
   * @returns {LayerStyle}
   * @memberof MapLayerConfig
   */


  getStyle(layer, type) {
    const config = this.getConfig(layer);

    if (config) {
      const style = config.style;

      if (style[type]) {
        return style[type];
      }

      return style;
    }

    return undefined;
  }
  /**
   * Sets the text style to use for text annotations.
   *
   * @param {ShapeStyle} style
   * @memberof MapLayerConfig
   */


  setTextStyle(style) {
    this.setStyle('text', {
      marker: style
    });
  }
  /**
   * Returns the text style.
   *
   * @returns {ShapeStyle}
   * @memberof MapLayerConfig
   */


  getTextStyle() {
    return this.getStyle('text', 'marker');
  }

}

var _default = MapLayerConfig;
exports.default = _default;
module.exports = exports.default;