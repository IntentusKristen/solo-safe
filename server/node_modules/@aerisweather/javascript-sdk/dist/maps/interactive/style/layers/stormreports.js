"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.config = void 0;

var _utils = require("../../../../utils");

/**
 * @private
*/
const color = (code = '') => {
  code = code.toLowerCase();

  switch (code) {
    case 'avalanche':
      return '#639fec';

    case 'blizzard':
      return '#4100e2';

    case 'flood':
      return '#117d00';

    case 'fog':
      return '#767676';

    case 'ice':
      return '#e100e2';

    case 'hail':
      return '#62def7';

    case 'lightning':
      return '#8c8c8c';

    case 'rain':
      return '#38e600';

    case 'snow':
      return '#175cef';

    case 'tides':
      return '#40db83';

    case 'tornado':
      return '#c50000';

    case 'tropical':
      return '#FF5D00';

    case 'wind':
      return '#d8cc00';

    default:
      return '#555555';
  }
};
/**
 * @private
*/


const reportValue = (type, detail, metric = false) => {
  detail = detail || {};

  if (/\brain\b/.test(type)) {
    return metric ? `${(detail.rainMM || 0).toFixed(1)} mm` : `${(detail.rainIN || 0).toFixed(2)} in`;
  }

  if (/\bsnow\b/.test(type)) {
    return metric ? `${(detail.snowCM || 0).toFixed(1)} cm` : `${(detail.snowIN || 0).toFixed(1)} in`;
  }

  if (/\bhail\b/.test(type)) {
    return metric ? `${(detail.hailCM || 0).toFixed(1)} cm` : `${(detail.hailIN || 0).toFixed(1)} in`;
  }

  if (/\bwind\b/.test(type)) {
    return metric ? `${detail.windSpeedKMH} kmh` : `${detail.windSpeedMPH} mph`;
  }

  return null;
};
/**
 * @private
*/


const config = {
  data: {
    request: {
      endpoint: 'stormreports'
    },
    properties: {
      id: 'id',
      timestamp: 'report.timestamp'
    }
  },
  style: {
    marker: data => {
      const type = (0, _utils.get)(data, 'report.cat');
      return {
        className: 'marker-stormreport',
        svg: {
          shape: {
            type: 'circle',
            fill: {
              color: color(type)
            },
            stroke: {
              color: '#ffffff',
              width: 2
            }
          }
        },
        size: [14, 14]
      };
    }
  },
  animation: {
    enabled: true
  }
};
exports.config = config;
var _default = config;
exports.default = _default;