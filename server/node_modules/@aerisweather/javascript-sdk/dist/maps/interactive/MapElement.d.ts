import CoordinateBounds from '../../geo/CoordinateBounds';
import Geometry from '../geo/Geometry';
import { LineString, Point } from '../geo';
import { MarkerStyle, ShapeStyle } from '../types';
/**
 * An object that represents a map element and contains the data, style and renderable object
 * associated with the element.
 */
declare class MapElement<Feature extends Geometry, Style> {
    /**
     * The element identifier.
     *
     * @type {string}
     * @memberof MapElement
     */
    id: string;
    /**
     * Model data this element represents.
     *
     * @type {*}
     * @memberof MapElement
     */
    data: any;
    /**
     * Style configuration for the element.
     *
     * @type {Style}
     * @memberof MapElement
     */
    style: Style;
    /**
     * Native map object that gets added to a map view based on the current strategy.
     *
     * @type {*}
     * @memberof MapElement
     */
    renderable: any;
    /**
     * GeoJSON geometry represented by the element.
     *
     * @type {Feature}
     * @memberof MapElement
     */
    geometry: Feature;
    /**
     * Returns the coordinate bounds that contains the element's geometry.
     *
     * @readonly
     * @type {CoordinateBounds}
     * @memberof MapElement
     */
    get bounds(): CoordinateBounds;
    /**
     * A Boolean value indicating whether the element should adjust its opacity when the parent data
     * source's opacity changes. Default value is `true`.
     *
     * @readonly
     * @type {boolean}
     * @memberof MapElement
     */
    get adjustOpacity(): boolean;
    constructor(data: any, style: Style, renderable: any);
}
/**
 * A marker map element.
 */
export declare class MarkerMapElement extends MapElement<Point, MarkerStyle> {
}
/**
 * A polyline map element.
 */
export declare class PolylineMapElement extends MapElement<LineString, ShapeStyle> {
}
/**
 * A polygon map element.
 */
export declare class PolygonMapElement extends MapElement<Geometry, ShapeStyle> {
}
export default MapElement;
