import { MarkerStyle, ShapeStyle } from '.';
import { MapRequest } from '../..';
import { Coordinate } from '../../types';
import { TileSource } from '../interactive/sources';
import { AnyMapSourceOptions } from './datasource.type';
import { PolygonDef } from './layer.type';
export interface LayerOptions extends AnyMapSourceOptions {
    /**
     * The map content source type to use. If not provided, the default for the associated layer
     * code will be used.
     *
     * The following types are supported:
     * - `tile`: render the layer using raster tiles
     * - `vector`: render the layer using vector elements, e.g. markers, polygons and/or polylines
     * - `geojson`: render GeoJSON data using vector elements, e.g. markers, polygons and/or polylines
     * - `text`: render the layer using text labels
     *
     * @type {'tile' | 'vector' | 'text'}
     */
    type?: 'tile' | 'vector' | 'geojson' | 'text';
    /**
     * A Boolean indicating whether the layer name should be validated when adding to the map.
     * The default value is `true`.
     *
     * When enabled for raster layers, the layer code will be validated to ensure it is a
     * valid AMP raster layer in order to prevent 404 request errors for invalid layer
     * requests.
     *
     * @type {boolean}
     */
    validate?: boolean;
}
/**
 * A data type that represents metadata for an Aeris Maps (AMP) layer modifier.
 */
export interface LayerModifier {
    /**
     * Modifier name.
     *
     * @type {string}
     * @memberof LayerModifier
     */
    name: string;
    /**
     * Modifier description.
     *
     * @type {string}
     * @memberof LayerModifier
     */
    description: string;
    /**
     * Whether the modifier is required as part of the layer.
     *
     * @type {boolean}
     * @memberof LayerModifier
     */
    required: boolean;
    /**
     * An array of supported modifier options.
     *
     * @type {{ id: string, label: string }[]}
     * @memberof LayerModifier
     */
    options: {
        id: string;
        label: string;
    }[];
}
/**
 * A data type that represents metadata for an Aeris Maps (AMP) layer.
 */
export interface LayerConfig {
    /**
     * Layer identifier.
     *
     * @type {string}
     */
    id: string;
    /**
     * Layer code.
     *
     * @type {string}
     */
    code?: string;
    /**
     * Layer category.
     *
     * @type {string}
     */
    category?: string;
    /**
     * Layer name.
     *
     * @type {string}
     */
    name: string;
    /**
     * Layer description.
     *
     * @type {string}
     */
    description?: string;
    /**
     * List of regions covered by the layer.
     *
     * @type {string}
     */
    regions?: string;
    /**
     * Layer update interval.
     *
     * @type {string}
     */
    interval?: string;
    /**
     * Layer thumbnail URL.
     *
     * @type {string}
     */
    thumbSrc?: string;
    /**
     * Array of modifier information supported by the layer.
     *
     * @type {LayerModifier[]}
     */
    modifiers?: LayerModifier[];
    /**
     * Array of Aeris account levels that are required for accessing the layer.
     *
     * @type {string[]}
     */
    bundle?: string[];
    /**
     * Legend source URL to use for the layer.
     *
     * @type {string}
     */
    legendSrc?: string;
    /**
     * Layer identifier to inherit metadata from.
     *
     * @type {string}
     */
    use?: string;
}
export interface TiledLayer {
    show(): void;
    hide(): void;
    isVisible(): boolean;
    remove(): void;
}
/**
 * Implemented by a class that is expected to provide layer configuration and instances as required
 * for a particular mapping strategy and third-party mapping library.
 */
export interface OverlayFactory {
    /**
     * Returns a tile layer instance configured with the specified url template string and options.
     *
     * @param {string} layer
     * @param {MapRequest} service
     * @param {*} [opts]
     * @returns {TileSource}
     * @memberof OverlayFactory
     */
    tileLayer(layer: string, service: MapRequest, opts?: any): TileSource;
    /**
     * Returns an annotation, or marker, instance with the specified coordinate and configuration
     * options.
     *
     * @param {string} layer
     * @param {Coordinate} coord
     * @param {MarkerStyle} style
     * @returns {*}
     * @memberof OverlayFactory
     */
    marker(layer: string, coord: Coordinate, style: MarkerStyle): any;
    /**
     * Returns a polygon instance configured for the specified layer code and configuration.
     *
     * @param {string} layer
     * @param {Polygon[]} shapes
     * @param {ShapeStyle} style
     * @returns {*}
     * @memberof OverlayFactory
     */
    polygon(layer: string, shapes: PolygonDef[], style: ShapeStyle): any;
    /**
     * Returns a polyline instance for the array of points and configuration.
     *
     * @param {string} layer
     * @param {Coordinate[]} points
     * @param {ShapeStyle} style
     * @returns {*}
     * @memberof OverlayFactory
     */
    polyline(layer: string, points: Coordinate[], style: ShapeStyle): any;
}
