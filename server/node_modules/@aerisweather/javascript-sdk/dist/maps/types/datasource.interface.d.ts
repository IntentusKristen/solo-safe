import { AnimationOptions, RasterStyle, TileAnimationOptions, VectorStyle } from '.';
import { ApiRequest, MapRequest } from '../..';
import { ApiAction } from '../../types/request.enum';
import { Coordinate } from '../../types';
/**
 * A data type that represents the configuration options for a map content source instance.
 */
export interface MapSourceOptions {
    /**
     * Unique identifier for the source.
     *
     * @type {string}
     */
    id?: string;
}
/**
 * A data type that provides the configuration options for a tile source instance.
 */
export interface TileSourceOptions extends MapSourceOptions {
    /**
     * Style associated with the source.
     *
     * @type {RasterStyle}
     */
    style?: RasterStyle;
    /**
     * Configuration options for the data associated with the layer.
     */
    data?: {
        /**
         * The MapRequest instance to use when loading data for the data source.
         * Either an instance of ApiRequest or MapRequest or configuration options to use when
         * requesting data for the layer (for tile and vector content sources only).
         *
         * @type {MapRequest}
         */
        service?: MapRequest | (() => MapRequest);
        /**
         * The URL string to request data from for the data source. Value may be a function that
         * receives information about the map, such as current coordinate bounds, to format a URL
         * string before returning.
         *
         * @type {string | (params: any) => string}
         */
        url?: string | ((params: any) => string);
    };
    /**
     * The timestamp to use for the source data, either as a `Date` or an Epoch time in milliseconds.
     *
     * This value will be ignored if a value for `offset` is defined.
     *
     * @type {(Date | number)}
     */
    time: Date | number;
    /**
     * Time offset to use for the layer's data. If an offset is defined, then the layer will
     * only display data for that time interval regardless of the global timeline time
     * interval and its animation will be disabled.
     *
     * This property is only used for raster weather layers and can be an interval offset as a
     * number or a time offset as a string supported by Aeris Maps (AMP). Refer to the Aeris Maps
     * documentation at https://www.aerisweather.com/support/docs/aeris-maps/getting-started/time-offsets/
     *
     * @type {number | string}
     */
    offset?: number | string;
    /**
     * A Boolean indicating whether the tile source represents future data.
     *
     * @type {boolean}
     */
    future?: boolean;
    /**
     * Whether this tile source should always be visible regardless of past or future state. Default value is `false`.
     *
     * @type {boolean}
     */
    alwaysShow?: boolean;
    /**
     * Animation options for the tile source.
     */
    animation?: TileAnimationOptions;
}
/**
 * A data type that provides the configuration options for a combined source instance.
 */
export interface VectorSourceOptions extends MapSourceOptions {
    /**
     * Style associated with the source.
     *
     * @type {VectorStyle}
     */
    style?: VectorStyle;
    /**
     * Provides data configuration options for the data source.
     *
     * @type {{
     *         service?: ApiRequest;
     *         url?: string | ((params: any) => string);
     *         items?: any[];
     *         coordinate?: ((data: any) => Coordinate);
     *         geometry?: ((data: any) => any);
     *     }}
     */
    data?: {
        /**
         * The ApiRequest instance to use when loading API data for the data source.
         * Either an instance of ApiRequest or configuration options to use when requesting data for the layer (for vector content sources only).
         *
         * @type {ApiRequest}
         */
        service?: ApiRequest | (() => ApiRequest);
        /**
         * Configuration options to use when requesting data for the layer (for vector content sources only).
         *
         * @type {
         *      endpoint?: string;
         * 		action?: ApiAction;
         * 		parameters?: any;
         * 	}
         */
        request?: {
            /**
             * API endpoint to use for the request.
             *
             * @type {string}
             */
            endpoint?: string;
            /**
             * API action to use for the request. Default value is `ApiAction.WITHIN` for point content
             * sources and `ApiAction.SEARCH` for shape content sources.
             *
             * @type {ApiAction}
             */
            action?: ApiAction;
            /**
             * Defines the request parameters to use when requesting data for the layer.
             */
            parameters?: any;
        };
        /**
         * The URL string to request data from for the data source. Value may be a function that
         * receives information about the map, such as current coordinate bounds, to format a URL
         * string before returning.
         *
         * @type {string | (params: any) => string}
         */
        url?: string | ((params: any) => string);
        /**
         * An array of objects to display on the map. If this value is provided, then data will not
         * be requested from a remote source.
         *
         * @type {any[]}
         */
        items?: any[];
        /**
         * Data property key associations.
         *
         * @type {{
         *         root?: string;
         *         id: string;
         *         category?: string;
         *         timestamp?: string | { from: string; to: string; };
         *         path?: string;
         *     }}
         */
        properties?: {
            /**
             * Property key path to use for an object's identifier.
             *
             * @type {string}
             */
            id: string;
            /**
             * Key path to the root of the node containing the array of data elements (e.g. `features`).
             * If not provided, then the root node is assumed to contain the array of data elements.
             *
             * @type {string}
             */
            root?: string;
            /**
             * Property key path to use for an object's category or grouping, if any.
             *
             * If the model is represented as a polygon or polyline by a valid `path` key path and
             * each path's category is defined on the path object, prefix this category key path
             * with `[path]`. This will use category property relative to the path's object instead
             * of the model's root object.
             *
             * @type {string}
             */
            category?: string;
            /**
             * Property key path to use for the object's date/time. Can be a single value or an object
             * providing a range as `from` and `to` property key paths.
             */
            timestamp?: string | {
                from: string;
                to: string;
            };
            /**
             * Key path of the property that contains the data's value for each object in the
             * response. This can also be a function that receives the model's data and returns
             * the value to use in case additional formatting needs to occur on the value.
             */
            value?: string | ((data: any) => string);
            /**
             * Property key path that contains the point/coordinate data for the layer. This value
             * can also be an array of key paths, in which case the points will be combined when
             * rendering the data source's points on the map.
             *
             * @type {(string | string[])}
             */
            points?: string | string[];
            /**
             * Property key path to use for the object's coordinate path that defines the shape.
             * If the value of this property is an array, then multiple paths will be rendered on
             * the map for the model.
             *
             * @type {string}
             */
            path?: string;
        };
        /**
         * An optional formatter function that can be used to format layer data before being processed
         * for rendering on the map. This function receives the entire dataset loaded for the
         * layer and should return the formatted data to use when rendering map elements.
         *
         * @type {(data: any) => any}
         */
        formatter?: ((data: any) => any);
        /**
         * A function that returns the geographical coordinate based on the model object.
         *
         * @type {(data: any) => Coordinate}
         */
        coordinate?: ((data: any) => Coordinate);
        /**
         * A function that returns the shape's GeoJSON geometry based on the model object.
         *
         * @type {(data: any) => any}
         */
        geometry?: ((data: any) => any);
        /**
         * A Boolean indicating whether the data's coordinate arrays are reversed from the GeoJSON
         * standard (e.g. `[lat, lon]` instead of the default of `[lon, lat]`).
         */
        reversedCoord?: boolean;
    };
    /**
     * Whether the data source requests data for the visible map bounds. If `true`, then data will
     * be reloaded whenever the map's visible region changes. Default value is `false`.
     *
     * @type {boolean}
     */
    requiresBounds?: boolean;
    /**
     * Whether the data source requests should be restricted to the from/to time range associated
     * with the timeline. Set this value to `false` if you want to control the data's time range
     * outside of the data source. Default is `true`.
     *
     * @type {boolean}
     */
    restrictToTimeline?: boolean;
    /**
     * Animation options for the map content source.
     *
     * Note that not all options will be used since this source's animation is managed by a parent
     * timeline animation.
     *
     * @type {AnimationOptions}
     */
    animation?: AnimationOptions;
    /**
     * Data auto-update interval, in seconds. Default value is `0`, which disables auto-updating.
     *
     * @type {number}
     */
    refresh?: number;
}
