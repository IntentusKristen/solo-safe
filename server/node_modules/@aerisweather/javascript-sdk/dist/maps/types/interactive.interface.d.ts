import { Account } from '../..';
import { Coordinate } from '../../types';
import { TimelineOptions } from '.';
import { LayerOptions } from './layer.interface';
import { MarkerStyleProvider } from './style.type';
import { AnyMapStrategy } from './mapstrategy.type';
import { LayerStyle, LayerStyleGroups } from './layer.type';
import { Servers } from '../../types/request.interface';
export interface MapDataSource {
    /**
     * Identifier associated with the data source.
     *
     * @type {string}
     * @memberof MapDataSource
     */
    key: string;
    /**
     * Map strategy the source is associated with.
     *
     * @type {AnyMapStrategy}
     * @memberof MapDataSource
     */
    strategy?: AnyMapStrategy;
    /**
     * Whether the data source is enabled.
     *
     * @type {boolean}
     * @memberof MapDataSource
     */
    enabled: boolean;
    animation(): Animation;
}
/**
 * A data type that represents the configuration options for a `Map` instance.
 */
export interface InteractiveMapOptions {
    /**
     * Aeris account to use when requesting map data and imagery.
     *
     * @type {Account}
     */
    account?: Account;
    /**
     * Base paths for the API servers to use with data and image requests.
     *
     * @type {Servers}
     */
    servers?: Servers;
    /**
     * Map strategy.
     *
     * The following strategy values are supported:
     * - `leaflet`: Uses the Leaflet.js mapping library
     * - `mapbox`: Uses the MapboxGL mapping library
     * - 'openlayers': Uses the OpenLayers mapping library
     * - 'google': Uses the Google Maps mapping library
     *
     * @type {string}
     */
    strategy?: string;
    /**
     * Configuration options to pass to the native map constructor for the specific mapping
     * strategy.
     *
     * @type {any}
     */
    map?: any;
    /**
     * Center coordinate to initialize the map view.
     *
     * @type {Coordinate}
     */
    center?: Coordinate;
    /**
     * Zoom level to initialize the map view.
     *
     * @type {number}
     */
    zoom?: number;
    /**
     * Whether the current map units are set to metric. Default is `false`.
     *
     * @type {boolean}
     */
    metric?: boolean;
    /**
     * Configuration options for the map's animation timeline.
     *
     * @type {AnimationOptions}
     * @see {Timeline}
     */
    timeline?: TimelineOptions & {
        /**
         * Whether the map should display past data layers for both past and future time periods.
         * Default value is `false`.
         */
        alwaysShowPast?: boolean;
        /**
         * Whether the map should display future data layers for both past and future time periods.
         * Default value is `false`.
         */
        alwaysShowFuture?: boolean;
        /**
         * Whether the animation should remain visible while loading animation intervals. When set
         * to `false`, loaded intervals won't appear and animation playback will begin once all required
         * intervals have fully loaded.
         *
         * Default value is `true`.
         *
         * @type {boolean}
         */
        showLoading?: boolean;
        /**
         * A Boolean that indicates whether the timeline animation should stop playback on bounds
         * change via a pan or zoom. Setting this to `true` can reduce the AMP tile usage.
         *
         * Default value is `false`.
         *
         * @type {boolean}
         */
        resetOnBoundsChange?: boolean;
    };
    /**
     * Style overrides per layer code.
     *
     * @type {{ [layer: string]: LayerStyleGroups | LayerStyle }}
     */
    styles?: {
        [layer: string]: LayerStyleGroups | LayerStyle;
    };
    /**
     * Initial layers to add to the map at initialization.
     *
     * @type {(string | string[] | { layer: string; options?: LayerOptions; }[])}
     */
    layers?: string | string[] | {
        layer: string;
        options?: LayerOptions;
    }[];
    /**
     * Data update interval, in seconds. Default value is `0`, which disables auto-updating.
     *
     * @type {number}
     */
    refresh?: number;
    /**
     * A Boolean indicating whether the standard AerisWeather data attribution should be displayed.
     *
     * @type {boolean}
     */
    attribution?: boolean;
    /**
     * Whether map content source data should be reloaded automatically when the map bounds have
     * changed.
     *
     * Default value is `true`. Set this value to `false` to reduce data and map unit usage.
     *
     * @type {boolean}
     */
    reloadOnBoundsChange?: boolean;
}
export interface MarkerOptions {
    data?: any;
    style: MarkerStyleProvider;
}
