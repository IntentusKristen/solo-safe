import { Point } from '../../types';
import { AnchorType } from '../../types/layout.type';
import { CalloutFormatter } from './interactive.type';
import { MarkerStyleProvider, ShapeStyleProvider } from './style.type';
/**
 * A data type that provides style options for text on a map.
 */
export interface TextStyle {
    /**
     * Text value to display.
     *
     * @type {string}
     */
    value: string;
    /**
     * Determines how the text container is aligned relative to its position.
     *
     * @type {'start' | 'middle' | 'end'}
     */
    anchor?: 'start' | 'middle' | 'end';
    /**
     * Font size.
     *
     * @type {number}
     */
    size?: number;
    /**
     * Font style, e.g. `normal` or `bold`.
     *
     * @type {string}
     */
    style?: string;
    /**
     * Text color.
     *
     * @type {string}
     */
    color?: string;
    /**
     * Amount of padding to insert around the text as `[x, y]`, where `x` is the amount of
     * padding on the left and right, and `y` is the amount of padding on the top and
     * bottom.
     *
     * @type {number[]}
     */
    padding?: number[];
    /**
     * Whether to automatically size the marker based on the width and height of the text.
     * Default is `true`.
     *
     * @type {boolean}
     */
    autosize?: boolean;
    /**
     * Position of the element within its parent container. Supports an anchor string for
     * relative positioning, or an { x, y } point for absolute positioning.
     *
     * @type {AnchorType | Point};
     */
    position?: AnchorType | Point;
    /**
     * Position translation amount in x and y coordinates.
     *
     * @type {Point}
     */
    translate?: {
        x?: number;
        y?: number;
    };
    /**
     * Defines a list of transform definitions that are applied to the element.
     *
     * @type {string}
     */
    transform?: string;
}
/**
 * A data type that provides style options for marker objects on a map.
 */
export interface MarkerStyle {
    /**
     * Style class name to add to the marker's DOM element.
     *
     * @type {string}
     */
    className?: string;
    /**
     * HTML content to use when rendering the icon.
     *
     * @type {string}
     */
    html?: string;
    /**
     * Provides the icon options for the style. If a value for `html` is provided, the marker will
     * be rendered as HTML and this value will be ignored.
     *
     * @type {string}
     */
    icon?: {
        /**
         * The URL to the icon image (absolute or relative to the script path).
         *
         * @type {string}
         */
        url: string;
        /**
         * URL to a retina sized version of the icon image. If not provided, the `url` icon path
         * will be used for retina devices.
         *
         * @type {string}
         */
        retinaUrl?: string;
        /**
         * The point coordinates of the tip of the icon (relative to the top-left corner).
         *
         * @type {number[]}
         */
        anchor?: number[];
    };
    /**
     * Provides the options for rendering the icon as an SVG element. If a value for `html` is
     * provided, the marker will be rendered as HTML and this value will be ignored.
     *
     * @type {ShapeStyle}
     */
    svg?: {
        /**
         * The shape options.
         *
         * @type {{
         * 			type: string;
         * 		}}
         */
        shape?: ShapeStyle & {
            /**
             * Type of shape to render. Supports: `circle`, `rect`, and `path`. Default value is `circle`.
             *
             * @type {string}
             */
            type: string;
            /**
             * Position of the element within its parent container. Supports an anchor string for
             * relative positioning, or an { x, y } point for absolute positioning.
             *
             * @type {AnchorType | Point};
             */
            position?: AnchorType | Point;
            /**
             * Position translation amount in x and y coordinates.
             *
             * @type {Point}
             */
            translate?: {
                x?: number;
                y?: number;
            };
        };
        image?: {
            /**
             * Image URL.
             *
             * @type {string}
             */
            url: string;
            /**
             * Image size.
             *
             * @type {number[]}
             */
            size?: number[];
            /**
             * Position of the element within its parent container. Supports an anchor string for
             * relative positioning, or an { x, y } point for absolute positioning.
             *
             * @type {AnchorType | Point};
             */
            position?: AnchorType | Point;
            /**
             * Position translation amount in x and y axis.
             *
             * @type {Point}
             */
            translate?: {
                x?: number;
                y?: number;
            };
            /**
             * Defines a list of transform definitions that are applied to the element.
             *
             * @type {string}
             */
            transform?: string;
        };
        /**
         * The text style options.
         *
         * @type {{
         * 			value: string;
         * 			x: number;
         * 			y: number;
         * 			size: number;
         * 			style?: string;
         * 			color?: string;
         * 			padding?: number[];
         * 		}}
         */
        text?: TextStyle | TextStyle[];
    };
    /**
     * Size of the icon as `[width, height]`, e.g. `[20,15]`
     *
     * @type {number[]}
     */
    size?: number[];
    /**
     * The z-index to apply to the marker when rendering on the map.
     *
     * @type {number}
     */
    zIndex?: number;
    /**
     * Minimum distance, in screen pixels/points, between rendered markers on the map. If not
     * specified or `0`, then all markers will be rendered (default).
     */
    spacing?: number;
    /**
     * Function used to format the marker callout content based on the provided object data.
     */
    callout?: string | CalloutFormatter;
    /**
     * Whether the marker instance should be skipped, which means a marker will not be created for
     * this model nor will it be rendered to the map. This is typically used if you want to
     * conditionally render markers on the map based on model state or values.
     *
     * @type {boolean}
     */
    skip?: boolean;
}
/**
 * A data type that provides style options for vector shape objects on a map, such as polygons
 * and polylines.
 */
export interface ShapeStyle {
    id?: string;
    /**
     * Style class name to add to the shape's DOM element.
     *
     * @type {string}
     */
    className?: string;
    /**
     * The shape's stroke style options.
     *
     * @type {{
     *         color?: string;
     *         opacity?: number;
     *         width?: number;
     *         lineCap?: string;
     *         lineJoin?: string;
     *         dashArray?: string;
     *         dashOffset?: string;
     *     }}
     */
    stroke?: {
        /**
         * Stroke color.
         *
         * @type {string}
         */
        color?: string;
        /**
         * Stroke opacity.
         *
         * @type {number}
         */
        opacity?: number;
        /**
         * Stroke width in pixels.
         *
         * @type {number}
         */
        width?: number;
        /**
         * A string that defines the shape to be used at the end of the stroke.
         *
         * Supports `butt`, `round`, or `square`.
         *
         * @type {string}
         * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-linecap
         */
        lineCap?: string;
        /**
         * A string that defines the shape to be used at the corners of the stroke.
         *
         * Supports `miter`, `round`, `bevel`, `miter-clip`, or `arcs`.
         *
         * @type {string}
         * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-linejoin
         */
        lineJoin?: string;
        /**
         * A string that defines the stroke dash pattern.
         *
         * @type {string}
         * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray
         */
        dashArray?: string;
        /**
         * A string that defines the distance into the dash pattern to start the dash.
         *
         * @type {string}
         * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dashoffset
         */
        dashOffset?: string;
    };
    /**
     * The shape's fill style options.
     *
     * @type {{
     *         color?: string;
     *         opacity?: number;
     *         rule?: string;
     *     }}
     */
    fill?: {
        /**
         * Fill color.
         *
         * @type {string}
         */
        color?: string;
        /**
         * Fill opacity.
         *
         * @type {number}
         */
        opacity?: number;
        /**
         * A string that defines how the inside of a shape is determined.
         *
         * Supports `nonzero` or `evenodd`.
         *
         * @type {string}
         * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/fill-rule
         */
        rule?: string;
    };
    /**
     * The amount to simplify the shape path on each zoom level. More smoothing means better
     * performance and a smoother appearance, and less means more accurate representation.
     *
     * This value is not supported for all mapping strategies.
     *
     * @type {number}
     */
    smoothing?: number;
    /**
     * Defines the shape of the path for SVG elements.
     *
     * @type {string}
     */
    path?: string;
    /**
     * Defines a list of transform definitions that are applied to a vector element and the
     * element's children.
     *
     * @type {string}
     */
    transform?: string;
    /**
     * Size for the shape as `[width, height]` in pixels.
     *
     * @type {number[]}
     */
    size?: number[];
    /**
     * A Boolean value indicating whether the item's opacity should be adjusted alongside the
     * parent data source's opacity value. Default value is `true`.
     *
     * @type {boolean}
     */
    adjustOpacity?: boolean;
}
/**
 * A data type that provides style options for all vector map objects on a map, such as markers,
 * polygons and polylines.
 */
export interface VectorStyle {
    /**
     * Opacity applied to both stroke and fill configurations.
     */
    opacity?: number;
    /**
     * Marker style
     *
     * @type {MarkerStyleProvider}
     */
    marker?: MarkerStyleProvider;
    /**
     * Polygon style
     *
     * @type {ShapeStyleProvider}
     */
    polygon?: ShapeStyleProvider;
    /**
     * Polyline style
     *
     * @type {ShapeStyleProvider}
     */
    polyline?: ShapeStyleProvider;
}
/**
 * A data type that provides style options for raster layers on a map, such as images and tiles.
 */
export interface RasterStyle {
    /**
     * Opacity of the layer on the map view.
     *
     * @type {number}
     */
    opacity?: number;
    /**
     * File extension format to use for image requests when supported. Default value is `png`.
     */
    format?: string;
    /**
     * The z-index to apply to the layer when rendering on the map.
     *
     * @type {number}
     */
    zIndex?: number;
    /**
     * String identifier under which the raster layer will be inserted. This is only available for
     * third-party mapping libraries that support it, which is only Mapbox currently.
     */
    belowLayer?: string;
    /**
     * Amount to blur the image.
     *
     * @type {number}
     */
    blur?: number;
    /**
     * Blend mode to apply to the image.
     *
     * @type {string}
     */
    blendMode?: string;
    filters?: string[];
}
