import Account from './account/Account';
import ApiRequest from './network/api/ApiRequest';
import MapRequest from './network/maps/MapRequest';
import { Servers } from './types/request.interface';
import { ApiConfig } from './types/request.type';
import { MapsGLMapOptions } from './modules/mapsgl';
import InteractiveMapApp from './apps/InteractiveMapApp';
export declare function modulesLoader(callback?: any): Promise<any>;
/**
 * The main entry point for interacting with AerisWeather API services.
 */
declare class AerisWeather {
    private _account;
    private _servers;
    /**
     * Provides access to the library's utility functions.
     *
     * General utility functions are accessible at the root of the `utils` object, but additional
     * functions are available for specific data types, such as colors, strings, etc:
     *
     * - `utils.strings`: String-related utility functions
     * - `utils.colors`: Color-related utility functions
     * - `utils.dates`: Date-related utility functions
     *
     * @readonly
     * @type {({ [key: string]: Function | { [key: string]: Function }})}
     * @memberof AerisWeather
     */
    get utils(): {
        [key: string]: Function | {
            [key: string]: Function;
        };
    };
    /**
     * Initializes an AerisWeather instance configured with the specified client id and secret.
     * @param id
     * @param secret
     * @param server
     */
    constructor(id: string, secret: string, servers?: Servers);
    /**
     * Returns the Account instance used when performing API requests.
     */
    account(): Account;
    /**
     * Returns the API server used when performing API requests.
     */
    servers(): Servers;
    /**
     * Creates and returns a new ApiRequest configured for the current account.
     *
     * @returns {ApiRequest}
     * @memberof AerisWeather
     */
    api(config?: ApiConfig): ApiRequest;
    /**
     * Creates and returns a new MapRequest configured for the current account.
     *
     * @returns {MapRequest}
     * @memberof AerisWeather
     */
    map(config?: ApiConfig): MapRequest;
    /**
     * Provides access to the views module of the library.
     *
     * The `views` module is loaded asynchronously using this method, which means you'll need to
     * wait for it to be loaded before working with any of its features. You can use the `Promise`
     * that's returned, or provide a callback function as a parameter to be notified once the
     * module is available.
     *
     * @param {(views: any) => void} [callback]
     * @returns {Promise<any>}
     * @memberof AerisWeather
     */
    views(callback?: (views: any) => void): Promise<any>;
    /**
     * Provides access to the apps module of the library.
     *
     * The `apps` module is loaded asynchronously using this method, which means you'll need to
     * wait for it to be loaded before working with any of its features. You can use the `Promise`
     * that's returned, or provide a callback function as a parameter to be notified once the
     * module is available.
     *
     * @param {(apps: any) => void} [callback]
     * @returns {Promise<any>}
     * @memberof AerisWeather
     */
    apps(callback?: (apps: any) => void): Promise<any>;
    /**
     * Provides access to the external modules library.
     *
     * The `modules` library is loaded asynchronously using this method, which means you'll need to
     * wait for it to be loaded before working with any of its features. You can use the `Promise`
     * that's returned, or provide a callback function as a parameter to be notified once the
     * library is available.
     *
     * @param {(modules: any) => void} [callback]
     * @returns {Promise<any>}
     * @memberof AerisWeather
     */
    modules(callback?: (modules: any) => void): Promise<any>;
    mapsgl(app: InteractiveMapApp, options?: Partial<MapsGLMapOptions>): Promise<any>;
}
export default AerisWeather;
