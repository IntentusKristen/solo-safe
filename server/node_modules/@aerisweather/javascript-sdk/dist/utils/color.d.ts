import { HSL, HSV, RGB } from '../types/color.type';
/**
 * Several color utility functions here are pulled from https://github.com/bgrins/TinyColor
 */
export declare const isRGB: (value: any) => boolean;
export declare const isHSL: (value: any) => boolean;
export declare const isHSV: (value: any) => boolean;
export declare const isValidHex: (hex: string) => boolean;
/**
 * Converts the specified hex color string to an RGB object.
 *
 * Returns `{ r, g, b }` in the set `[0, 255]`.
 *
 * @param {string} hex
 * @returns {RGB}
 */
export declare const hexToRgb: (hex: string) => RGB;
/**
 * Converts an HSL color value to RGB.
 *
 * Assumes `h` is contained in the set `[0, 360]` or `[0, 1]` and `s` and `l` are contained in the
 * set `[0, 100]` or `[0, 1]`.
 * Returns `{ r, g, b }` in the set `[0, 255]`.
 *
 * @param {HSL} hsl
 * @returns {RGB}
 */
export declare const hslToRgb: (hsl: HSL) => RGB;
/**
 * Converts an HSV color value to RGB.
 *
 * Assumes `h` is contained in the set `[0, 360]` or `[0, 1]` and `s` and `v` are contained in the
 * set `[0, 100]` or `[0, 1]`.
 * Returns `{ r, g, b }` in the set `[0, 255]`.
 *
 * @param {HSV} hsv
 * @returns {RGB}
 */
export declare const hsvToRgb: (hsv: HSV) => RGB;
/**
 * Converts an RGB color to a hex string.
 *
 * Assumes `r`, `g`, and `b` are contained in the set `[0, 255]`.
 *
 * @param {RGB} rgb
 * @returns {string}
 */
export declare const rgbToHex: (rgb: RGB) => string;
/**
 * Converts an RGB color value to HSL.
 *
 * Assumes `r`, `g`, and `b` are contained in the set `[0, 255]` or `[0, 1]`.
 * Returns `{ h, s, l }` in the set `[0, 1]`.
 *
 * @param {RGB} rgb
 * @returns {HSL}
 */
export declare const rgbToHsl: (rgb: RGB) => HSL;
/**
 * Converts an RGB color value to HSV.
 *
 * Assumes `r`, `g`, and `b` are contained in the set `[0, 255]` or `[0, 1]`.
 * Returns `{ h, s, v }` in the set `[0, 1]`.
 *
 * @param {RGB} rgb
 * @returns {HSV}
 */
export declare const rgbToHsv: (rgb: RGB) => HSV;
/**
 * Given a string or object, convert that input to RGB.
 *
 * @param {*} value
 * @returns {RGB}
 */
export declare const toRGB: (value: any) => RGB;
/**
 * Returns the brightness of the specified color value.
 *
 * The value for `color` can either be a color string or an RGB, HSV or HSL object.
 *
 * @param {*} color
 * @returns {number}
 */
export declare const brightness: (color: any) => number;
/**
 * Returns the luminance of the specified color value.
 *
 * The value for `color` can either be a color string or an RGB, HSV or HSL object.
 *
 * @param {string | RGB} color
 * @returns {number}
 */
export declare const luminance: (color: any) => number;
/**
 * Analyze the two colors and return the color contrast defined by WCAG version 2.
 *
 * @param {*} color1
 * @param {*} color2
 * @returns {number}
 */
export declare const readability: (color1: any, color2: any) => number;
/**
 * Returns whether the specified color is light based on its luminance.
 *
 * The value for `color` can either be a color string or an RGB, HSV or HSL object.
 *
 * @param {string | Color} color
 * @returns {boolean}
 */
export declare const isLight: (color: string | RGB) => boolean;
/**
 * Returns a random color as RGB.
 *
 * @returns {RGB}
 */
export declare const randomColor: () => RGB;
/**
 * Returns a new color as RGB by linearly interpolating between two color values.
 *
 * @param {*} start	Starting color value
 * @param {*} end Ending color value
 * @param {number} ratio Value to use to interpolate between in the set `[0, 1]`
 * @returns {RGB}
 */
export declare const mix: (start: any, end: any, ratio: number) => RGB;
/**
 * Generates an array of linearly interpolated color values defined by starting and ending color
 * values and the total number of color stops, or steps, in the scale.
 *
 * @param {(RGB | string)} start
 * @param {(RGB | string)} end
 * @param {number} steps
 * @returns {RGB[]}
 */
export declare const colorScale: (start: RGB | string, end: RGB | string, steps: number) => RGB[];
/**
 * A convenience class for working with and manipulating colors.
 *
 * @export
 * @class Color
 */
export declare class Color {
    private _rgb;
    /**
     * Returns the color's red value in the set `[0, 255]`.
     *
     * @type {number}
     * @memberof Color
     */
    get red(): number;
    /**
     * Sets the color's red value, which must be in the set `[0, 255]`.
     *
     * @memberof Color
     */
    set red(value: number);
    /**
     * Returns the color's green value in the set `[0, 255]`.
     *
     * @type {number}
     * @memberof Color
     */
    get green(): number;
    /**
     * Sets the color's green value, which must be in the set `[0, 255]`.
     *
     * @memberof Color
     */
    set green(value: number);
    /**
     * Returns the color's blue value in the set `[0, 255]`.
     *
     * @type {number}
     * @memberof Color
     */
    get blue(): number;
    /**
     * Sets the color's blue value, which must be in the set `[0, 255]`.
     *
     * @memberof Color
     */
    set blue(value: number);
    /**
     * Returns the color's alpha value in the set `[0, 1]`.
     *
     * @type {number}
     * @memberof Color
     */
    get alpha(): number;
    /**
     * Sets the color's alpha value, which must be in the set `[0, 1]`.
     *
     * @memberof Color
     */
    set alpha(value: number);
    constructor(value: any);
    /**
     * Returns whether the color is light based on its luminance.
     *
     * @returns {boolean}
     * @memberof Color
     */
    isLight(): boolean;
    /**
     * Returns whether the color is dark based on its luminance.
     *
     * @returns {boolean}
     * @memberof Color
     */
    isDark(): boolean;
    /**
     * Returns the brightness of the color.
     *
     * @returns {number}
     * @memberof Color
     */
    brightness(): number;
    /**
     * Returns the luminance of the color.
     *
     * @returns {number}
     * @memberof Color
     */
    luminance(): number;
    /**
     * Increases the lightness of the color by a specified percentage.
     *
     * @param {number} amount
     * @memberof Color
     */
    lighten(percent?: number): RGB;
    /**
     * Brightens the color by a specified percentage.
     *
     * @param {number} percent
     * @memberof Color
     */
    brighten(percent?: number): void;
    /**
     * Darkens the color by a specified percentage.
     *
     * @param {number} percent
     * @memberof Color
     */
    darken(percent?: number): RGB;
    /**
     * Returns the hex value for the color.
     *
     * @returns {string}
     * @memberof Color
     */
    toHex(): string;
    /**
     * Returns the HSL (hue, saturation, lightness) for the color.
     *
     * @returns {HSL}
     * @memberof Color
     */
    toHsl(): HSL;
    /**
     * Returns the HSV (hue, saturation, value) for the color.
     *
     * @returns {HSV}
     * @memberof Color
     */
    toHsv(): HSV;
    /**
     * Returns a string representation of the color in the specified format.
     *
     * @param {string} [format]
     * @returns {string}
     * @memberof Color
     */
    toString(format?: string): string;
}
