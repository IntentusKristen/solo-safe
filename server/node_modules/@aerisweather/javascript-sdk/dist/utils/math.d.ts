import { Coordinate } from '../types';
/**
 * Linearly interpolate between two values.
 *
 * @param {number} a Start value of the range
 * @param {number} b End value of the range
 * @param {number} fraction Weight value used to interpolate between `a` and `b`.
 * @returns {number}
 */
export declare const lerp: (a: number, b: number, fraction: number) => number;
/**
 * Constrain a value to lie between two values.
 *
 * @param {number} value
 * @param {number} min
 * @param {number} max
 * @returns {number}
 */
export declare const clamp: (value: number, min: number, max: number) => number;
/**
 * Wraps a value so that it's within the specified range.
 *
 * @param {number} value
 * @param {number} min
 * @param {number} max
 * @returns {number}
 */
export declare const wrap: (value: number, min: number, max: number) => number;
/**
 * Takes a value from `[min, max]` and returns it as `[0, 1]`.
 *
 * @param {(number | string)} value
 * @param {number} min
 * @param {number} max
 * @returns {number}
 */
export declare const fraction: (value: number | string, min: number, max: number) => number;
export declare const random: (min: number, max: number) => number;
export declare const degToRad: (degrees: number) => number;
export declare const radToDeg: (radians: number) => number;
export declare const geoDistance: (coord1: Coordinate, coord2: Coordinate) => number;
