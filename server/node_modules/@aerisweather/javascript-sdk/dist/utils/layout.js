"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.insetBounds = exports.intersects = exports.boundsAdjustedForAnchor = exports.isCenterPinned = exports.isRightPinned = exports.isLeftPinned = exports.isMiddlePinned = exports.isBottomPinned = exports.isTopPinned = exports.viewportSizeClass = exports.getPinnedPosition = void 0;

var _ = require(".");

const getPinnedPosition = (position, size, container, translate) => {
  let x = 0;
  let y = 0;
  translate = (0, _.extend)({
    x: 0,
    y: 0
  }, translate);

  if ((0, _.isString)(position)) {
    const anchor = position;
    x = (container.width - size.width) / 2;
    y = (container.height - size.height) / 2;

    if (/^top/.test(anchor)) {
      y = 0;
    } else if (/^bottom/.test(anchor)) {
      y = container.height - size.height;
    }

    if (/left$/.test(anchor)) {
      x = 0;
    } else if (/right$/.test(anchor)) {
      x = container.width - size.width;
    }
  } else {
    const p = position;
    x = p.x;
    y = p.y;
  }

  x += translate.x;
  y += translate.y;
  return {
    x,
    y
  };
};

exports.getPinnedPosition = getPinnedPosition;

const viewportSizeClass = () => {
  if (!window) return {
    width: null,
    height: null
  };
  let width = 'normal';
  let height = 'normal';

  if (window.matchMedia("(max-width: 500px)").matches) {
    width = 'compact';
  } else if (window.matchMedia("(min-width: 1000px)").matches) {
    width = 'desktop';
  }

  if (window.matchMedia("(max-height: 500px)").matches) {
    height = 'compact';
  } else if (window.matchMedia("(min-height: 1000px)").matches) {
    height = 'desktop';
  }

  return {
    width,
    height
  };
};

exports.viewportSizeClass = viewportSizeClass;

const isTopPinned = anchor => ['topleft', 'top', 'topright'].indexOf(anchor) !== -1;

exports.isTopPinned = isTopPinned;

const isBottomPinned = anchor => ['bottomleft', 'bottom', 'bottomright'].indexOf(anchor) !== -1;

exports.isBottomPinned = isBottomPinned;

const isMiddlePinned = anchor => ['left', 'center', 'right'].indexOf(anchor) !== -1;

exports.isMiddlePinned = isMiddlePinned;

const isLeftPinned = anchor => ['topleft', 'left', 'bottomleft'].indexOf(anchor) !== -1;

exports.isLeftPinned = isLeftPinned;

const isRightPinned = anchor => ['topright', 'right', 'bottomright'].indexOf(anchor) !== -1;

exports.isRightPinned = isRightPinned;

const isCenterPinned = anchor => ['top', 'center', 'bottom'].indexOf(anchor) !== -1;

exports.isCenterPinned = isCenterPinned;

const boundsAdjustedForAnchor = (bounds, size, anchor) => {
  const adjusted = Object.assign({}, bounds);

  if (isLeftPinned(anchor)) {
    bounds.right = bounds.left + size.width;
  } else if (isRightPinned(anchor)) {
    bounds.left = bounds.right - size.width;
  }

  return adjusted;
};

exports.boundsAdjustedForAnchor = boundsAdjustedForAnchor;

const intersects = (bounds1, bounds2, any = false) => {
  // const top = bounds2.top <= bounds1.top && bounds2.top >= bounds1.bottom;
  // const bottom = bounds2.bottom >= bounds1.bottom && bounds2.bottom <= bounds1.top;
  // const left = bounds2.left >= bounds1.left && bounds2.left <= bounds1.right;
  // const right = bounds2.right <= bounds1.right && bounds2.right >= bounds1.left;
  const right = bounds1.left >= bounds2.left && bounds1.left <= bounds2.right;
  const left = bounds1.right >= bounds2.left && bounds1.right <= bounds2.right;
  const top = bounds1.top >= bounds2.top && bounds1.top <= bounds2.bottom;
  const bottom = bounds1.bottom >= bounds2.top && bounds1.bottom <= bounds2.bottom;

  if (any) {
    return top || bottom || left || right;
  } // console.log(bounds1.left, bounds1.right, bounds1.top, bounds1.bottom);
  // console.log(bounds2.left, bounds2.right, bounds2.top, bounds2.bottom);
  // console.log(left, right, top, bottom);


  return (top || bottom) && (left || right);
};

exports.intersects = intersects;

const insetBounds = (bounds, inset = 0) => ({
  top: bounds.top + inset,
  bottom: bounds.bottom - inset,
  left: bounds.left + inset,
  right: bounds.right - inset,
  width: bounds.width - inset * 2,
  height: bounds.height - inset * 2
});

exports.insetBounds = insetBounds;