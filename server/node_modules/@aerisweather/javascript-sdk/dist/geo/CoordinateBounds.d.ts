import { Coordinate, GeoBounds } from '../types';
export declare const normalize: (coord: Coordinate) => Coordinate;
/**
 * A `CoordinateBounds` object represents a rectangular region defined by northwest and southeast
 * coordinates.
 */
declare class CoordinateBounds {
    /** The northern latitude */
    north: number;
    /** The southern latitude */
    south: number;
    /** The western longitude */
    west: number;
    /** The eastern longitude */
    east: number;
    /**
     * Initializes a bounds instance defined by the specified northwest and southeast coordinates.
     * @param nw
     * @param se
     */
    constructor(nw: Coordinate, se: Coordinate);
    static fromBounds(bounds: GeoBounds): CoordinateBounds;
    static fromPoints(points: Coordinate[]): CoordinateBounds;
    /**
     * Returns the northwestern coordinate for the bounds.
     */
    northwest(): Coordinate;
    /**
     * Returns the southwestern coordinate for the bounds.
     */
    southwest(): Coordinate;
    /**
     * Returns the northeastern coordinate for the bounds.
     */
    northeast(): Coordinate;
    /**
     * Returns the southeastern coordinate for the bounds.
     */
    southeast(): Coordinate;
    /**
     * Returns the center coordinate for the bounds.
     */
    center(): Coordinate;
    /**
     * Expands the bounds to include the specified coordinate. If the bounds already contains the
     * coodinate, then the bounds will not change.
     *
     * @param coord
     */
    extend(coord: Coordinate): void;
    /**
     * Returns whether the bounds intersects the specified bounds but does not contain it.
     * @param bounds
     */
    intersects(bounds: CoordinateBounds): boolean;
    /**
     * Returns whether the bounds contains the specified coordinate or bounds.
     * @param value
     */
    contains(value: Coordinate | CoordinateBounds): boolean;
    /**
     * Returns a string representation of the coordinate bounds.
     */
    toString(): string;
}
export default CoordinateBounds;
