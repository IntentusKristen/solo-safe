"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _EventDispatcher = _interopRequireDefault(require("../event/EventDispatcher"));

var _ApiRequest = _interopRequireDefault(require("../network/api/ApiRequest"));

var _utils = require("../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * A `Permissions` object is responsible for requesting and storing access permissions information
 * associated with an Aeris API account.
 */
class Permissions extends _EventDispatcher.default {
  /**
   * Initializes a permissions object for an account associated with the specified client id
   * and secret.
   *
   * @param id
   * @param secret
   */
  constructor(id, secret) {
    super();
    this.loading = false;
    this.id = id;
    this.secret = secret;
    this.get();
  }
  /**
   * Returns a Promise containing the permissions data, fetching the data from the API initially
   * if required.
   */


  get() {
    return new Promise((resolve, reject) => {
      // always return a copy of our data object in case callers change the data contained within
      if (this.hasLoaded()) {
        resolve((0, _utils.cloneDeep)(this.permissions));
      } else if (this.loading) {
        this.on('load:done', () => {
          resolve((0, _utils.cloneDeep)(this.permissions));
        });
      } else {
        this.loading = true;
        this.trigger('load:start');
        const request = new _ApiRequest.default({
          client: {
            id: this.id,
            secret: this.secret
          }
        });
        request.endpoint('oauth2/permissions').get().then(result => {
          this.loading = false;

          if (result.data) {
            this.permissions = result.data;
            this.cached = new Date();
          }

          resolve((0, _utils.cloneDeep)(this.permissions));
          this.trigger('load:done');
        });
      }
    });
  }
  /**
   * A Boolean value indicating if permissions data is currently being requested from the API.
   */


  isLoading() {
    return this.loading;
  }
  /**
   * A Boolean value indicating if permissions have been loaded.
   */


  hasLoaded() {
    return this.permissions != null;
  }
  /**
   * Returns whether the account has access to the specified endpoint or destination.
   * @param endpoint
   */


  canAccess(endpoint) {
    const result = (0, _utils.get)(this.permissions, endpoint);

    if (result) {
      return result.allow;
    }

    return false;
  }

}

var _default = Permissions;
exports.default = _default;
module.exports = exports.default;