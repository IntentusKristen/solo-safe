import ButtonSegment from '../ui/buttons/ButtonSegment';
import SegmentedButton from '../ui/buttons/SegmentedButton';
import { ButtonOptions } from './button.interface';
/**
 * A data type that represents the configuration options for a button segment.
 */
export interface ButtonSegmentType {
    /**
     * Identifier for the segment. If not provided, the `value` will be used as the segment's identifier.
     *
     * @type {string}
     */
    id?: string;
    /**
     * Button segment title.
     *
     * @type {string}
     */
    title: string;
    /**
     * Value associated with the button segment.
     *
     * @type {*}
     */
    value: any;
    /**
     * Custom data associated with the button segment.
     *
     * @type {{ [key: string]: any }}
     */
    options?: {
        [key: string]: any;
    };
    /**
     * A Boolean indicating whether multiple options can be selected at once.
     *
     * @type {boolean}
     */
    multiselect?: boolean;
}
export interface ButtonSegmentGroupType {
    id: string;
    title?: string;
    segments: ButtonSegmentType[];
    options?: {
        [key: string]: any;
    };
}
export interface Segment {
    id: string;
    groupId: string;
    title: string;
    value: string;
    selected: boolean;
    multiselect: boolean;
    options?: {
        [key: string]: any;
    };
}
export interface ButtonSegmentOptions extends ButtonOptions {
    parent?: string;
    group?: string;
    multiselect?: boolean;
}
/**
 * A data type that represents the configuration options for a segmented button component.
 */
export interface SegmentedButtonOptions extends ButtonOptions {
    /**
     * An array of button segment or segment group configurations to render for the button's segments.
     *
     * @type {ButtonSegmentType[]}
     */
    segments: ButtonSegmentType[] | {
        groups: ButtonSegmentGroupType[];
    };
    /**
     * A Boolean indicating whether the segments should function as filters to the primary button.
     * This value affects which events are triggered when a segment is selected as filters should
     * be handled differently than changing values.
     *
     * @type {boolean}
     */
    filter?: boolean;
    /**
     * A Boolean indicating whether multiple segments can be selected, only when `filter` is
     * `true`. Default value is `false`.
     *
     * @type {boolean}
     */
    multiselect?: boolean;
    /**
     * A Boolean indicating whether one or more values from multiple segment groups can be
     * selected, only when `filter` is `true`. Default value is `true`.
     *
     * @type {boolean}
     */
    groupMultiselect?: boolean;
    reloadOnChange?: boolean;
    /**
     * A custom handler function that is called when a segment button's selected value changes.
     */
    onChange?: (button: SegmentedButton) => void;
    /**
     * A custom handler function that is called when a segment is selected.
     */
    onSelectSegment?: (segment: ButtonSegment) => void;
    /**
     * A custom handler function that is called when a segment is deselected.
     */
    onDeselectSegment?: (segment: ButtonSegment) => void;
}
