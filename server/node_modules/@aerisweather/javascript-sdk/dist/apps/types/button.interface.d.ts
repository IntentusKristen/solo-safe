import { ComponentOptions, ComponentState } from './index';
import { AnyButton, ButtonType } from './button.type';
export interface ButtonInfo {
    id: string;
    key: string;
    value: string;
    group: string;
    parent: string;
    options: Record<string, any>;
    valueSegments?: Array<ButtonInfo>;
    filter?: boolean;
    reload?: boolean;
}
/**
 * A data type that represents the configuration options for a button component.
 */
export interface ButtonOptions extends ComponentOptions {
    /**
     * Identifier for the button. If not provided, the `value` will be used as the button's identifier.
     *
     * @type {string}
     */
    id?: string;
    parent?: string;
    group?: string;
    type?: ButtonType;
    /**
     * Button label.
     *
     * @type {string}
     */
    title: string;
    /**
     * Button value.
     *
     * @type {*}
     */
    value?: any;
    /**
     * A Boolean indicating whether the button should be selected.
     *
     * @type {boolean}
     */
    selected?: boolean;
    toggleable?: boolean;
    /**
     * Optional configuration for additional controls rendered with the button, such as a close
     * indicator on hover, settings popover, etc.
     *
     * @type {{ [key: string]: any }}
     */
    controls?: {
        [key: string]: any;
    };
    /**
     * A Boolean indicating whether a close icon should appear on hover when selected.
     *
     * @type {boolean}
     */
    closeIcon?: boolean;
    /**
     * Optional data associated with the button.
     *
     * @type {{ [key: string]: any }}
     */
    options?: {
        [key: string]: any;
    };
    loader?: boolean;
    /**
     * A custom handler function that is called when the button is selected.
     */
    onSelect?: (button: AnyButton) => void;
    /**
     * A custom handler function that is called when the button is deselected.
     */
    onDeselect?: (button: AnyButton) => void;
}
export interface ButtonState extends ComponentState {
    selected: boolean;
}
export { SegmentedButtonOptions, ButtonSegmentType, ButtonSegmentGroupType, ButtonSegmentOptions } from './segmented-button.interface';
export { ButtonGroupOptions, ButtonSegmentGroupOptions } from './button-group.interface';
