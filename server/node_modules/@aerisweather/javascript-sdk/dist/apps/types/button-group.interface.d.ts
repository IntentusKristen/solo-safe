import ButtonSegment from '../ui/buttons/ButtonSegment';
import ButtonSegmentGroup from '../ui/buttons/ButtonSegmentGroup';
import { ButtonOptions } from './button.interface';
import { ButtonType } from './button.type';
import { ComponentOptions } from './index';
import { ButtonSegmentType, SegmentedButtonOptions } from './segmented-button.interface';
/**
 * A data type that represents the configuration options for a button group.
 */
export interface ButtonGroupOptions extends ComponentOptions {
    /**
     * Identifier for the button group.
     *
     * @type {string}
     */
    id?: string;
    /**
     * Button label.
     *
     * @type {string}
     */
    title: string;
    /**
     * An array of button configurations to displayed in the group.
     *
     * @type {((SegmentedButtonOptions | ButtonOptions)[])}
     */
    buttons: (SegmentedButtonOptions | ButtonOptions)[];
    /**
     * A Boolean indicating whether multiple buttons in the group can be selected at once. Default
     * value is `true`.
     *
     * @type {boolean}
     */
    multiselect?: boolean;
    /**
     * Optional data associated with the button group.
     *
     * @type {{ [key: string]: any }}
     */
    options?: {
        [key: string]: any;
    };
    controls?: {
        [key: string]: any;
    };
    defaultType?: ButtonType;
    /**
     * Triggered when the selected value(s) within the group changes when `multiselect` is `false`.
     * Observers can also subscribe to value changes by observing the `change` event.
     *
     * @type {(value: string) => void}
     */
    onChange?: (value: string) => void;
}
export interface ButtonSegmentGroupOptions extends ComponentOptions {
    id: string;
    parentId?: string;
    title?: string;
    filter?: boolean;
    multiselect?: boolean;
    requiresSelection?: boolean;
    reloadOnChange?: boolean;
    segments: ButtonSegmentType[];
    onChange?: (group: ButtonSegmentGroup) => void;
    onSelectSegment?: (segment: ButtonSegment) => void;
    onDeselectSegment?: (segment: ButtonSegment) => void;
}
