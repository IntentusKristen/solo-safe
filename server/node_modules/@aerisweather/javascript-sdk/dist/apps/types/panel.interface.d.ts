import Account from '../../account/Account';
import { Size } from '../../types';
import ApiRequest from '../../network/api/ApiRequest';
import { Units } from '../../utils/units';
import InfoPanelContentView from '../views/InfoPanelContentView';
import { ComponentOptions, ComponentState, ViewOptions } from './index';
import { LegendOptions } from '../../maps/types';
import { RangeSliderOptions, SearchFieldOptions } from './control.interface';
import { AnyInfoPanelView, InfoPanelViewDataFormatter, InfoPanelViewRenderer } from './panel.type';
import { AnyButtonOptions } from './button.type';
/**
 * A data type that represents the configuration options for a panel component.
 */
export interface PanelOptions extends ComponentOptions {
    /**
     * Panel title, which is displayed when a toggleable panel is expanded.
     *
     * @type {string}
     */
    title?: string;
    /**
     * A Boolean indicating whether the panel is enabled. If `false`, then the panel will not be
     * rendered. Default value is `true`.
     *
     * @type {boolean}
     */
    enabled?: boolean;
    /**
     * A Boolean indicating whether the panel is toggleable. Default value is `false`.
     *
     * @type {boolean}
     */
    toggleable?: boolean;
    /**
     * Icon HTML to display in the button when the panel is collapsed. This value can be any valid
     * HTML, including an `<img>` or `<svg>` element.
     *
     * @type {string}
     */
    icon?: string;
}
/**
 * A data type that represents a panel's state.
 */
export interface PanelState extends ComponentState {
    /**
     * A Boolean indicating whether the panel is currently visible.
     *
     * @type {boolean}
     */
    visible: boolean;
    maxContentSize: Size;
}
/**
 * A data type that represents the configuration options for a button panel.
 */
export interface ButtonPanelViewOptions extends PanelOptions {
    /**
     * An array of button configurations to be used when rendering the buttons.
     *
     * @type {Array<AnyButtonOptions>}
     */
    buttons: Array<AnyButtonOptions>;
}
/**
 * A data type that represents the configuration options for an info panel content view.
 */
export interface InfoPanelContentViewOptions extends ViewOptions {
    /**
     * An array of view configurations or section view keys to render as part of this content
     * view. The order in which they appear in the array is the order in which they will be
     * rendered in the info panel.
     *
     * @type {InfoPanelViewOptions[]}
     */
    views: InfoPanelViewOptions[];
    /**
     *
     *
     * @type {*}
     */
    data?: any;
    /**
     * Request to use when loading data for the content view. This request should load all data
     * that is required by each section view. For API requests, this will often be a batch request.
     *
     * This value can either be a request instance or a function that returns a request instance.
     *
     * @type {ApiRequest | () => ApiRequest}
     */
    request?: ApiRequest | (() => ApiRequest);
    units?: Units;
}
/**
 * A data type that represents the configuration options for an info panel view.
 */
export interface InfoPanelSectionView {
    id?: string;
    config?: Record<string, any>;
    request?: (account: Account, data: any, config?: any) => ApiRequest;
    data?: InfoPanelViewDataFormatter;
    renderer: InfoPanelViewRenderer;
    init?: (view: AnyInfoPanelView, contentView: InfoPanelContentView) => void;
    requiresData?: boolean;
    static?: boolean;
}
/**
 * A data type that represents the configuration options for an info panel view.
 */
export interface InfoPanelViewOptions extends ViewOptions {
    /**
     * View title. If defined, the title will be rendered at the top of the view container.
     *
     * @type {string}
     */
    title?: string;
    /**
     * Configuration options for the view.
     *
     * @type {*}
     */
    config?: any;
    /**
     * Returns the API request used to fetch data required for this view.
     */
    request?: (account: Account, data: any) => ApiRequest;
    /**
     * Data to use when rendering the view.
     *
     * @type {*}
     */
    data?: any;
    /**
     * View renderer, which can either be an HTML string or a function that receives the view's
     * data as a parameter and returns the final HTML for the view.
     *
     * @type {((InfoPanelViewRenderer | string))}
     */
    renderer?: (InfoPanelViewRenderer | string);
    /**
     * An optional function that is called when the view has been added and rendered to the DOM.
     * This can be used to perform additional DOM manipulation and/or setup custom events.
     */
    init?: (view: AnyInfoPanelView, contentView: InfoPanelContentView) => void;
    /**
     * A Boolean value that indicates whether the view requires valid data to be provided in order
     * for it to be rendered. When this value is `true` and there is no data provided, then the
     * view will be rendered as empty.
     *
     * Default value is `false`.
     *
     * @type {boolean}
     */
    requiresData?: boolean;
    /**
     * A Boolean value indicating whether the view renders static data, meaning the data should
     * only be rendered once initially regardless of changes to data or state.
     *
     * Default value is `false`.
     *
     * @type {boolean}
     */
    static?: boolean;
}
/**
 * A data type that represents the configuration options for an info panel.
 */
export interface InfoPanelOptions extends PanelOptions {
    /**
     * The AerisWeather account instance used for configuring API data requests.
     *
     * @type {Account}
     */
    account: Account;
    /**
     * View section configurations keyed by section view identifier.
     *
     * View sections represent data for a single data type and are used within content views
     * when rendering within an info panel.
     *
     * @type {{ [key: string]: InfoPanelSectionView }}
     */
    sections: {
        [key: string]: InfoPanelSectionView;
    };
    /**
     * Content view configurations keyed by view identifier.
     *
     * Content views contain one or more section views and are used when displaying content within an
     * info panel instance.
     *
     * @type {{ [key: string]: InfoPanelContentViewOptions }}
     */
    views: {
        [key: string]: InfoPanelContentViewOptions;
    };
    /**
     * A Boolean value indicating whether the data displayed in the info panel should use metric
     * units where applicable.
     *
     * Default value is `false`.
     *
     * @type {boolean}
     */
    metric?: boolean;
}
/**
 * A data type that represents the configuration options for a legend panel.
 */
export interface LegendPanelOptions extends PanelOptions {
    /**
     * Configuration options for the legend view.
     *
     * @type {LegendOptions}
     */
    legend: LegendOptions;
}
/**
 * A data type that represents the configuration options for a place search panel.
 */
export interface PlaceSearchPanelOptions extends PanelOptions {
    /**
     * Aeris account to use when performing place search requests.
     *
     * @type {Account}
     */
    account: Account;
    /**
     * Configuration options for the search field component.
     *
     * @type {SearchFieldOptions}
     */
    field?: SearchFieldOptions;
}
/**
 * A data type that represents the configuration options for a timeline panel.
 */
export interface TimelinePanelOptions extends PanelOptions {
    /**
     * Configuration options for the range slider component.
     *
     * @type {RangeSliderOptions}
     */
    range: RangeSliderOptions;
    /**
     * String formats for the time and day displayed in the panel.
     * Values must be a string format supported by the date-fns library: https://date-fns.org/docs/format
     *
     * @type {{
     * 		time?: string;
     * 		day?: string;
     * 	}}
     */
    formatters?: {
        time?: string;
        day?: string;
    };
}
