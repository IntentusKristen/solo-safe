/**
 * A data type that represents the configuration options for a view.
 */
export interface ViewOptions {
    /**
     * Unique identifier.
     *
     * @type {string}
     */
    id?: string;
    /**
     * CSS class name to add to the view's element.
     *
     * @type {string}
     */
    className?: string;
    /**
     * An object that defines the CSS selectors for various UI elements in the view and their
     * reference keys. When a view has been rendered and added to the DOM, you can reference and
     * access these UI targets using `this.ui.#key#`, where `#key#` is the key used with this
     * object.
     *
     * @type {{ [key: string]: string }}
     */
    ui?: {
        [key: string]: string;
    };
    /**
     * Renderer for the view, which can either be an HTML string or a function that receives the
     * view's data, if any, and returns the final HTML string to render as the view's content.
     *
     * @type {(Function | string)}
     */
    renderer?: Function | string;
    /**
     * A Boolean value that indicates whether the view requires valid data to be provided in order
     * for it to be rendered. When this value is `true` and there is no data provided, then the
     * view will be rendered as empty.
     *
     * Default value is `false`.
     *
     * @type {boolean}
     */
    requiresData?: boolean;
}
/**
 * A data type that represents the configuration options for a component.
 */
export interface ComponentOptions extends ViewOptions {
}
export interface ComponentState {
}
