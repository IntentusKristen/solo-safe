import EventDispatcher from '../event/EventDispatcher';
import Account from '../account/Account';
import InteractiveMap from '../maps/interactive/InteractiveMap';
import ButtonPanel from './views/ButtonPanel';
import InfoPanel from './views/InfoPanel';
import TimelinePanel from './views/TimelinePanel';
import LegendPanel from './views/LegendPanel';
import PlaceSearchPanel from './views/PlaceSearchPanel';
import ModuleManager from './ModuleManager';
import { Coordinate } from '../types';
import { AnyPanel } from './types/panel.type';
import { MarkerStyle } from '../maps/types';
import { InteractiveMapAppOptions } from './types/mapapp.interface';
import { MapsGLAdapter } from '../modules/mapsgl';
/**
 * An `InteractiveMapApp` object provides an full-featured weather map application that manages an
 * interactive map and enables runtime interaction of map content using a series of panel
 * view components.
 *
 * @export
 * @class InteractiveMapApp
 * @extends {EventDispatcher}
 */
declare class InteractiveMapApp extends EventDispatcher {
    id: string;
    mapsgl: MapsGLAdapter;
    private _account;
    private _opts;
    private _target;
    private _map;
    private _panels;
    private _sourceManager;
    private _modules;
    private _infoPanelMarker;
    private _ready;
    private _modulesToAddOnLoad;
    /**
     * The Aeris account to use when requesting data for the map.
     *
     * @readonly
     * @type {Account}
     * @memberof InteractiveMapApp
     */
    get account(): Account;
    /**
     * Primary DOM element associated with the view.
     *
     * @readonly
     * @type {*}
     * @memberof MapView
     */
    get $el(): any;
    get options(): InteractiveMapAppOptions;
    /**
     * Returns the underlying interactive map instance.
     *
     * @readonly
     * @type {InteractiveMap}
     * @memberof InteractiveMapApp
     */
    get map(): InteractiveMap;
    /**
     * Returns the panel component instances for the application keyed by their type.
     *
     * @readonly
     * @type {{ layers: ButtonPanel, info: InfoPanel }}
     * @memberof InteractiveMapApp
     */
    get panels(): {
        layers: ButtonPanel;
        timeline: TimelinePanel;
        info: InfoPanel;
        legends: LegendPanel;
        search: PlaceSearchPanel;
    };
    /**
     * Returns the set of custom data sources for the application.
     *
     * @readonly
     * @type {{ [key: string]: any }}
     * @memberof InteractiveMapApp
     */
    get sources(): {
        [key: string]: any;
    };
    get modules(): ModuleManager;
    /**
     * Initializes an interactive map application with the specified DOM target and configuration
     * object.
     *
     * @param {HTMLElement} target
     * @param {InteractiveMapAppOptions} [opts]
     * @memberof InteractiveMapApp
     */
    constructor(target: HTMLElement, opts?: InteractiveMapAppOptions);
    /**
     * Adds a map content source to the application cache that can be toggled on and off using the
     * unique key identifier. Note that this method does not render the source to the interactive
     * map.
     *
     * @param {string} key Identifier for the source
     * @param {string} type Type of map content source to use, `tile`, `vector`, `geojson` or `text`
     * @param {*} config Configuration options for the source
     * @returns {*}
     * @memberof InteractiveMapApp
     */
    addSource(key: string, type: string, config: any): any;
    getSource(id: string): any;
    /**
     * Shows the application info panel component using the specified view key, title and data.
     *
     * @param {string} view Identifier associated with the view to render
     * @param {string} [title] Title to display in the info panel (optional)
     * @param {*} [data] Data to use when rendering the view in the panel (optional)
     * @returns {InfoPanel}
     * @memberof InteractiveMapApp
     */
    showInfo(view: string, title?: string, data?: any): InfoPanel;
    /**
     * Shows the application info panel component for the specified geographical coordinate. Data
     * will be requested for the coordinate using the view's request instance
     *
     * @param {Coordinate} coord Coordinate to request data for
     * @param {string} view Identifier associated with the view to render
     * @param {string} [title] Title to display in the info panel (optional)
     * @param {MarkerStyle} [marker] Marker style to use when placing the marker on the map at the
     * coordinate (optional)
     * @returns {InfoPanel}
     * @memberof InteractiveMapApp
     */
    showInfoAtCoord(coord: Coordinate, view: string, title?: string, marker?: MarkerStyle): InfoPanel;
    /**
     * Dismisses the application info panel if currently visible.
     *
     * @memberof InteractiveMapApp
     */
    closeInfoPanel(): void;
    /**
     * Returns the panel view associated with the specified key, if any.
     *
     * @param {string} key
     * @returns {*}
     * @memberof InteractiveMapApp
     * @see panels
     */
    getPanel(key: string): AnyPanel;
    /**
     * Updates the configuration for the panel view associated with the specified key, if any.
     *
     * The new options provided will be applied to the existing options for the panel, meaning new values will
     * override the existing option values while other existing values will remain.
     *
     * @param {string} key
     * @param {*} config
     * @memberof InteractiveMapApp
     */
    updatePanel(key: string, config: any): void;
    /**
     * Sets the units to display on the underlying interactive map.
     *
     * @param {boolean} isMetric
     * @memberof InteractiveMapApp
     */
    setMetric(isMetric: boolean): void;
    setMode(mode: 'light' | 'dark'): void;
    /**
     * Returns whether the application has finished initializing.
     *
     * @returns {boolean}
     * @memberof InteractiveMapApp
     */
    isReady(): boolean;
    initialLayers(): string[];
    private _setupLayersPanel;
    private _setupInfoPanel;
    private _setupTimeline;
    private _setupSearchPanel;
    private _setupLegendsPanel;
    private _layoutCache;
    private _layout;
}
export default InteractiveMapApp;
