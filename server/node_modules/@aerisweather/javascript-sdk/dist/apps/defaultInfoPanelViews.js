"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _units = require("../utils/units");

var _utils = require("../maps/utils");

var _Switch = _interopRequireDefault(require("./ui/Switch"));

var _utils2 = require("../utils");

var _strings = require("../utils/strings");

var _Indices = require("./data/Indices");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const cachedInfoPanelViews = {
  units: {
    id: 'units',
    static: true,
    renderer: data => `
			<div class="awxjs__app__ui-panel-info__units">
				<div class="awxjs__ui-cols align-center justify-between">
					<div class="label">Units</div>
					<div class="control"></div>
				</div>
			</div>
		`,
    init: (view, contentView) => {
      const control = new _Switch.default({
        values: [{
          label: 'Imperial',
          value: "imperial"
          /* Imperial */

        }, {
          label: 'Metric',
          value: "metric"
          /* Metric */

        }]
      });

      const update = () => {
        if (contentView.units === "metric"
        /* Metric */
        ) {
            control.select();
          } else {
          control.deselect();
        }
      };

      contentView.on('change:units', e => {
        update();
      });
      control.addTo(view.el('.control'));
      control.on('select', () => {
        contentView.units = "metric"
        /* Metric */
        ;
      }).on('deselect', () => {
        contentView.units = "imperial"
        /* Imperial */
        ;
      });
      update();
    }
  },
  place: {
    id: 'place',
    requiresData: true,
    request: (account, data) => account.api().endpoint('places'),
    data: data => {
      if ((0, _utils2.isEmpty)(data)) return null;
      data = data.places || data;
      return data.place;
    },
    renderer: data => `
			<div class="awxjs__app__ui-panel-info__place">
				<div class="awxjs__app__ui-panel-info__place-name">${data.name}${!(0, _utils2.isEmpty)(data.state) ? `, ${data.state}` : ''}, ${data.country}</div>
			</div>
		`
  },
  obs: {
    id: 'observations',
    requiresData: true,
    request: (account, data) => account.api().endpoint('conditions'),
    data: data => {
      var _a;

      if ((0, _utils2.isEmpty)(data)) return null;
      data = data.observations || data; // handle conditions

      if (((_a = data.conditions) === null || _a === void 0 ? void 0 : _a.length) > 0) {
        const result = data.conditions[0] || [];
        return result.periods[0];
      }

      return data.ob;
    },
    renderer: data => {
      const date = (0, _utils2.dateFromISO)(data.dateTimeISO);
      const metric = data.units === "metric"
      /* Metric */
      ;
      return `
				<div class="awxjs__app__ui-panel-info__obs">
					<div class="awxjs__app__ui-panel-info__obs-timestamp">Last updated at ${(0, _utils2.formatDate)(date, metric ? 'HH:mm, MMM d, yyyy' : 'h:mm a, MMM dd, yyyy')}</div>
					<div class="awxjs__ui-cols">
						<div>
							<div class="awxjs__ui-cols">
								<div>
									<div class="awxjs__app__ui-panel-info__obs-temp">${(0, _units.formatDataValue)(data, 'tempF', 'tempC', metric) || 'N/A'}</div>
								</div>
								<div>
									<img class="awxjs__app__ui-panel-info__obs-icon" src="https://cdn.aerisapi.com/wxblox/icons/${data.icon || 'na.png'}">
								</div>
							</div>
							<div class="awxjs__app__ui-panel-info__obs-wx">${data.weatherPrimary}</div>
						</div>
						<div class="awxjs__app__ui-panel-info__obs-details">
							<div class="awxjs__ui-row">
								<div>Winds</div>
								<div>${data.windSpeedMPH > 0 ? `${(0, _units.formatDataValue)(data, 'windSpeedMPH', 'windSpeedKPH', metric)}` : `Calm`}</div>
							</div>
							<div class="awxjs__ui-row">
								<div>Dew Point</div>
								<div>${(0, _units.formatDataValue)(data, 'dewpointF', 'dewpointC', metric)}</div>
							</div>
							<div class="awxjs__ui-row">
								<div>Humidity</div>
								<div>${(0, _units.formatDataValue)(data, 'humidity')}</div>
							</div>
							<div class="awxjs__ui-row">
								<div>Pressure</div>
								<div>${(0, _units.formatDataValue)(data, 'pressureIN', 'pressureMB', metric)}</div>
							</div>
							<div class="awxjs__ui-row">
								<div>Visibility</div>
								<div>${(0, _units.formatDataValue)(data, 'visibilityMI', 'visibilityKM', metric)}</div>
							</div>
							<div class="awxjs__ui-row">
								<div>Sky Cover</div>
								<div>${(0, _units.formatDataValue)(data, 'sky')}</div>
							</div>
						</div>
					</div>
				</div>
			`;
    }
  },
  forecast: {
    id: 'forecast',
    requiresData: true,
    request: (account, data) => {
      const forecastFields = `
					timestamp,dateTimeISO,tempF,tempC,icon,weatherPrimary,windSpeedMPH,windSpeedKPH,windSpeedMinMPH,windSpeedMinKPH,
					windSpeedMaxMPH,windSpeedMaxKPH,windGustMPH,windGustKPH,snowIN,snowCM,precipIN,precipMM
				`.split(',').map(key => `periods.${key}`);
      return account.api().endpoint('forecasts').fields(forecastFields.join(',')).filter('3hr').limit(7);
    },
    data: data => {
      if ((0, _utils2.isEmpty)(data)) return null;
      data = data.forecasts || data;

      if (data) {
        if (data[0]) data = data[0];
        data = data.periods;
      }

      return {
        periods: data || []
      };
    },
    renderer: data => {
      const metric = data.units === "metric"
      /* Metric */
      ;
      return data.periods.map(period => {
        const date = (0, _utils2.dateFromISO)(period.dateTimeISO);
        let winds = 'Calm';

        if (period.windSpeedMaxMPH > 5) {
          if (metric) {
            winds = `${(0, _utils2.toRangeStr)(period.windSpeedMinKPH, period.windSpeedMaxKPH, 5)} ${(0, _units.unitsForDataType)('speed', true)}`;
          } else {
            winds = `${(0, _utils2.toRangeStr)(period.windSpeedMinMPH, period.windSpeedMaxMPH, 5)} ${(0, _units.unitsForDataType)('speed', false)}`;
          }
        } else if (period.windSpeedMaxMPH < 5 && period.windSpeedMinMPH > 0) {
          winds = metric ? '< 8 kmh' : '< 5 mph';
        }

        return `
					<div class="awxjs__app__ui-panel-info__forecast">
						<div class="awxjs__app__ui-panel-info__forecast-period">
							<div class="awxjs__ui-cols align-center">
								<div class="awxjs__app__ui-panel-info__forecast-ts">${(0, _utils2.formatDate)(date, metric ? 'HH:00' : 'h a')}</div>
								<div><img class="awxjs__app__ui-panel-info__forecast-icon" src="https://cdn.aerisapi.com/wxblox/icons/${period.icon || 'na.png'}"></div>
								<div class="awxjs__app__ui-panel-info__forecast-temp">${(0, _units.formatDataValue)(period, 'tempF', 'tempC', metric)}</div>
								<div class="awxjs__app__ui-panel-info__forecast-conditions">
									<div class="awxjs__app__ui-panel-info__forecast-wx">${period.weatherPrimary}</div>
									<div class="awxjs__app__ui-panel-info__forecast-detail"><span>Winds</span> ${winds}</div>
								</div>
							</div>
						</div>
					</div>
				`;
      }).join('');
    }
  },
  alerts: {
    id: 'alerts',
    requiresData: true,
    request: (account, data) => account.api().endpoint('alerts').fields('details.type,details.name,timestamps'),
    data: data => {
      if ((0, _utils2.isEmpty)(data)) return null; // add parent places.profile to each alert so we can do proper timezone conversions

      const profile = (0, _utils2.get)(data, 'places.profile');
      if (data.alerts) data = data.alerts;

      if ((0, _utils2.isArray)(data)) {
        return data.map(record => (0, _utils2.extend)(record, {
          profile
        }));
      }

      return null;
    },
    renderer: data => {
      const metric = data.units === "metric"
      /* Metric */
      ;
      const alerts = data.map(alert => {
        let range = '';
        const ts = alert.timestamps;

        if (ts) {
          const offset = (0, _utils2.get)(alert, 'profile.tzoffset') ? (0, _utils2.get)(alert, 'profile.tzoffset') * 1000 : 0;
          const utcOffset = new Date().getTimezoneOffset() * 60000;
          const tzShift = utcOffset + offset;
          const tz = (0, _utils2.get)(alert, 'profile.tzname') || ''; // need to add timezone offset difference between the local and alert timezones

          const now = new Date(new Date().getTime() + tzShift);
          const start = new Date(new Date(ts.begins * 1000).getTime() + tzShift);
          const end = new Date(new Date(ts.expires * 1000).getTime() + tzShift);
          const fmt = metric ? `HH:00 [${tz}], ddd M/d` : `h:mm a '${tz}', EEE M/d`;

          if (start.getTime() < now.getTime()) {
            range = ` until ${(0, _utils2.formatDate)(end, fmt)}`;
          } else {
            range = ` from ${(0, _utils2.formatDate)(start, fmt)} until ${(0, _utils2.formatDate)(end, fmt)}`;
          }
        }

        return `
					<div class="awxjs__app__ui-panel-info__alert">
						<span class="awxjs__app__ui-panel-info__alert-name"><strong>${(0, _strings.ucwords)(alert.details.name.toLowerCase())}</strong></span>
					<br>${range}</div>
				`;
      }).join('');
      return `<div class="awxjs__app__ui-panel-info__alerts">${alerts}</div>`;
    }
  },
  threats: {
    id: 'threats',
    requiresData: true,
    request: (account, data) => account.api().endpoint('threats').radius('50mi'),
    data: data => (0, _utils2.get)(data, 'threats.0.periods.0.storms'),
    renderer: data => (0, _utils.renderWithFallback)(threat => `<div class="awxjs__app__ui-panel-info__threats"><div class="awxjs__app__ui-panel-info__threats-row">${(0, _strings.formatDirections)(threat.phrase.long)}</div></div>
		`, data)
  },
  outlook: {
    id: 'outlook',
    requiresData: true,
    request: (account, data) => account.api().endpoint('phrases/summary'),
    data: data => (0, _utils2.get)(data, 'phrases_summary.0'),
    renderer: data => (0, _utils.renderWithFallback)(outlook => {
      const metric = outlook.units === "metric"
      /* Metric */
      ;
      return `<div class="awxjs__app__ui-panel-info__outlook">${metric ? (0, _utils2.get)(outlook, 'phrases.longMET') : (0, _utils2.get)(outlook, 'phrases.long')}</div>`;
    }, data)
  },
  hazards: {
    id: 'hazards',
    requiresData: true,
    config: {
      lightning: false
    },
    request: (account, data, config = {}) => {
      if (!(0, _utils2.isset)(data.p)) {
        return undefined;
      }

      const request = account.api();
      const forecastFields = `
					timestamp,dateTimeISO,tempF,tempC,icon,weatherPrimary,windSpeedMPH,windSpeedKPH,windSpeedMinMPH,windSpeedMinKPH,
					windSpeedMaxMPH,windSpeedMaxKPH,windGustMPH,windGustKPH,snowIN,snowCM,precipIN,precipMM
				`.split(',').map(key => `periods.${key}`);
      request.addRequest(account.api().endpoint('forecasts').fields(forecastFields.join(',')).filter('3hr').limit(7));
      request.addRequest(account.api().endpoint('observations'));
      request.addRequest(account.api().endpoint('convective/outlook').action("contains"
      /* CONTAINS */
      ));

      if (config.lightning) {
        request.addRequest(account.api().endpoint('lightning/summary').action("closest"
        /* CLOSEST */
        ).radius('60mi').limit(100));
      }

      return request;
    },
    data: (data, config = {}) => {
      if ((0, _utils2.isEmpty)(data)) {
        return undefined;
      }

      const ob = (0, _utils2.get)(data, 'observations.ob') || {};
      const forecasts = (0, _utils2.get)(data, 'forecasts');
      const convective = (0, _utils2.get)(data, 'convective_outlook_contains');
      const lightning = (0, _utils2.get)(data, 'lightning_summary_closest');

      if ((0, _utils2.isEmpty)(ob) && (0, _utils2.isEmpty)(forecasts)) {
        return undefined;
      }

      const result = [];

      if (forecasts && forecasts.length > 0) {
        const periods = forecasts[0].periods;
        let snow = 0;
        let rain = 0;
        let wind = 0;
        let ice = 0;

        if (ob) {
          if (ob.tempF <= 30 && /snow/.test(ob.weatherPrimary) === false) {
            ice += ob.precipIN;
          }
        }

        periods.forEach(period => {
          snow += period.snowIN;
          wind = Math.max(wind, period.windGustMPH);

          if (period.tempF >= 30) {
            rain += period.precipIN;
          }

          if (period.tempF >= 28 && period.tempF <= 32) {
            ice += period.precipIN;
          }
        });
        result.push({
          type: 'snow',
          name: 'Snow',
          value: snow
        });
        result.push({
          type: 'ice',
          name: 'Ice',
          value: ice
        });
        result.push({
          type: 'rain',
          name: 'Rain',
          value: rain
        });
        result.push({
          type: 'wind',
          name: 'Wind',
          value: wind
        });
      }

      if (convective && convective.length > 0) {
        const risk = convective[0].details.risk;
        result.push({
          type: 'convective',
          name: 'Convective',
          value: risk.type
        });
      } else {
        result.push({
          type: 'convective',
          name: 'Convective',
          value: 'none'
        });
      }

      if (config.lightning === true) {
        if (lightning) {
          const count = (0, _utils2.get)(lightning[0] || lightning, 'summary.pulse.count');
          result.push({
            type: 'lightning',
            name: 'Lightning',
            value: count
          });
        } else {
          result.push({
            type: 'lightning',
            name: 'Lightning',
            value: 0
          });
        }
      }

      return result;
    },
    renderer: data => {
      const hazards = data.map(hazard => {
        const index = (0, _Indices.valueForIndice)(hazard.type, hazard.value) || 0;
        const percent = Math.round(index / 5 * 1000) / 10;
        const indexStr = `${index}`.replace(/\./g, 'p'); // determine impact level based on percentage

        let level = 'None';
        if (percent >= 80) level = 'Major';else if (percent >= 60) level = 'High';else if (percent >= 40) level = 'Moderate';else if (percent >= 20) level = 'Low';else if (percent > 0) level = 'Minimal';
        return `
					<div class="awxjs__app__ui-panel-info__hazard awxjs__ui-cols align-center">
						<div class="awxjs__app__ui-panel-info__hazard-label">${hazard.name}</div>
						<div class="awxjs__app__ui-panel-info__hazard-bar">
							<div class="awxjs__app__ui-panel-info__hazard-bar-inner">
								<div class="awxjs__app__ui-panel-info__hazard-bar-progress awxjs__app__ui-panel-info__hazard-indice-fill-${indexStr}" style="width:${percent}%;"></div>
							</div>
						</div>
						<div class="awxjs__app__ui-panel-info__hazard-value awxjs__app__ui-panel-info__hazard-value-${indexStr}">${level}</div>
					</div>
				`;
      });
      return `<div class="awxjs__app__ui-panel-info__hazards">${hazards.join('')}</div>`;
    }
  }
};
var _default = cachedInfoPanelViews;
exports.default = _default;
module.exports = exports.default;