import EventDispatcher from '../event/EventDispatcher';
import ButtonPanelView from './views/ButtonPanel';
import InteractiveMap from '../maps/interactive/InteractiveMap';
interface SourceRepresentable {
    id: string;
    parentId?: string;
    key: string;
    value: string;
    options?: any;
}
declare class DataSourceManager extends EventDispatcher {
    private map;
    private panel;
    private storedSources;
    private sourceState;
    private respondToSourceEvents;
    constructor(map: InteractiveMap, panel: ButtonPanelView);
    get sources(): {
        [key: string]: any;
    };
    linkPanel(panel: ButtonPanelView): void;
    getSource(id: string): any;
    findSource(id: string, value?: string): any;
    addSource(id: string, source: any): void;
    setSourceState(id: string, state: any): void;
    handleSourceEvent(event: 'add' | 'remove', id: string): void;
    private handleSelect;
    private handleDeselect;
    private handleOptionChange;
    private handleAction;
    updateSources(sourcesToAdd?: Array<SourceRepresentable>, sourcesToRemove?: Array<SourceRepresentable>): void;
    private setupEvents;
}
export default DataSourceManager;
