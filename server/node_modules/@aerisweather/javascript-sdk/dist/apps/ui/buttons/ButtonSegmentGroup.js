"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Component = _interopRequireDefault(require("../Component"));

var _ButtonSegment = _interopRequireDefault(require("./ButtonSegment"));

var _globals = require("../../../globals");

var _utils = require("../../../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class ButtonSegmentGroup extends _Component.default {
  constructor(opts) {
    super((0, _utils.extend)({
      reloadOnChange: true
    }, opts, {
      ui: {
        segments: '.awxjs__ui-btn-segments ul'
      }
    }));
    this.storedSegments = [];
  }

  get id() {
    return this.opts.id;
  }

  get parentId() {
    return this.opts.parentId;
  }

  get title() {
    return this.opts.title;
  }

  get value() {
    const values = this.selectedSegments().map(segment => segment.value);

    if (this.opts.multiselect === false) {
      return values.join(',');
    }

    return values;
  }

  get segments() {
    return this.storedSegments;
  }

  setSegments(segments) {
    this.storedSegments = segments;

    if (this.ui.segments) {
      segments.forEach(segment => {
        segment.addTo(this.ui.segments);
        segment.on("select"
        /* SELECT */
        , e => {
          this._handleSelectSegment(segment);
        }).on("deselect"
        /* DESELECT */
        , e => {
          this._handleDeselectSegment(segment);
        });
      });
    }
  }

  selectedSegments() {
    return this.segments.filter(segment => segment.selected);
  }

  clear(triggerEvents = true) {
    this.selectedSegments().forEach(item => {
      item.deselect(triggerEvents);
    });
  }

  _handleSelectSegment(segment) {
    const allowMultiselect = this.opts.multiselect && segment.value !== 'all' && segment.multiselect !== false;

    if (allowMultiselect === false) {
      this.selectedSegments().forEach(item => {
        if (item.value !== segment.value) {
          item.deselect();
        }
      });
    } else {
      // deselect all segments that don't support multiselect
      this.selectedSegments().forEach(item => {
        if (item.multiselect === false) {
          item.deselect();
        }
      });
    }

    this._handleValueChange();
  }

  _handleDeselectSegment(segment) {
    // if no selection and we have non-multiselect options (or 'all'), then select
    // that one instead by default or the first one if no 'all' option
    if (this.selectedSegments().length === 0) {
      if (this.opts.multiselect) {
        let selectedSegment;
        this.segments.forEach(item => {
          if (!selectedSegment && (item.value === 'all' || item.multiselect === false)) {
            item.select();
            selectedSegment = item;
          }
        });
      } else if (this.opts.requiresSelection) {
        this.segments[0].select();
      }
    }

    this._handleValueChange();
  }

  _handleValueChange() {
    if (this.opts.onChange) {
      this.opts.onChange(this);
    } // const previousValue = { ...this._value };
    // const value = this.value;
    // this.trigger('value:change', { value, previous: previousValue });
    // this._value = { ...value };


    this.trigger('change', {
      id: this.id,
      value: this.value,
      reload: this.opts.reloadOnChange
    });
  }

  _render(data) {
    return `
			<div data-group="${this.id}" class="${_globals.Globals.cssPrefix}ui-btn-segmented__group">
				${!(0, _utils.isEmpty)(this.title) ? `<p class="${_globals.Globals.cssPrefix}ui-btn-segmented__group-title">${this.title}</p>` : ''}
				<div class="${_globals.Globals.cssPrefix}ui-btn-segments"><ul></ul></div>
			</div>
		`;
  }

  _onAddedToDOM() {
    super._onAddedToDOM();

    const segments = this.opts.segments;
    const result = (segments || []).map(config => {
      const localConfig = (0, _utils.cloneDeep)(config);
      const valueKey = localConfig.value.replace(/\:.+$/, '').replace(/,/, '--').replace(/;/, '__');
      localConfig.id = localConfig.id || valueKey;
      return new _ButtonSegment.default(Object.assign(Object.assign({}, localConfig), {
        loader: false,
        toggleable: this.opts.multiselect === true,
        parent: this.parentId,
        group: this.id
      }));
    });
    this.setSegments(result);
  }

}

var _default = ButtonSegmentGroup;
exports.default = _default;
module.exports = exports.default;