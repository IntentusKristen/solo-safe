"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Component = _interopRequireDefault(require("../Component"));

var _Button = _interopRequireWildcard(require("./Button"));

var _SegmentedButton = _interopRequireDefault(require("./SegmentedButton"));

var _utils = require("../../../utils");

var _globals = require("../../../globals");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

;
/**
 * A `ButtonGroup` is a component that triggers an event when clicked and supports a toggleable
 * selected state.
 *
 * @export
 * @class ButtonGroup
 * @extends {Component<T, S>}
 * @template T
 * @template S
 */

class ButtonGroup extends _Component.default {
  /**
   * Initializes and returns a button group instance with the specified configuration options.
   *
   * @param {*} [opts]
   * @memberof ButtonGroup
   */
  constructor(opts) {
    opts = opts || {};
    opts = (0, _utils.extend)({
      defaultType: 'data-item',
      multiselect: true
    }, opts, {
      className: opts.className ? `ui-btn-group ${opts.className}` : 'ui-btn-group',
      ui: {
        label: `.${_globals.Globals.cssPrefix}ui-btn-group-label`,
        buttons: `.${_globals.Globals.cssPrefix}ui-btn-group-items`
      }
    });
    super(opts);
    this._buttons = [];
    this.setState({
      expanded: true
    });
  }

  get id() {
    return (0, _Button.buttonIdentifier)(this.opts.id || this.opts.title);
  }

  get key() {
    return this.id;
  }
  /**
   * Array of button elements included in the group.
   *
   * @readonly
   * @type {Toggleable[]}
   * @memberof ButtonGroup
   */


  get buttons() {
    return this._buttons;
  }
  /**
   * Returns the button from the group associated with the specified identifier, if any.
   *
   * @param {string} id
   * @returns {Toggleable}
   * @memberof ButtonGroup
   */


  buttonForId(id) {
    let result;
    this.buttons.forEach((button, index) => {
      if (button.id === id && !(0, _utils.isset)(result)) {
        result = button;
      }
    });
    return result;
  }

  buttonForKey(key) {
    let result;
    this.buttons.forEach((button, index) => {
      if (button.key === key && !(0, _utils.isset)(result)) {
        result = button;
      }
    });
    return result;
  }
  /**
   * Returns the button from the group associated with the specified value, if any.
   *
   * @param {string} value
   * @returns {Toggleable}
   * @memberof ButtonGroup
   */


  buttonForValue(value) {
    let result;
    this.buttons.forEach((button, index) => {
      if (button.value === value && !(0, _utils.isset)(result)) {
        result = button;
      }
    });
    return result;
  }

  size() {
    const size = super.size();
    let h = 0;

    if (this.ui.label) {
      h += this.ui.label.outerHeight(true);
    }

    this.buttons.forEach(button => {
      h += button.size().height;
    });
    const pad = this.$el.padding();
    const borders = this.$el.borders();
    h += pad.top + pad.bottom;
    h += borders.top + borders.bottom;
    size.height = h;
    return size;
  }

  _render(data) {
    const title = !(0, _utils.isEmpty)(this.opts.title) ? `<div class="${_globals.Globals.cssPrefix}ui-btn-group-label">${this.opts.title}</div>` : '';
    return `
			<div class="awxjs__ui-btn-group">
				${title}
				<div class="${_globals.Globals.cssPrefix}ui-btn-group-items" data-multiselect="${this.opts.multiselect ? 1 : 0}"></div>
			</div>
		`;
  }

  _onAddedToDOM() {
    super._onAddedToDOM();

    if (this.opts.buttons) {
      this._buttons = (this.opts.buttons || []).map(opts => {
        opts.parent = this.id;
        opts.options = Object.assign(Object.assign({}, this.opts.options), opts.options); // allow each button to inherit parent controls

        if (this.opts.controls && !(0, _utils.isset)(opts.controls)) {
          opts.controls = (0, _utils.extend)({}, this.opts.controls);
        }

        if (opts.segments) {
          return new _SegmentedButton.default(opts);
        }

        const buttonType = opts.type || this.opts.defaultType;
        return new _Button.default(opts);
      });
    }

    if (this.ui.buttons && this.ui.buttons.children().length === 0) {
      this.buttons.forEach(button => {
        button.addTo(this.ui.buttons);
      });
    }
  }

  _setupEvents() {
    super._setupEvents();

    this.buttons.forEach(button => {
      if (button instanceof _SegmentedButton.default) {
        button.on('expanded collapsed', e => {
          this.trigger('change:size', e.data);
        });
      }
    });

    if (this.opts.multiselect === false) {
      this.buttons.forEach(button => {
        if (button.selected) {
          button.disable(true);
          this._selectedButton = button;
        }

        button.on('select', () => {
          if (this._selectedButton) {
            this._selectedButton.deselect();

            this._selectedButton.disable(false);
          }

          this._selectedButton = button;
          button.disable(true);

          if ((0, _utils.isFunction)(this.opts.onChange)) {
            this.opts.onChange(button.value);
          }

          this.trigger('change', {
            value: button.value
          });
        });
      });
    }
  }

}

var _default = ButtonGroup;
exports.default = _default;
module.exports = exports.default;