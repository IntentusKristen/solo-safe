import Component from '../Component';
import { Toggleable } from '../../types';
import ButtonControls from './ButtonControls';
import { ButtonOptions, ButtonState, ButtonInfo } from '../../types/button.interface';
export declare const buttonIdentifier: (id: string) => string;
/**
 * A `Button` is a component that triggers an event when clicked and supports a toggleable
 * selected state.
 *
 * @export
 * @class Button
 * @extends {Component<T, S>}
 * @implements {Toggleable}
 * @template T
 * @template S
 */
declare class Button<T extends ButtonOptions, S extends ButtonState> extends Component<T, S> implements Toggleable {
    private _controls;
    /**
     * Initializes and returns a button instance with the specified configuration options.
     *
     * @param {*} [opts]
     * @memberof Button
     */
    constructor(opts?: any);
    /**
     * Button identifier.
     *
     * @readonly
     * @type {string}
     * @memberof Button
     */
    get id(): string;
    get key(): string;
    get parentId(): string;
    get groupId(): string;
    get info(): ButtonInfo;
    /**
     * A Boolean indicated whether the button is currently selected.
     *
     * @readonly
     * @type {boolean}
     * @memberof Button
     */
    get selected(): boolean;
    get toggleable(): boolean;
    get controls(): ButtonControls;
    /**
     * Value associated with the button, if any.
     *
     * @readonly
     * @type {*}
     * @memberof Button
     */
    get value(): any;
    /**
     * Title label displayed for the button.
     *
     * @readonly
     * @type {string}
     * @memberof Button
     */
    get title(): string;
    /**
     * Custom data associated with the button, if any.
     *
     * @readonly
     * @type {*}
     * @memberof Button
     */
    get options(): any;
    /**
     * Selects the button.
     *
     * @memberof Button
     */
    select(trigger?: boolean): void;
    /**
     * Deselects the button.
     *
     * @memberof Button
     */
    deselect(trigger?: boolean): void;
    /**
     * Enables or disables the button.
     * If disabled, button will not react to click events.
     */
    disable(value: boolean): void;
    matches(check: string | Array<string>): boolean;
    setLoading(loading: boolean): void;
    protected _onSelect(trigger?: boolean): void;
    protected _onDeselect(trigger?: boolean): void;
    protected _render(): string;
    protected _onAddedToDOM(): void;
    protected _setupEvents(): void;
    protected _afterEvents(): void;
}
export default Button;
