"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _ActivityIndicator = _interopRequireDefault(require("../../../ui/ActivityIndicator"));

var _Tooltip = _interopRequireDefault(require("../Tooltip"));

var _LayerControlsView = _interopRequireDefault(require("../../views/LayerControlsView"));

var _utils = require("../../../utils");

var _View = _interopRequireDefault(require("../View"));

var _DOM = _interopRequireDefault(require("../../../display/DOM"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// store a reference to the active popover so it can be dismissed when a new one is presented
let activePopover = null;

class ButtonControls extends _View.default {
  constructor(opts) {
    var _a;

    super((0, _utils.extend)({
      controls: [{
        close: true,
        activity: false,
        settings: undefined
      }]
    }, opts, {
      ui: {
        close: '.awxjs__ui-btn-close',
        settings: '.awxjs__ui-btn-settings',
        controls: '.awxjs__ui-btn-controls'
      }
    }));

    this._handleWindowClick = e => {
      const $target = (0, _DOM.default)(e.target);
      const $view = this._popover.$el;

      if ($view !== $target && $view.contains($target) === false) {
        this._hidePopover();

        window.removeEventListener('click', this._handleWindowClick);
      }
    };

    if ((_a = opts.controls) === null || _a === void 0 ? void 0 : _a.onChange) {
      this._onChange = opts.controls.onChange;
    }

    const controls = this.opts.controls;

    if (controls.activity) {
      this._indicator = new _ActivityIndicator.default({
        size: 24,
        strokeWidth: 2
      });
    }
  }

  setLoading(loading) {
    if (this._indicator) {
      if (loading) {
        this._indicator.startAnimating();
      } else {
        this._indicator.stopAnimating();
      }
    }

    this.ui.close.css('opacity', loading ? 0 : 1);

    if (this.ui.settings) {
      this.ui.settings.css('opacity', loading ? 0 : 1);
    }
  }

  addToButton(button) {
    if (button.ui.target) {
      this.remove();
      this.addTo(button.$el);
      button.on('select', () => {
        if (this.ui.settings) {
          this.ui.settings.show();
        }
      }).on('deselect', () => {
        if (this.ui.close) {
          this.ui.close.css('opacity', 0);
        }

        if (this.ui.settings) {
          this.ui.settings.hide();
        }

        if (this._popover) {
          this._hidePopover();
        }
      });
    }
  }

  _render() {
    const controls = this.opts.controls;
    let result = '';

    if (controls.close) {
      result += `
				<div class="awxjs__ui-btn-action awxjs__ui-btn-close" title="Close">
					<svg width="100pt" height="100pt" version="1.1" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
						<path d="m22.699 77.301c0.80078 0.80078 1.8008 1.1992 2.8008 1.1992s2-0.39844 2.8008-1.1992l21.699-21.602 21.699 21.699c0.80078 0.80078 1.8008 1.1992 2.8008 1.1992s2-0.39844 2.8008-1.1992c1.6016-1.6016 1.6016-4.1016 0-5.6992l-21.602-21.699 21.699-21.699c1.6016-1.6016 1.6016-4.1016 0-5.6992-1.6016-1.6016-4.1016-1.6016-5.6992 0l-21.699 21.699-21.699-21.602c-1.6016-1.6016-4.1016-1.6016-5.6992 0-1.6016 1.6016-1.6016 4.1016 0 5.6992l21.699 21.602-21.602 21.699c-1.5977 1.5-1.5977 4.1016 0 5.6016z"/>
					</svg>
				</div>
			`;
    }

    if (controls.settings) {
      result += `
				<div class="awxjs__ui-btn-action awxjs__ui-btn-settings" title="Settings">
					<svg version="1.1" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
						<path d="m94.801 40.801-10.602-1.8008c-0.60156-1.8984-1.3984-3.6992-2.3008-5.5l6.1992-8.6992c0.89844-1.3008 0.80078-3.1016-0.30078-4.1992l-8.5-8.5c-1.1016-1.1016-2.8984-1.3008-4.1992-0.30078l-8.6992 6.1992c-1.6992-0.89844-3.6016-1.6992-5.5-2.3008l-1.6992-10.5c-0.30078-1.6016-1.6016-2.6992-3.1992-2.6992h-12c-1.6016 0-2.8984 1.1016-3.1992 2.6992l-1.8008 10.602c-1.8984 0.60156-3.6992 1.3984-5.5 2.3008l-8.6992-6.1992c-1.3008-0.89844-3.1016-0.80078-4.1992 0.30078l-8.5 8.5c-1.1016 1.1016-1.3008 2.8984-0.30078 4.1992l6.1992 8.6992c-0.89844 1.6992-1.6992 3.6016-2.3008 5.5l-10.5 1.6992c-1.6016 0.30078-2.6992 1.6016-2.6992 3.1992v12c0 1.6016 1.1016 2.8984 2.6992 3.1992l10.602 1.8008c0.60156 1.8984 1.3984 3.6992 2.3008 5.5l-6.1992 8.6992c-0.89844 1.3008-0.80078 3.1016 0.30078 4.1992l8.5 8.5c1.1016 1.1016 2.8984 1.3008 4.1992 0.30078l8.6992-6.1992c1.6992 0.89844 3.6016 1.6992 5.5 2.3008l1.8008 10.602c0.30078 1.6016 1.6016 2.6992 3.1992 2.6992h12c1.6016 0 2.8984-1.1016 3.1992-2.6992l1.6992-10.703c1.8984-0.60156 3.6992-1.3984 5.5-2.3008l8.6992 6.1992c1.3008 0.89844 3.1016 0.80078 4.1992-0.30078l8.5-8.5c1.1016-1.1016 1.3008-2.8984 0.30078-4.1992l-6.1992-8.6992c0.89844-1.6992 1.6992-3.6016 2.3008-5.5l10.602-1.8008c1.6016-0.30078 2.6992-1.6016 2.6992-3.1992v-11.898c-0.10156-1.6016-1.2031-2.8984-2.8008-3.1992zm-44.801 26.301c-9.5 0-17.102-7.6992-17.102-17.102 0-9.5 7.6992-17.102 17.102-17.102 9.3984 0 17.102 7.6016 17.102 17.102s-7.6016 17.102-17.102 17.102z"/>
					</svg>
				</div>
			`;
    }

    if (result !== '') {
      result = `<div class="awxjs__ui-btn-controls">${result}</div>`;
    }

    return result;
  }

  _setupEvents() {
    super._setupEvents();

    const controls = this.opts.controls;

    if (this._indicator) {
      this._indicator.appendTo(this.$el);
    }

    if (controls.settings && this.ui.settings) {
      this.ui.settings.on('click', e => {
        e.preventDefault();
        e.stopPropagation();

        if (!this._popover) {
          const view = new _LayerControlsView.default({
            controls: controls.settings
          });
          view.on('change', ee => {
            const payload = Object.assign({}, ee.data);
            this.trigger('change', payload);

            if (this._onChange) {
              this._onChange(payload);
            }
          });
          const tooltip = new _Tooltip.default(view.$el, {
            place: 'left',
            className: 'awxjs__ui-layer-controls-popover',
            showClose: true
          });
          view.addTo(tooltip.$el);
          tooltip.attachTo(this.parent());
          tooltip.setContent(view.$el);
          this._popover = tooltip;
          this._controls = view;
        }

        if (this._popover.visible) {
          this._hidePopover();
        } else {
          this._showPopover();
        }

        window.addEventListener('click', this._handleWindowClick);
      });
    }
  }

  _showPopover() {
    if (activePopover) {
      activePopover.hide();
    }

    this._popover.show();

    activePopover = this._popover;
  }

  _hidePopover() {
    this._popover.hide();

    activePopover = null;
  }

}

var _default = ButtonControls;
exports.default = _default;
module.exports = exports.default;