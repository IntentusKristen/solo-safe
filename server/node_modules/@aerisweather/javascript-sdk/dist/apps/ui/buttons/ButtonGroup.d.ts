import Component from '../Component';
import { Size } from '../../../types';
import { ButtonGroupOptions } from '../../types/button.interface';
import { Toggleable, ComponentState } from '../../types';
export interface ButtonGroupState extends ComponentState {
    expanded: boolean;
}
/**
 * A `ButtonGroup` is a component that triggers an event when clicked and supports a toggleable
 * selected state.
 *
 * @export
 * @class ButtonGroup
 * @extends {Component<T, S>}
 * @template T
 * @template S
 */
declare class ButtonGroup<T extends ButtonGroupOptions, S extends ButtonGroupState> extends Component<T, S> {
    private _buttons;
    private _selectedButton;
    /**
     * Initializes and returns a button group instance with the specified configuration options.
     *
     * @param {*} [opts]
     * @memberof ButtonGroup
     */
    constructor(opts?: any);
    get id(): string;
    get key(): string;
    /**
     * Array of button elements included in the group.
     *
     * @readonly
     * @type {Toggleable[]}
     * @memberof ButtonGroup
     */
    get buttons(): Toggleable[];
    /**
     * Returns the button from the group associated with the specified identifier, if any.
     *
     * @param {string} id
     * @returns {Toggleable}
     * @memberof ButtonGroup
     */
    buttonForId(id: string): Toggleable;
    buttonForKey(key: string): Toggleable;
    /**
     * Returns the button from the group associated with the specified value, if any.
     *
     * @param {string} value
     * @returns {Toggleable}
     * @memberof ButtonGroup
     */
    buttonForValue(value: string): Toggleable;
    size(): Size;
    protected _render(data?: any): string;
    protected _onAddedToDOM(): void;
    protected _setupEvents(): void;
}
export default ButtonGroup;
