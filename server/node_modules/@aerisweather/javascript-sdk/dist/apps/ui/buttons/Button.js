"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.buttonIdentifier = void 0;

var _Component = _interopRequireDefault(require("../Component"));

var _ButtonControls = _interopRequireDefault(require("./ButtonControls"));

var _utils = require("../../../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const buttonIdentifier = id => (id || '').replace(/\:.+$/, '').replace(/[^a-zA-Z0-9_]/g, '-').replace(/-+/g, '-').replace(/,/g, '__').toLowerCase();
/**
 * A `Button` is a component that triggers an event when clicked and supports a toggleable
 * selected state.
 *
 * @export
 * @class Button
 * @extends {Component<T, S>}
 * @implements {Toggleable}
 * @template T
 * @template S
 */


exports.buttonIdentifier = buttonIdentifier;

class Button extends _Component.default {
  /**
   * Initializes and returns a button instance with the specified configuration options.
   *
   * @param {*} [opts]
   * @memberof Button
   */
  constructor(opts) {
    opts = (0, _utils.extend)({
      toggleable: true,
      controls: {
        close: true,
        activity: true
      }
    }, opts, {
      className: opts.className ? `ui-btn ${opts.className}` : 'ui-btn',
      ui: {
        target: '.awxjs__ui-btn-target',
        label: '.awxjs__ui-btn-label',
        close: '.awxjs__ui-btn-close',
        settings: '.awxjs__ui-btn-settings',
        controls: '.awxjs__ui-btn-controls'
      }
    });
    opts.id = opts.id || (opts.value ? opts.value.replace(/,/g, '__') : null);
    super(opts);

    if (opts.controls) {
      this._controls = new _ButtonControls.default({
        controls: opts.controls
      });
    }

    this.setState({
      selected: false
    });
    this.initialize();
  }
  /**
   * Button identifier.
   *
   * @readonly
   * @type {string}
   * @memberof Button
   */


  get id() {
    return buttonIdentifier(this.opts.id || this.opts.value);
  }

  get key() {
    return `${this.parentId ? `${this.parentId}::` : ''}${this.groupId ? `${this.groupId}::` : ''}${this.id}`;
  }

  get parentId() {
    return this.opts.parent;
  }

  get groupId() {
    return this.opts.group;
  }

  get info() {
    return {
      id: this.id,
      key: this.key,
      value: this.value,
      group: this.groupId,
      parent: this.parentId,
      options: this.options
    };
  }
  /**
   * A Boolean indicated whether the button is currently selected.
   *
   * @readonly
   * @type {boolean}
   * @memberof Button
   */


  get selected() {
    const {
      selected
    } = this.state;
    return selected;
  }

  get toggleable() {
    return this.opts.toggleable;
  }

  get controls() {
    return this._controls;
  }
  /**
   * Value associated with the button, if any.
   *
   * @readonly
   * @type {*}
   * @memberof Button
   */


  get value() {
    return this.opts.value;
  }
  /**
   * Title label displayed for the button.
   *
   * @readonly
   * @type {string}
   * @memberof Button
   */


  get title() {
    return this.opts.title;
  }
  /**
   * Custom data associated with the button, if any.
   *
   * @readonly
   * @type {*}
   * @memberof Button
   */


  get options() {
    return this.opts.options;
  }
  /**
   * Selects the button.
   *
   * @memberof Button
   */


  select(trigger = true) {
    if (this.selected === false) {
      this.$el.addClass('selected');

      this._onSelect(trigger);
    }
  }
  /**
   * Deselects the button.
   *
   * @memberof Button
   */


  deselect(trigger = true) {
    if (this.selected) {
      this.$el.removeClass('selected');

      this._onDeselect(trigger);
    }
  }
  /**
   * Enables or disables the button.
   * If disabled, button will not react to click events.
   */


  disable(value) {
    this.$el.attr('data-disabled', value ? 1 : 0);
  }

  matches(check) {
    const ids = !(0, _utils.isArray)(check) ? [check] : check;
    return ids.filter(id => this.id === id || this.key === id || this.value === id).length > 0;
  }

  setLoading(loading) {
    if (this.controls) {
      this.controls.setLoading(loading);
    }
  }

  _onSelect(trigger = true) {
    this.setState({
      selected: true
    });

    if (trigger) {
      this.trigger("select"
      /* SELECT */
      , {
        value: this.value
      });

      if (this.opts.onSelect) {
        this.opts.onSelect(this);
      }
    }
  }

  _onDeselect(trigger = true) {
    this.setState({
      selected: false
    });

    if (trigger) {
      this.trigger("deselect"
      /* DESELECT */
      , {
        value: this.value
      });

      if (this.opts.onDeselect) {
        this.opts.onDeselect(this);
      }
    }
  }

  _render() {
    return `
			<div class="awxjs__ui-btn">
				<div class="awxjs__ui-btn-target">
					<div class="awxjs__ui-btn-label">${this.opts.title}</div>
				</div>
			</div>
		`;
  }

  _onAddedToDOM() {
    super._onAddedToDOM();

    this.$el.attr('data-id', this.id);

    if (this.controls) {
      this.controls.addToButton(this);
    }
  }

  _setupEvents() {
    super._setupEvents();

    this.$el.on('click', e => {
      e.stopPropagation();
      const disabled = (0, _utils.toBool)(this.$el.attr('data-disabled')) || false;

      if (!disabled) {
        if (this.selected) {
          if (this.toggleable) {
            this.deselect();
          }
        } else {
          this.select();
        }
      }
    });
    const controls = this.controls;

    if (controls) {
      controls.on('change', e => {
        this.trigger('control:change', Object.assign(Object.assign({}, this.info), {
          control: Object.assign({}, e.data)
        }));
      });

      if (controls.ui.settings && !this.opts.selected) {
        controls.ui.settings.hide();
      }

      if (controls.ui.close) {
        this.ui.target.on('mouseenter', () => {
          if (this.$el.hasClass('selected') && (0, _utils.toBool)(this.$el.attr('data-disabled')) !== true) {
            controls.ui.close.css('opacity', 1);
          }
        }).on('mouseleave', e => {
          controls.ui.close.css('opacity', 0);
        });
      }
    }
  }

  _afterEvents() {
    if (this.opts.selected) {
      this.select();
    }
  }

}

var _default = Button;
exports.default = _default;