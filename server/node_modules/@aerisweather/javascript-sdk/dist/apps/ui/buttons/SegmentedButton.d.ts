import Button from './Button';
import ButtonSegment from './ButtonSegment';
import ButtonSegmentGroup from './ButtonSegmentGroup';
import { ButtonState, SegmentedButtonOptions, ButtonInfo } from '../../types/button.interface';
import { Size } from '../../../types';
/**
 * A `SegmentedButton` is a button subclass that also contains a segmented control within the
 * button, which can be used to change the current value of the button or to use as a secondary
 * value associated with the button's value, such as filters.
 *
 * @export
 * @class SegmentedButton
 * @extends {Button<SegmentedButtonOptions, SegmentedButtonState>}
 */
declare class SegmentedButton extends Button<SegmentedButtonOptions, ButtonState> {
    private _segments;
    private _groups;
    private _groupsById;
    private _value;
    private _expanded;
    /**
     * Value associated with the currently selected segment(s).
     *
     * @readonly
     * @type {*}
     * @memberof SegmentedButton
     */
    get value(): Array<string> | Record<string, any>;
    set value(value: Array<string> | Record<string, any>);
    /**
     * Returns the button metadata, including identifier, key, current value, and selected segments.
     *
     * @readonly
     * @type {ButtonInfo}
     * @memberof SegmentedButton
     */
    get info(): ButtonInfo;
    /**
     * Returns whether the button is currently expanded.
     *
     * @readonly
     * @type {boolean}
     * @memberof SegmentedButton
     */
    get isExpanded(): boolean;
    /**
     * Returns whether the segments are configured as filter options.
     *
     * @readonly
     * @type {boolean}
     * @memberof SegmentedButton
     */
    get isFilter(): boolean;
    /**
     * Initializes and returns a segmented button instance configured with the specified options.
     *
     * @param {SegmentedButtonOptions} [opts]
     * @memberof SegmentedButton
     */
    constructor(opts?: SegmentedButtonOptions);
    size(): Size;
    /**
     * Returns an array of child button segment for the button.
     *
     * @returns {ButtonSegment[]}
     * @memberof SegmentedButton
     */
    segments(): ButtonSegment[];
    /**
     * Returns an array of values from the button segments.
     *
     * @returns {string[]}
     * @memberof SegmentedButton
     */
    segmentValues(): string[];
    /**
     * Returns an array of identifiers from the button segments.
     *
     * @returns {string[]}
     * @memberof SegmentedButton
     */
    segmentIds(includeParent?: boolean): string[];
    segmentInfo(selectedOnly?: boolean): Array<ButtonInfo>;
    /**
     * Returns the button segment groups associated with the button.
     *
     * @returns {ButtonSegmentGroup[]}
     * @memberof SegmentedButton
     */
    segmentGroups(): ButtonSegmentGroup[];
    /**
     * Returns `true` if the button contains a segment option associated with the specified
     * value. This can either be a button segment value or identifier.
     *
     * @param {string} value
     * @returns
     * @memberof SegmentedButton
     */
    containsValue(value: string): boolean;
    containsId(id: string): boolean;
    /**
     * Selects the button segment associated with the specified option. If `select` is `true`, then
     * then parent button will also be selected.
     *
     * @param {string | Record<string, any>} option
     * @param {boolean} [select=true]
     * @memberof SegmentedButton
     */
    selectSegment(option: string | Record<string, any>, select?: boolean): void;
    /**
     * Deselects the button segment associated with the specified option.
     *
     * @param {(string | Record<string, any>)} option
     * @memberof SegmentedButton
     */
    deselectSegment(option: string | Record<string, any>): void;
    private setSegmentSelected;
    /**
     * Returns the selected button segment(s).
     *
     * @returns {ButtonSegment[]}
     * @memberof SegmentedButton
     */
    selectedSegments(): ButtonSegment[];
    protected _onSelect(trigger?: boolean): void;
    protected _onDeselect(trigger?: boolean): void;
    protected _render(data?: any): string;
    private _renderSegments;
    private _renderGroups;
    protected _onAddedToDOM(): void;
    protected _setupEvents(): void;
    private _handleSelectSegment;
    private _handleDeselectSegment;
    private _handleValueChange;
    private _triggerTimeout;
    protected _showSegments(show: boolean): void;
}
export default SegmentedButton;
