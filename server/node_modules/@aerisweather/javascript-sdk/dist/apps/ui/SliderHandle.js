"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Component = _interopRequireDefault(require("./Component"));

var _utils = require("../../utils");

var _DOM = _interopRequireDefault(require("../../display/DOM"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

;
;

class SliderHandle extends _Component.default {
  constructor(opts) {
    super((0, _utils.extend)({}, opts, {
      className: (0, _utils.get)(opts, 'className') ? `ui-slider-range-handle ${opts.className}` : 'ui-slider-range-handle'
    }));

    this._handleMouseDown = e => {
      this.focus();
    };

    this._handleMouseUp = e => {
      if (document.activeElement === this.$el[0]) {
        this.setClickFocus(true);
      }
    };

    this._handleBlur = e => {
      this.setClickFocus(false);
    };

    this.initialize();
    this.$el.on('mousedown', this._handleMouseDown);
    this.$el.on('blur', this._handleBlur);
    (0, _DOM.default)(document).on('mouseup', this._handleMouseUp);
  }

  initialize(data) {
    super.initialize(data);
    this.updatePosition(0, this.opts);
  }

  setClickFocus(focused) {
    this.setState({
      clickFocused: focused
    });

    if (focused) {
      this.$el.addClass('awxjs__ui-slider-range-handle-click-focused');
    } else {
      this.$el.removeClass('awxjs__ui-slider-range-handle-click-focused');
    }
  }

  clickFocus() {
    this.setClickFocus(true);
    this.focus();
  }

  focus() {
    this.$el[0].focus();
  }

  blur() {
    this.$el[0].blur();
  }

  updatePosition(offset, opts) {
    this.$el.css('left', `${offset}%`);

    if (opts) {
      this.$el.attr('aria-valuemin', opts.values.min);
      this.$el.attr('aria-valuemax', opts.values.max);
      this.$el.attr('aria-valuenow', opts.values.current);
      this.$el.attr('aria-disabled', opts.disabled === true);
    }
  }

  _render(data) {
    return `
			<div class="awxjs__ui-slider-range-handle"></div>
		`;
  }

  _afterRender() {
    this.$el.attr('role', 'slider');

    if ((0, _utils.isset)(this.opts.tabindex)) {
      this.$el.attr('tabindex', this.opts.tabindex);
    }
  }

}

var _default = SliderHandle;
exports.default = _default;
module.exports = exports.default;