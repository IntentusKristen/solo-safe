"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _View = _interopRequireDefault(require("./View"));

var _utils = require("../../utils");

var _DOM = _interopRequireDefault(require("../../display/DOM"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class RangeControl extends _View.default {
  constructor(opts) {
    // allow intervals to be passed in a comma-separated list of values
    if (opts.intervals) {
      if ((0, _utils.isString)(opts.intervals)) {
        opts.intervals = `${opts.intervals}`.replace(/\s/g, '').split(',').map(v => parseInt(v, 10));
      } // make sure intervals are array of RangeItem


      if ((0, _utils.isArray)(opts.intervals)) {
        opts.intervals = opts.intervals.map(interval => {
          if ((0, _utils.isPlainObject)(interval) === false) {
            interval = {
              value: interval,
              label: interval
            };
          }

          return interval;
        });
      }
    }

    opts = (0, _utils.extend)({
      className: (0, _utils.get)(opts, 'className') ? `ui-range ${opts.className}` : 'ui-range',
      range: {
        min: 0,
        max: 1,
        interval: 0.25
      },
      ui: {
        intervals: '.awxjs__ui-range-intervals'
      }
    }, opts);
    super(opts);
    this._range = {
      min: Infinity,
      max: -Infinity
    };

    if (this.opts.intervals) {
      this.setIntervals(this.opts.intervals);
    } else if (this.opts.range) {
      const {
        min,
        max,
        interval
      } = this.opts.range;
      this.setRange(min, max, interval);
    }

    this.update();
  }

  get intervals() {
    return this._intervals;
  }

  setIntervals(intervals) {
    if ((0, _utils.isArray)(intervals) && intervals.length > 0) {
      if ((0, _utils.isNumber)(intervals[0])) {
        this._intervals = intervals.map(interval => ({
          value: interval,
          label: `${interval}`
        }));
      } else if ((0, _utils.isPlainObject)(intervals[0])) {
        this._intervals = intervals;
      } // const ar: RangeItem[] = [];
      // intervals.forEach((interval: RangeItem | number) => {
      // 	if (isPlainObject(interval)) {
      // 		ar.push(<RangeItem>interval);
      // 	} else if (isNumber(interval)) {
      // 		ar.push({ value: <number>interval, label: `${interval}` });
      // 	}
      // });
      // this._intervals = ar;


      this.update();
    }
  }

  setRange(min, max, interval) {
    this.opts.range = {
      min,
      max,
      interval
    };
    const items = [];
    let val = min;

    while (val < max) {
      items.push(val);
      val += interval;
    }

    items.push(max);
    this.setIntervals(items);
  }

  value(range) {
    if (range) {
      this._range = range;

      this._select(range.min, range.max);

      return null;
    }

    return this._range;
  }

  _render() {
    let intervals = [];

    if (this._intervals) {
      intervals = this._intervals.map(interval => `<li data-value="${interval.value}">${interval.label}</li>`);
    }

    return `
			<div class="awxjs__ui-range">
				${this.opts.title ? `<div class="awxjs__ui-range-title">${this.opts.title}</div>` : ''}
				<ul class="awxjs__ui-range-intervals">${intervals.join('')}</ul>
			</div>
		`;
  }

  _setupEvents() {
    (0, _DOM.default)('li', this.ui.intervals).on('click', e => {
      this._handleClick(e);
    });
  }

  _handleClick(e) {
    const $el = (0, _DOM.default)(e.target);
    const val = parseFloat($el.data('value'));
    let {
      min,
      max
    } = this.value();

    if (val < min) {
      min = val;
    } else if (val > max) {
      max = val;
    }

    this.value({
      min,
      max
    });
  }

  _select(from, to) {
    if (this.ui.intervals) {
      (0, _DOM.default)('li', this.ui.intervals).forEach(item => {
        const val = parseFloat((0, _DOM.default)(item).data('value'));
        const selected = val >= from && val <= to;

        if (selected) {
          (0, _DOM.default)(item).addClass('selected');
        } else {
          (0, _DOM.default)(item).removeClass('selected');
        }
      });
    }
  }

}

var _default = RangeControl;
exports.default = _default;
module.exports = exports.default;