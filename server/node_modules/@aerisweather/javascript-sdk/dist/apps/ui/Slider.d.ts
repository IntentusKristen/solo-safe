import Component from './Component';
import { Size } from '../../types';
import { ComponentOptions, ComponentState } from '../types';
/**
 * A data type that represents the configuration options for a slider component.
 */
export interface SliderOptions extends ComponentOptions {
    /**
     * Value range.
     *
     * @type {{
     * 		min: number;
     * 		max: number;
     * 	}}
     */
    range: {
        min: number;
        max: number;
    };
    /**
     * A Boolean indicating whether to render tick marks along the slider rail.
     *
     * @type {boolean}
     */
    ticks: boolean;
}
/**
 * A data type that represents a slider's state.
 */
export interface SliderState extends ComponentState {
    /**
     * A Boolean indicating whether the slider is currently being dragged.
     *
     * @type {boolean}
     */
    dragging: boolean;
}
/**
 * A `Slider` is a component....
 */
declare class Slider extends Component<SliderOptions, SliderState> {
    private _x;
    private _mouse;
    /**
     * Initializes and returns a slider instance configured with the specified options.
     *
     * @param {SliderOptions} [opts]
     * @memberof Slider
     */
    constructor(opts?: SliderOptions);
    /**
     * A Boolean indicating whether the slider is currently being dragged.
     *
     * @readonly
     * @type {boolean}
     * @memberof Slider
     */
    get dragging(): boolean;
    /**
     * Returns the size of the slider position indicator/handle.
     *
     * @returns {Size}
     * @memberof Slider
     */
    indicatorSize(): Size;
    /**
     * Returns either the value for the current slider position or the value at the specified
     * position value, if provided.
     *
     * @param {number} [position]
     * @returns {number}
     * @memberof Slider
     */
    value(position?: number): number;
    /**
     * Updates the slider position based on the specified value.
     *
     * @param {number} value
     * @param {boolean} [fireEvents=true]
     * @memberof Slider
     */
    setValue(value: number, fireEvents?: boolean): void;
    position(): number;
    setPosition(pos: number, fireEvents?: boolean): void;
    progress(): number;
    setProgress(progress: number, fireEvents?: boolean): void;
    setDateRange(start: Date, end: Date): void;
    setTicks(ticks: {
        [key: string]: string;
    }): void;
    protected _render(): string;
    protected _layout(): void;
    protected _setupEvents(): void;
    private _increment;
    private _handleDrag;
}
export default Slider;
