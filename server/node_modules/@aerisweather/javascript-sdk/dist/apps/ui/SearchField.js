"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _View = _interopRequireDefault(require("./View"));

var _ActivityIndicator = _interopRequireDefault(require("../../ui/ActivityIndicator"));

var _utils = require("../../utils");

var _DOM = _interopRequireDefault(require("../../display/DOM"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * A `SearchField` is a view component that displays an text input field and is responsible for
 * performing search requests and displaying search results based on the component's configuration.
 *
 * @export
 * @class SearchField
 * @extends {View<SearchFieldOptions>}
 */
class SearchField extends _View.default {
  /**
   * Initializes and returns a search field instance configured with the specified options.
   *
   * @param {*} [opts]
   * @memberof SearchField
   */
  constructor(opts) {
    opts = opts || {};
    opts = (0, _utils.extend)({
      placeholder: 'Search',
      autocomplete: true,
      autoselect: true,
      ui: {
        form: '.awxjs__ui-searchfield-form > form',
        input: '.awxjs__ui-searchfield-form input',
        submit: '.awxjs__ui-searchfield-form button',
        results: '.awxjs__ui-searchfield-results'
      }
    }, opts, {
      className: opts.className ? `ui-searchfield ${opts.className}` : 'ui-searchfield'
    });
    opts.id = opts.id || opts.value;
    super(opts);
    this._selectedIndex = -1;
    this._indicator = new _ActivityIndicator.default({
      size: 30,
      strokeWidth: 2
    });
  }
  /**
   * The underlying text input field value.
   *
   * @type {string}
   * @memberof SearchField
   */


  get value() {
    return this.ui.input.val();
  }

  set value(newValue) {
    this.ui.input.val(newValue);
    this.ui.input.trigger('input');
  }
  /**
   * Updates the displayed search results.
   *
   * @param {any[]} results
   * @memberof SearchField
   */


  setResults(results) {
    this.clear();
    if (!(0, _utils.isArray)(results)) results = [results];
    this._results = (0, _utils.cloneDeep)(results);

    this._renderResults(results);
  }
  /**
   * Resets the field by clearing the input field value and removing all existing results.
   *
   * @memberof SearchField
   */


  reset() {
    this.clear();
    this.ui.input.val('');
    this.ui.results.hide();
    (0, _DOM.default)(document).off('click', this._docHandler);
  }
  /**
   * Clears the existing search results.
   *
   * @memberof SearchField
   */


  clear() {
    this.ui.results.empty();
    this._results = null;
    this._selectedIndex = -1;
    this.$el.removeClass('awxjs__ui-searchfield-expanded');
  }
  /**
   * Focuses the component's input field.
   *
   * @memberof SearchField
   */


  focus() {
    this.ui.input.focus();
  }
  /**
   * Blurs the component's input field.
   *
   * @memberof SearchField
   */


  blur() {
    this.ui.input.blur();
  }

  _render(data) {
    return `
			<div class="awxjs__ui-searchfield">
				<div class="awxjs__ui-searchfield-container">
					<div class="awxjs__ui-searchfield-form">
						<form method="POST">
							<input type="text" value="" placeholder="${this.opts.placeholder}">
							<button>
								<svg version="1.1" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
									<path d="m69.777 61.273 26.562 26.562c4.25 4.3672-4.1328 12.75-8.5 8.5l-26.562-26.562c-14.641 10.508-35.066 8.9727-47.934-3.8945-14.523-14.523-14.523-38.016 0-52.539 14.523-14.523 38.016-14.523 52.539 0 12.867 12.867 14.402 33.293 3.8945 47.934zm-48.051-39.551c-9.8008 9.918-9.8008 25.855 0 35.656 9.918 9.918 25.855 9.918 35.656 0 9.918-9.8008 9.918-25.738 0-35.656-9.8008-9.8008-25.738-9.8008-35.656 0z" fill-rule="evenodd"/>
								</svg>
							</button>
						</form>
					</div>
					<div class="awxjs__ui-searchfield-results"></div>
				</div>
			</div>
		`;
  }

  _onAddedToDOM() {
    super._onAddedToDOM();

    this._indicator.appendTo(this.ui.form);
  }

  _setupEvents() {
    super._setupEvents();

    const field = this.ui.input; // only perform query if user has stopped typing after certain amount of time

    const handleInput = (0, _utils.debounce)(() => {
      const query = field.val();
      this.trigger("change:value"
      /* CHANGE_VALUE */
      , {
        value: query
      });

      if (query.length > 3) {
        this._search(field.val());
      } else if (query.length === 0) {
        this.reset();
      } else {
        this._renderResults([]);
      }
    }, 300);

    this._docHandler = e => {
      this._handleDocClick(e);
    };

    this._keyHandler = e => {
      this._listenForKeys(e);
    };

    if (this.opts.autocomplete) {
      field.on('input', handleInput);
    } else {
      field.on('input', e => {
        if (field.val() === '' || this._results && this._results.length > 0) {
          this.reset();
        }
      });
    }

    this.ui.form.on('submit', e => {
      e.preventDefault();

      this._search(field.val());

      this.trigger("submit"
      /* SUBMIT */
      , {
        value: field.val()
      });
      return false;
    });
    this.ui.submit.on('click', e => {
      e.preventDefault();
      const query = field.val();

      if (!(0, _utils.isEmpty)(query)) {
        this._search(query);

        this.trigger("submit"
        /* SUBMIT */
        , {
          value: query
        });
      }
    });
    field.on('focus', e => {
      this.$el.addClass('awxjs__ui-searchfield-focused'); // remove any existing listeners for the same events before adding to prevent duplicate triggers!

      (0, _DOM.default)(document).off('keyup keypress', this._keyHandler);
      (0, _DOM.default)(document).on('keyup keypress', this._keyHandler);
      (0, _DOM.default)(document).off('click', this._docHandler);
      (0, _DOM.default)(document).on('click', this._docHandler);
    });
    field.on('blur', e => {
      this.$el.removeClass('awxjs__ui-searchfield-focused'); // this.reset();

      (0, _DOM.default)(document).off('keyup keypress', this._keyHandler);
    });
  }

  _search(query) {
    const requestTask = (0, _utils.get)(this.opts, 'data.request');

    if (!requestTask) {
      console.error('No request task defined for SearchField, check your component configuration.');
      return;
    }

    if ((0, _utils.isFunction)(requestTask)) {
      this._indicator.startAnimating();

      requestTask(query).then(results => {
        this._indicator.stopAnimating();

        this.setResults(results);
      });
    }
  }

  _renderResults(results) {
    this.trigger("update:results"
    /* UPDATE_RESULTS */
    , results);

    if (results) {
      if (results.length === 0) {
        this.ui.results.hide();
        this.$el.removeClass('awxjs__ui-searchfield-expanded');
        return;
      }

      const formatter = (0, _utils.get)(this.opts, 'data.formatter');
      const rows = results.map((result, index) => `<li data-result="${index}">${formatter(result)}</li>`);
      this.ui.results.html(`<ul>${rows.join('')}</ul>`);
      this.$el.addClass('awxjs__ui-searchfield-expanded');
      (0, _DOM.default)('li', this.ui.results).on('click', e => {
        this._handleResultClick(e);
      }).on('mouseover', e => {
        this._handleResultMouseover(e);
      });
      this.ui.results.show(); // if configured to auto-select, always select the first result in the payload

      if (rows.length > 0 && this.opts.autoselect) {
        this._selectResultAtIndex(0);
      }
    } else {
      this.reset();
    }
  }

  _handleResultMouseover(e) {
    const $el = (0, _DOM.default)(e.target);
    const index = parseInt($el.data('result'), 10);

    this._selectResultAtIndex(index);
  }

  _handleResultClick(e) {
    const $el = (0, _DOM.default)(e.target);
    const index = parseInt($el.data('result'), 10);
    this.trigger("select"
    /* SELECT */
    , {
      result: (0, _utils.cloneDeep)(this._results[index]),
      index
    });
    this.reset();
  }

  _selectResultAtIndex(index) {
    if (index !== this._selectedIndex) {
      const $li = (0, _DOM.default)('li', this.ui.results);
      $li.removeClass('selected');

      if (index >= 0) {
        $li.eq(index).addClass('selected');
      }

      this._selectedIndex = index;
    }
  }

  _handleDocClick(e) {
    const closest = (0, _DOM.default)(e.target).closest('.awxjs__ui-searchfield-container');

    if (!closest || closest.length === 0) {
      this.reset();
    }
  }

  _listenForKeys(e) {
    const key = (e.key || '').toLowerCase();

    if (e.type === 'keypress') {
      if (key === 'enter' || e.keyCode === 13) {
        e.preventDefault();

        if (this.opts.autocomplete || this._results && this._results.length > 0) {
          this.trigger("key:enter"
          /* KEY_ENTER */
          ); // trigger selection event if user used arrow keys to select value

          if (this._selectedIndex > -1 && this._results) {
            this.trigger("select"
            /* SELECT */
            , {
              result: (0, _utils.cloneDeep)(this._results[this._selectedIndex]),
              index: this._selectedIndex
            });
            this.reset();
          }
        } else {
          this._search(this.ui.input.val());
        }
      }
    } else if (e.type === 'keyup') {
      if (key === 'escape' || key === 'esc' || e.keyCode === 27) {
        this.trigger("key:escape"
        /* KEY_ESCAPE */
        );
        this.reset();
      } else if (e.keyCode === 40) {
        // down key
        let index = this._selectedIndex;

        if (this._results && index < this._results.length - 1) {
          index += 1;
        } else if (index === -1) {
          index = 0;
        }

        this._selectResultAtIndex(index);
      } else if (e.keyCode === 38) {
        // up key
        let index = this._selectedIndex;

        if (index > 0) {
          index -= 1;
        }

        this._selectResultAtIndex(index);
      }
    }
  }

}

var _default = SearchField;
exports.default = _default;
module.exports = exports.default;