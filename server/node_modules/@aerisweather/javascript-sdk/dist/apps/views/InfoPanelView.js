"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _View = _interopRequireDefault(require("../ui/View"));

var _utils = require("../../utils");

var _defaultInfoPanelViews = _interopRequireDefault(require("../defaultInfoPanelViews"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * An `InfoPanelView` is a view component that renders content associated with a single dataset or
 * content type within an info panel's content view.
 *
 * @export
 * @class InfoPanelView
 * @extends {View<InfoPanelViewOptions>}
 */
class InfoPanelView extends _View.default {
  /**
   * Initializes and returns an info panel view instance configured with the specified
   * configuration options and optional data.
   *
   * @param {InfoPanelViewOptions} [opts]
   * @param {*} [data]
   * @memberof InfoPanelView
   */
  constructor(opts, data) {
    opts = (0, _utils.extend)({}, opts, {
      className: opts.className ? `app__ui-panel-info__view ${opts.className}` : 'app__ui-panel-info__view'
    });

    if ((0, _utils.isString)(opts.renderer)) {
      const section = InfoPanelView.getSection(opts.renderer);

      if (section) {
        opts = (0, _utils.extend)({}, section, opts, {
          renderer: section.renderer
        });
      }
    }

    if (opts.id) {
      opts.className += ` awxjs__app__ui-panel-info__view-${opts.id}`;
    }

    super(opts, data);
  }

  get static() {
    return this.opts.static;
  }

  get request() {
    return this.opts.request;
  }

  addToContentView(view, index = -1) {
    const initializer = this.opts.init;
    this.addTo(view.$el, false, index);

    if (initializer && (0, _utils.isFunction)(initializer)) {
      initializer(this, view);
    }
  }
  /** Class Methods */

  /**
   * Adds a view to the cache using the specified key identifier.
   *
   * @static
   * @param {string} key
   * @param {InfoPanelSectionView} section
   * @memberof InfoPanelView
   */


  static setSection(key, section) {
    _defaultInfoPanelViews.default[key] = section;
  }
  /**
   * Returns the cached view associated with the key identifier, if any.
   *
   * @static
   * @param {string} key
   * @returns {InfoPanelSectionView}
   * @memberof InfoPanelView
   */


  static getSection(key) {
    return _defaultInfoPanelViews.default[key];
  }

  _render(data) {
    let content = '';
    let renderer = this.opts.renderer;

    if (this.opts.requiresData && (0, _utils.isEmpty)(data)) {
      renderer = null;
    }

    if (renderer) {
      // update renderer to account for title and passing renderers to render function
      const sections = Object.keys(_defaultInfoPanelViews.default).reduce((previous, key) => {
        previous[key] = _defaultInfoPanelViews.default[key].renderer;
        return previous;
      }, {}); // if (this.opts.requiresData && isEmpty(data)) {
      // 	return '';
      // }

      const title = this.opts.title ? `<div class="awxjs__app__ui-panel-info__view-title">${this.opts.title}</div>` : '';

      if ((0, _utils.isFunction)(renderer)) {
        const renderFn = renderer;
        content = `
					${title}
					${renderFn(data || {}, sections)}
				`;
      } else if ((0, _utils.isString)(renderer)) {
        content = `
					${title}
					${renderer}
				`;
      }
    }

    return `
			<div class="awxjs__${this.opts.className}">${content}</div>
		`;
  }

}
/**
 * Built-in views keyed by unique type identifiers.
 *
 * @static
 * @memberof InfoPanelView
 */


InfoPanelView.cached = _defaultInfoPanelViews.default;
var _default = InfoPanelView;
exports.default = _default;
module.exports = exports.default;