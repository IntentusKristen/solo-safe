"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _utils = require("../../utils");

var _Component = _interopRequireDefault(require("../ui/Component"));

var _RangeSlider = _interopRequireDefault(require("../ui/RangeSlider"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

const CONTROL_TYPES = {
  opacity: {
    type: 'slider',
    label: 'Opacity',
    options: {
      value: [100],
      range: {
        min: 0,
        max: 100
      },
      marksEvery: '% 50',
      marksFormatter: v => `${v}%`,
      step: 5,
      dots: false,
      tooltip: value => `${value}%`
    }
  }
};

class LayerControlsView extends _Component.default {
  constructor(opts) {
    super(opts);
    this.initialize();
  }

  _render(data) {
    return `
			<div class="awxjs__ui-layer-controls"></div>
		`;
  }

  _setupEvents() {
    super._setupEvents();

    const controls = this.opts.controls || [];
    controls.map(config => {
      const {
        type
      } = config,
            rest = __rest(config, ["type"]);

      const keys = Object.keys(CONTROL_TYPES);

      if (keys.indexOf(type) > -1) {
        return (0, _utils.extend)({}, CONTROL_TYPES[type], rest);
      }

      return config;
    }).forEach(({
      type,
      id,
      label,
      options
    }) => {
      const controlId = id || label.replace(/\s+/, '-').toLowerCase();

      if (type === 'slider') {
        const slider = new _RangeSlider.default((0, _utils.extend)(Object.assign(Object.assign({}, options), {
          title: label,
          width: 150
        }), {}));
        slider.addTo(this.$el);
        slider.on('change', e => {
          let value = (0, _utils.get)(e, 'data.value');

          if (value && (0, _utils.isset)(value[0])) {
            value = value[0];
          }

          this.trigger('change', {
            id: controlId,
            value
          });
        });
      }
    });
  }

}

var _default = LayerControlsView;
exports.default = _default;
module.exports = exports.default;