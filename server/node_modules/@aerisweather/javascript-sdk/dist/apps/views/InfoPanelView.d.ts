import View from '../ui/View';
import InfoPanelContentView from './InfoPanelContentView';
import ApiRequest from '../../network/api/ApiRequest';
import Account from '../../account/Account';
import { InfoPanelSectionView, InfoPanelViewOptions } from '../types/panel.interface';
/**
 * An `InfoPanelView` is a view component that renders content associated with a single dataset or
 * content type within an info panel's content view.
 *
 * @export
 * @class InfoPanelView
 * @extends {View<InfoPanelViewOptions>}
 */
declare class InfoPanelView<T extends InfoPanelViewOptions> extends View<T> {
    /**
     * Built-in views keyed by unique type identifiers.
     *
     * @static
     * @memberof InfoPanelView
     */
    static cached: {
        [key: string]: InfoPanelSectionView;
    };
    get static(): boolean;
    get request(): (account: Account, data: any, config?: any) => ApiRequest;
    /**
     * Initializes and returns an info panel view instance configured with the specified
     * configuration options and optional data.
     *
     * @param {InfoPanelViewOptions} [opts]
     * @param {*} [data]
     * @memberof InfoPanelView
     */
    constructor(opts?: InfoPanelViewOptions, data?: any);
    addToContentView(view: InfoPanelContentView, index?: number): void;
    /** Class Methods */
    /**
     * Adds a view to the cache using the specified key identifier.
     *
     * @static
     * @param {string} key
     * @param {InfoPanelSectionView} section
     * @memberof InfoPanelView
     */
    static setSection(key: string, section: InfoPanelSectionView): void;
    /**
     * Returns the cached view associated with the key identifier, if any.
     *
     * @static
     * @param {string} key
     * @returns {InfoPanelSectionView}
     * @memberof InfoPanelView
     */
    static getSection(key: string): InfoPanelSectionView;
    protected _render(data?: any): string;
}
export default InfoPanelView;
