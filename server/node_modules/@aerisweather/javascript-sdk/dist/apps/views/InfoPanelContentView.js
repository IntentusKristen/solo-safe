"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _InfoPanelView = _interopRequireDefault(require("./InfoPanelView"));

var _View = _interopRequireDefault(require("../ui/View"));

var _utils = require("../../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * An `InfoPanelContentView` is a view component that manages and renders a series of individual
 * views to display within as an info panel's content. This object also requests remote data
 * required for the view as needed.
 *
 * @export
 * @class InfoPanelContentView
 * @extends {View<InfoPanelContentViewOptions>}
 */
class InfoPanelContentView extends _View.default {
  /**
   * Initializes and returns an info panel content view configured with the specified options.
   *
   * @param {InfoPanelContentViewOptions} [opts]
   * @param {*} [data]
   * @memberof InfoPanelContentView
   */
  constructor(opts, data) {
    opts = (0, _utils.extend)({
      units: "imperial"
      /* Imperial */
      ,
      className: opts.className ? `app__ui-panel-info__content-view ${opts.className}` : 'app__ui-panel-info__content-view'
    }, opts);
    super(opts, data);
    this.units = opts.units;

    if ((0, _utils.isArray)(opts.views)) {
      this._views = [];
      opts.views.forEach(view => {
        if ((0, _utils.isPlainObject)(view)) {
          const config = view;
          view = new _InfoPanelView.default(config);
        }

        if (view instanceof _InfoPanelView.default) {
          this._views.push(view);
        }
      });
    }
  }
  /**
   * Array of views associated with the content view.
   *
   * @readonly
   * @type {InfoPanelView[]}
   * @memberof InfoPanelContentView
   */


  get views() {
    return this._views;
  }

  get units() {
    return this._units;
  }

  set units(value) {
    if (value !== this._units) {
      this._units = value;
      this.trigger('change:units', {
        units: value
      });
      this.update();
    }
  }
  /**
   * Requests data for the content view and renders the view with the new data.
   *
   * @param {*} [params] Parameters to use with the data request (optional)
   * @param {*} [append] Data to append to the loaded data that is also used in the content
   * view (optional)
   * @memberof InfoPanelContentView
   */


  load(account, params, append) {
    let request = (0, _utils.isFunction)(this.opts.request) ? this.opts.request(append) : this.opts.request; // if no request defined for the content view, iterate through each section view and determine if there are requests
    // defined per each to build a single request from

    if (!request) {
      const requests = [];

      this._views.forEach(view => {
        if (view.request && (0, _utils.isFunction)(view.request)) {
          const result = view.request(account, params, view.opts.config);

          if (result) {
            requests.push(result);
          }
        }
      });

      if (requests.length > 0) {
        request = account.api();
        requests.forEach(r => {
          if (r.requests && r.requests.length > 0) {
            r.requests.forEach(rr => request.addRequest(rr));
          } else {
            request.addRequest(r);
          }
        });
      }
    }

    if (request) {
      if (params) {
        request.setParams(params);
      }

      this.trigger('load:start');
      request.get().then(result => {
        let data = result.data || {}; // handle batch request by grouping data keyed by endpoint path

        if (data.responses && data.responses.length > 0) {
          const sections = {};
          data.responses.forEach(response => {
            const key = response.request.replace(/\?.*$/, '').replace(/^\//, '').replace(/(\/|,)/g, '_');
            sections[key] = response.response;
          });
          data = sections;
        }

        data = Object.assign(Object.assign({}, data), append);
        this.update(data);
        this.trigger('load:done');
      }).catch(error => {
        console.error('awxjs.InfoPanelContentView.load', error);
      });
    } else if (append) {
      this.update(append);
    }
  }

  update(data) {
    super.update(data, false);

    if (!(0, _utils.isset)(this.data) || Object.keys(this.data).length === 0) {
      return;
    }

    if (this.$el) {
      if (this.views) {
        this.views.forEach((view, index) => {
          const viewData = this._dataForView(view);

          if (view.isMounted === false) {
            this._renderView(view, data, index);
          } else if (view.static !== true) {
            view.update(viewData);
          }
        });

        this._afterRender();
      }
    }
  }

  _render(data) {
    return `
			<div class="awxjs__app__ui-panel-info__content-view"></div>
		`;
  }

  _renderView(view, data = {}, index = -1) {
    const viewData = this._dataForView(view); // const allow = isset(viewData) && ((isPlainObject(viewData) && Object.keys(viewData).length > 0) || (isArray(viewData) && viewData.length > 0));


    view.update(viewData);
    view.addToContentView(this, index);
  }

  _dataForView(view) {
    const data = this.data;
    const viewData = (0, _utils.isFunction)(view.opts.data) ? view.opts.data((0, _utils.cloneDeep)(data), view.opts.config) : data;

    if (viewData) {
      viewData.units = this.units;
    }

    return viewData;
  }

  _afterRender() {
    if (this.$el.parent()) {
      this.trigger('update');
    }
  }

  _onAddedToDOM() {
    super._onAddedToDOM();

    const data = this.data;

    if (this.views) {
      this.views.forEach(view => this._renderView(view, data));
    }
  }

}

var _default = InfoPanelContentView;
exports.default = _default;
module.exports = exports.default;