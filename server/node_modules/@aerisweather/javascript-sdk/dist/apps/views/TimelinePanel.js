"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Panel = _interopRequireDefault(require("../ui/Panel"));

var _TimeSlider = _interopRequireDefault(require("./TimeSlider"));

var _ActivityIndicator = _interopRequireDefault(require("../../ui/ActivityIndicator"));

var _RangeSlider = _interopRequireDefault(require("../ui/RangeSlider"));

var _Tooltip = _interopRequireDefault(require("../ui/Tooltip"));

var _utils = require("../../utils");

var _layout = require("../../utils/layout");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * A `TimelinePanel` is a panel component that renders and manages a timeline animation slider
 * control that allows a user to scrub an animation's current time position and change the
 * animation start/end time range.
 *
 * @export
 * @class TimelinePanel
 * @extends {Panel<TimelinePanelOptions, PanelState>}
 */
class TimelinePanel extends _Panel.default {
  /**
   * Initializes and returns a timeline panel instance configured with the specified animation and options.
   * @param {Animation} animation
   * @param {TimelinePanelOptions} [opts]
   * @memberof TimelinePanel
   */
  constructor(animation, opts) {
    super((0, _utils.extend)({
      className: `app__ui-panel-timeline${!(0, _utils.isEmpty)(opts.className) ? ` ${opts.className}` : ''}`,
      range: {},
      formatters: {
        time: 'h:mm a',
        day: 'EEE, MMM d'
      },
      ui: {
        left: '.awxjs__app__ui-panel-timeline-left',
        center: '.awxjs__app__ui-panel-timeline-center',
        right: '.awxjs__app__ui-panel-timeline-right',
        controls: '.awxjs__app__ui-panel-timeline-center',
        timeline: '.awxjs__app__ui-panel-timeline-right',
        play: '.awxjs__ui-btn-play',
        now: '.awxjs__ui-btn-now',
        time: '.awxjs__app__ui-panel-timeline-daytime',
        settings: '.awxjs__ui-btn-settings'
      },
      icon: `
				<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 96.3 85.4">
					<g>
						<path d="M75.2,39.9h9.4v5.2h-9.4L75.2,39.9z"/>
						<path d="M49,64.9h5.2v9.4H49V64.9z"/>
						<path d="M65.5,24.9l6.6-6.6l3.7,3.7l-6.6,6.6L65.5,24.9z"/>
						<path d="M69.2,56.5l6.6,6.6l-3.7,3.7l-6.6-6.6L69.2,56.5z"/>
						<path d="M36.6,56.7l12.4-12.4l0-25.1h8v28.3c-0.6,0.6-14.8,14.9-14.8,14.9L36.6,56.7z"/>
						<path d="M53.6,0v7.5c19.4,0,35.2,15.8,35.2,35.2c0,19.4-15.8,35.2-35.2,35.2c-17.8,0-32.6-13.3-34.9-30.5l5.4,5.3l5.3-5.3
							L14.7,32.7L0,47.4l5.3,5.3l5.8-5.8c2.1,21.6,20.4,38.5,42.5,38.5c23.5,0,42.7-19.2,42.7-42.7S77.1,0,53.6,0L53.6,0z"/>
					</g>
				</svg>
			`
    }, opts));
    this._activityCount = 0;
    const customMarks = (0, _utils.get)(opts, 'range.marks');
    const vp = (0, _layout.viewportSizeClass)();
    this._animation = animation;
    this._timeline = new _TimeSlider.default(animation);
    this._indicator = new _ActivityIndicator.default({
      size: 30,
      strokeWidth: 2
    });
    this._slider = new _RangeSlider.default((0, _utils.extend)({
      title: 'Time Range <span>(hours)</span>',
      width: vp.width === 'compact' ? 200 : 300,
      value: [-6, 0],
      range: {
        min: -24,
        max: 24
      },
      marksEvery: (0, _utils.get)(opts, 'range.marksEvery') || '% 12',
      marks: customMarks || {
        0: 'Now'
      },
      step: vp.width === 'compact' ? 6 : 2,
      tooltip: value => {
        if (value === 0) {
          return 'Now';
        }

        const prefix = value > 0 ? '+' : '';
        return `${prefix}${value} hours`;
      }
    }, this.opts.range));
  }

  close() {
    super.close();

    if (this._tooltip) {
      this._tooltip.hide();
    }
  }
  /**
   * Updates the string format for the time and day displayed in the panel.
   * Values must be a string format supported by the date-fns library: https://date-fns.org/docs/format
   *
   * @param {{ time?: string, day?: string }} value
   * @memberof TimelinePanel
   */


  setFormatters(value) {
    this.opts.formatters = (0, _utils.extend)({}, this.opts.formatters, value);

    if ((0, _utils.isset)(this._time)) {
      this._setTime(this._time);
    }

    this._timeline.setFormatters({
      time: this.opts.formatters.time
    });
  } // public contentSize(): Size {
  // 	const size = {
  // 		width: 0, height: 0
  // 	};
  // 	const $content = this.getContentContainer();
  // 	size.height = $content.outerHeight(true);
  // 	size.width = $content.outerWidth(true);
  // 	$('.awxjs__ui-cols', this.$el).children().forEach((col: any) => {
  // 		const $el = $(col);
  // 		size.width += $el.outerWidth(true);
  // 	});
  // 	return size;
  // }


  setSize(width, height) {
    const insets = this.ui.content.padding();
    const left = this.ui.left.outerWidth(true);
    const center = this.ui.center.outerWidth(true);
    const right = this.ui.right.outerWidth(true);
    let barWidth = width;
    barWidth -= insets.left + insets.right;
    barWidth -= left + center; // subtract bar margins

    const margins = this._timeline.$el.margins();

    barWidth -= margins.left + margins.right;
    barWidth -= 20;
    barWidth = Math.floor(barWidth);

    const ts = this._timeline.size();

    if (ts.width !== barWidth) {
      if (barWidth < 200) {
        this.ui.settings.hide();

        this._timeline.hide();
      } else {
        this.ui.settings.show();

        this._timeline.show();

        this._timeline.setSize(barWidth, 0);
      }
    } // super.setSize(width, height);

  }

  showLoading(loading) {
    const increment = loading ? 1 : -1;
    this._activityCount = Math.max(0, this._activityCount + increment);

    if (this._activityCount > 0) {
      this._indicator.startAnimating();
    } else {
      this._indicator.stopAnimating();
    }
  }

  _render() {
    return `
			<div class="awxjs__app__ui-panel-timeline">
				<div class="awxjs__app__ui-panel-container">
					<div class="awxjs__app__ui-panel-toolbar">
						${this.opts.title ? `<div class="awxjs__app__ui-panel-title">${this.opts.title}</div>` : ''}
						<button class="awxjs__app__ui-panel-close">
							<svg version="1.1" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
								<path d="m22.699 77.301c0.80078 0.80078 1.8008 1.1992 2.8008 1.1992s2-0.39844 2.8008-1.1992l21.699-21.602 21.699 21.699c0.80078 0.80078 1.8008 1.1992 2.8008 1.1992s2-0.39844 2.8008-1.1992c1.6016-1.6016 1.6016-4.1016 0-5.6992l-21.602-21.699 21.699-21.699c1.6016-1.6016 1.6016-4.1016 0-5.6992-1.6016-1.6016-4.1016-1.6016-5.6992 0l-21.699 21.699-21.699-21.602c-1.6016-1.6016-4.1016-1.6016-5.6992 0-1.6016 1.6016-1.6016 4.1016 0 5.6992l21.699 21.602-21.602 21.699c-1.5977 1.5-1.5977 4.1016 0 5.6016z"/>
							</svg>
						</button>
					</div>
					<div class="awxjs__app__ui-panel-content">
						<div class="awxjs__ui-cols align-center">
							<div class="awxjs__app__ui-panel-timeline-left">
								<div class="awxjs__app__ui-panel-timeline-daytime"></div>
							</div>
							<div class="awxjs__app__ui-panel-timeline-center">
								<div class="awxjs__app__ui-panel-timeline-controls awxjs__ui-row align-center">
									<button class="awxjs__ui-btn awxjs__ui-btn-icon awxjs__ui-btn-play">
										<svg width="100pt" height="100pt" version="1.1" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
											<path transform="scale(.3003)" d="m260 166.99l-93.006 54.008-93.994 52.994v-214.99l93.994 53.995zm0 0" fill-rule="evenodd" />
										</svg>
									</button>
									<button class="awxjs__ui-btn awxjs__ui-btn-now">Now</button>
								</div>
							</div>
							<div class="awxjs__app__ui-panel-timeline-right"></div>
						</div>
						<div class="awxjs__ui-btn-icon awxjs__ui-btn-settings">
							<svg version="1.1" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
								<path d="m94.801 40.801-10.602-1.8008c-0.60156-1.8984-1.3984-3.6992-2.3008-5.5l6.1992-8.6992c0.89844-1.3008 0.80078-3.1016-0.30078-4.1992l-8.5-8.5c-1.1016-1.1016-2.8984-1.3008-4.1992-0.30078l-8.6992 6.1992c-1.6992-0.89844-3.6016-1.6992-5.5-2.3008l-1.6992-10.5c-0.30078-1.6016-1.6016-2.6992-3.1992-2.6992h-12c-1.6016 0-2.8984 1.1016-3.1992 2.6992l-1.8008 10.602c-1.8984 0.60156-3.6992 1.3984-5.5 2.3008l-8.6992-6.1992c-1.3008-0.89844-3.1016-0.80078-4.1992 0.30078l-8.5 8.5c-1.1016 1.1016-1.3008 2.8984-0.30078 4.1992l6.1992 8.6992c-0.89844 1.6992-1.6992 3.6016-2.3008 5.5l-10.5 1.6992c-1.6016 0.30078-2.6992 1.6016-2.6992 3.1992v12c0 1.6016 1.1016 2.8984 2.6992 3.1992l10.602 1.8008c0.60156 1.8984 1.3984 3.6992 2.3008 5.5l-6.1992 8.6992c-0.89844 1.3008-0.80078 3.1016 0.30078 4.1992l8.5 8.5c1.1016 1.1016 2.8984 1.3008 4.1992 0.30078l8.6992-6.1992c1.6992 0.89844 3.6016 1.6992 5.5 2.3008l1.8008 10.602c0.30078 1.6016 1.6016 2.6992 3.1992 2.6992h12c1.6016 0 2.8984-1.1016 3.1992-2.6992l1.6992-10.703c1.8984-0.60156 3.6992-1.3984 5.5-2.3008l8.6992 6.1992c1.3008 0.89844 3.1016 0.80078 4.1992-0.30078l8.5-8.5c1.1016-1.1016 1.3008-2.8984 0.30078-4.1992l-6.1992-8.6992c0.89844-1.6992 1.6992-3.6016 2.3008-5.5l10.602-1.8008c1.6016-0.30078 2.6992-1.6016 2.6992-3.1992v-11.898c-0.10156-1.6016-1.2031-2.8984-2.8008-3.1992zm-44.801 26.301c-9.5 0-17.102-7.6992-17.102-17.102 0-9.5 7.6992-17.102 17.102-17.102 9.3984 0 17.102 7.6016 17.102 17.102s-7.6016 17.102-17.102 17.102z"/>
							</svg>
						</div>
					</div>
					<div class="awxjs__app__ui-panel-toggle">${this.opts.icon}</div>
				</div>
			</div>
		`;
  }

  _onAddedToDOM() {
    super._onAddedToDOM();

    this._timeline.addTo(this.ui.timeline);

    this._indicator.appendTo(this.ui.timeline);

    this._setTime(this._animation.currentTime);
  }

  _setupEvents() {
    super._setupEvents();

    this._animation.on('load:start play', () => {
      this.ui.play.html(`
				<svg width="100pt" height="100pt" version="1.1" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
					<path d="m76.5 15h-53c-4.6875 0-8.5 3.8125-8.5 8.5v53c0 4.6875 3.8125 8.5 8.5 8.5h53c4.6875 0 8.5-3.8125 8.5-8.5v-53c0-4.6875-3.8125-8.5-8.5-8.5z"/>
				</svg>
			`);
    }).on('stop', () => {
      this.ui.play.html(`
				<svg width="100pt" height="100pt" version="1.1" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
					<path transform="scale(.3003)" d="m260 166.99l-93.006 54.008-93.994 52.994v-214.99l93.994 53.995zm0 0" fill-rule="evenodd" />
				</svg>
			`);
    }).on('advance', e => {
      const {
        time
      } = e.data;

      if (time) {
        this._setTime(time);
      }
    }).on('start:change end:change', () => {
      this._slider.value = [this._animation.startOffset() / (3600 * 1000), this._animation.endOffset() / (3600 * 1000)];
      this.trigger('change:range', {
        start: this._animation.startDate(),
        end: this._animation.endDate()
      });
    });

    if (this._indicator) {
      this._animation.on('load:start', () => {
        this.showLoading(true);
      }).on('load:done', () => {
        this.showLoading(false);
      });
    }

    this._timeline.slider.on('change', e => {
      const {
        progress
      } = e.data;

      if ((0, _utils.isset)(progress)) {
        const anim = this._animation;
        const delta = anim.endDate().getTime() - anim.startDate().getTime();
        const time = Math.round(anim.startDate().getTime() + delta * progress);

        this._setTime(time);
      }
    });

    this._slider.on('change:end', e => {
      const [min, max] = e.data.value;

      this._animation.setStartOffset(min * 3600 * 1000);

      this._animation.setEndOffset(max * 3600 * 1000);
    });

    this.ui.play.on('click', () => {
      if (this._animation.isAnimating() || this._animation.isLoading()) {
        this._animation.stop();
      } else {
        this._animation.play();
      }
    });
    this.ui.now.on('click', () => {
      this._animation.goToInit();
    });

    if (this.ui.settings) {
      this.ui.settings.on('click', () => {
        if (!this._tooltip) {
          this._slider.initialize(); // const tooltip = new Tooltip(this._range.$el);


          const tooltip = new _Tooltip.default(this._slider.$el, {
            showClose: true
          });
          tooltip.attachTo(this.ui.settings);
          this._tooltip = tooltip;
        }

        if (this._tooltip.visible) {
          this._tooltip.hide();
        } else {
          this._tooltip.show();
        }
      });
    }
  }

  _setTime(time) {
    this._time = time;

    if (!this.ui.time) {
      return;
    }

    const date = new Date(time);
    this.ui.time.html(`
			<div class="awxjs__app__ui-panel-timeline-time">${(0, _utils.formatDate)(date, this.opts.formatters.time)}</div>
			<div class="awxjs__app__ui-panel-timeline-day">${(0, _utils.formatDate)(date, this.opts.formatters.day)}</div>
		`);
  }

}

var _default = TimelinePanel;
exports.default = _default;
module.exports = exports.default;