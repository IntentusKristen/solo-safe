"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Panel = _interopRequireDefault(require("../ui/Panel"));

var _SearchField = _interopRequireDefault(require("../ui/SearchField"));

var _utils = require("../../utils");

var _strings = require("../../utils/strings");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * A `PlaceSearchPanel` is a panel component that displays and manages a search field component
 * that can be used for searching for and selecting locations.
 *
 * @export
 * @class PlaceSearchPanel
 * @extends {PanelView<PlaceSearchPanelOptions, PanelState>}
 */
class PlaceSearchPanel extends _Panel.default {
  /**
   * Initializes and returns a place search panel instance configured with the specified options.
   *
   * @param {PlaceSearchPanelOptions} [opts]
   * @memberof PlaceSearchPanel
   */
  constructor(opts) {
    opts = (0, _utils.extend)({
      field: {
        placeholder: 'Search for place...',
        data: {
          request: query => new Promise((resolve, reject) => {
            this._prepareServiceForQuery(query);

            this._service.get().then(result => {
              let data = result.data || {};

              if (data.responses) {
                let output = [];
                data.responses.forEach(response => {
                  if (response.response) {
                    output = output.concat(response.response);
                  }
                });
                data = output;
              }

              resolve(data);
            }).catch(error => {
              reject(error);
            });
          }),
          formatter: result => {
            if (!result) return null;
            if (!result.place) return null;
            const parts = [(0, _strings.ucwords)(result.place.name)];

            if (result.place.country === 'US') {
              parts.push(result.place.state.toUpperCase());
            } else {
              parts.push((0, _strings.ucwords)(result.place.countryFull));
            }

            let val = parts.join(', ');

            if (result.type && result.type === 'airport') {
              val += ' (Airport)';
            }

            return val;
          }
        }
      },
      icon: `
				<svg version="1.1" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
					<path d="m69.777 61.273 26.562 26.562c4.25 4.3672-4.1328 12.75-8.5 8.5l-26.562-26.562c-14.641 10.508-35.066 8.9727-47.934-3.8945-14.523-14.523-14.523-38.016
						0-52.539 14.523-14.523 38.016-14.523 52.539 0 12.867 12.867 14.402 33.293 3.8945 47.934zm-48.051-39.551c-9.8008 9.918-9.8008 25.855 0 35.656 9.918 9.918
						25.855 9.918 35.656 0 9.918-9.8008 9.918-25.738 0-35.656-9.8008-9.8008-25.738-9.8008-35.656 0z" fill-rule="evenodd"/>
				</svg>
			`
    }, opts);
    opts.className = opts && opts.className ? `app__ui-panel-search ${opts.className}` : 'app__ui-panel-search';
    super(opts);
    this._account = this.opts.account;
  }
  /**
   * The underlying search field component.
   *
   * @readonly
   * @type {SearchField}
   * @memberof PlaceSearchPanel
   */


  get field() {
    return this._field;
  } // public contentSize(): Size {
  // 	const size = {
  // 		width: 0, height: 0
  // 	};
  // 	const $content = this.getContentContainer();
  // 	size.height = $('.awxjs__ui-searchfield-container', this.$el).outerHeight(true) + $('.awxjs__app__ui-panel-toolbar', this.$el).outerHeight(true);
  // 	size.width = $('input', this._field.$el).outerWidth(true);
  // 	return size;
  // }


  _onAddedToDOM() {
    super._onAddedToDOM();

    if (!this._field) {
      this._field = new _SearchField.default(this.opts.field);
    }

    this._field.addTo(this.ui.content);
  }

  _setupEvents() {
    super._setupEvents();

    this._field.on('select', e => {
      this.trigger('select', e.data);
    }).on("change:value"
    /* CHANGE_VALUE */
    , e => {
      this.trigger('change:value', e.data);
    }).on("update:results"
    /* UPDATE_RESULTS */
    , e => {
      this.trigger('update:results', e.data);
    });
  }

  _prepareServiceForQuery(query) {
    if (!this._service) {
      this._service = this._account.api();
    }

    const service = this._service;
    service.removeAllRequests();
    service.resetParams(); // remove leading and trailing space

    query = query.replace(/^\s+/, '').replace(/\s+$/, ''); // replace spaces after commas

    query = query.replace(/,\s+/, ','); // replace trailing comma

    query = query.replace(/,$/, ''); // don't search, just reset if empty search string

    if (query.length === 0) {
      this._field.setResults([]);

      return;
    }

    if (/^(-?[\d\.]+),\s*(-?[\d\.]+)$/.test(query)) {
      // coordinate
      const request = this._account.api().endpoint('places').action("closest"
      /* CLOSEST */
      ).place(query);

      service.addRequest(request); // this._searchType = 'coord';
    } else if (/^(\d\d\d\d\d(?:-\d\d\d\d)?|[ABCEGHJKLMNPRSTVXY]\d[A-Z] ?\d[A-Z]\d)$/i.test(query)) {
      // zipcode
      // service.place(query);
      const request = this._account.api().endpoint('places').place(query);

      service.addRequest(request); // this._searchType = 'zipcode';
    } else {
      if (/^\w{4}$/.test(query)) {
        // try request for 4-letter airport code
        const request = this._account.api().endpoint('places').place(query);

        service.addRequest(request); // this._searchType = 'icao';
      }

      const parts = query.split(',');

      if (parts.length > 1) {
        query = `name:${parts[0]};altname:${parts[0]}`;

        if (parts.length === 3) {
          query += `,state:${parts[1]},country:${parts[2]}`;
        } else if (parts.length === 2 && parts[1].length > 0) {
          const val = parts[1];
          const altvals = [];
          let isState = false; // if length of val > 2 then check full state and/or country names

          if (val.length > 1) {
            const stateVals = (0, _strings.states)();
            const countryVals = (0, _strings.countries)();
            const allStates = (0, _utils.extend)({}, stateVals.us, stateVals.ca);
            const re = new RegExp(`^${val}`, 'i'); // states

            Object.keys(allStates).forEach(k => {
              if (re.test(allStates[k])) {
                altvals.push(k);
                isState = true;
              }
            }); // countries

            if (!isState) {
              Object.keys(countryVals).forEach(k => {
                if (re.test(countryVals[k])) {
                  altvals.push(k);
                }
              });
            }
          }

          query += `,state:^${val};country:^${val}`;

          if (altvals.length > 0) {
            altvals.forEach(v => {
              query += isState ? `;state:^${v}` : `;country:^${v}`;
            });
          }
        }
      } else {
        query = `name:^${parts[0]};altname:^${parts[0]}`;
      } // this._searchType = 'place';


      const request = this._account.api().endpoint('places').action("search"
      /* SEARCH */
      ).query(query).limit(20).sort('pop:-1,haszip:-1');

      service.addRequest(request);
    }
  }

}

var _default = PlaceSearchPanel;
exports.default = _default;
module.exports = exports.default;