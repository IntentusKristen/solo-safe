"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Panel = _interopRequireDefault(require("../ui/Panel"));

var _InfoPanelContentView = _interopRequireDefault(require("./InfoPanelContentView"));

var _InfoPanelView = _interopRequireDefault(require("./InfoPanelView"));

var _ActivityIndicator = _interopRequireDefault(require("../../ui/ActivityIndicator"));

var _utils = require("../../utils");

var _layout = require("../../utils/layout");

var icons = _interopRequireWildcard(require("../ui/icons"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * An `InfoPanel` is a panel component that is responsible for displaying a variety of content
 * related to map data, such as markers and/or polygons, or requesting and rendering data assocated
 * with a specific geographical coordinate.
 *
 * @export
 * @class InfoPanel
 * @extends {Panel<InfoPanelOptions, InfoPanelState>}
 */
class InfoPanel extends _Panel.default {
  /**
   * Initializes and returns an info panel instance for the specified configuration options.
   *
   * @param {InfoPanelOptions} [opts]
   * @memberof InfoPanel
   */
  constructor(opts) {
    opts = (0, _utils.extend)({
      metric: false,
      ui: {
        container: '.awxjs__app__ui-panel-info-container',
        inner: '.awxjs__app__ui-panel-info-inner',
        title: '.awxjs__app__ui-panel-info-title',
        content: '.awxjs__app__ui-panel-info-content',
        close: '.awxjs__app__ui-panel-info-close'
      }
    }, opts);
    opts.className = (0, _utils.isset)(opts.className) ? `app__ui-panel-info ${opts.className}` : 'app__ui-panel-info';
    super(opts);
    this._account = opts.account;
    this._indicator = new _ActivityIndicator.default();
    this.setState({
      visible: false
    });
    this._content = {};
    this.units = opts.metric ? "metric"
    /* Metric */
    : "imperial"
    /* Imperial */
    ;

    if (opts.sections) {
      Object.keys(opts.sections).forEach(key => {
        _InfoPanelView.default.setSection(key, opts.sections[key]);
      });
    }

    if (opts.views) {
      Object.keys(opts.views).forEach((key, index) => {
        const config = opts.views[key];
        const view = this.setContentView(key, config);

        if (view && index === 0) {
          this._contentView = view;
        }
      });
    }
  }

  get units() {
    return this._units;
  }

  set units(value) {
    if (value !== this._units) {
      this._units = value;

      if (this._contentView) {
        this._contentView.units = value;
      }

      this.trigger('change:units', {
        units: value
      });
    }
  }
  /**
   * Shows the info panel with optional title and data. If data is provided, it will be used
   * when rendering the current content view.
   *
   * To change the content view used, see `showContent()`.
   *
   * @param {string} [title]
   * @param {*} [data]
   * @returns {InfoPanel}
   * @memberof InfoPanel
   */


  show(title, data) {
    this.setState({
      visible: true
    });

    if (data) {
      this.update(data);
    }

    if (title) {
      this.setTitle(title);
    }

    this._updateSize();

    this.ui.content.css({
      opacity: 1
    });
    this.trigger('show');
    return this;
  }
  /**
   * Returns the DOM element container for the view content.
   *
   * @returns {*}
   * @memberof Panel
   */


  getContentContainer() {
    return this.ui.inner;
  }
  /**
   * Shows the info panel using the content view associated with the specified `key` and with
   * optional title and data.
   *
   * @param {string} key The key associated with the content view to use when rendering the panel content
   * @param {string} [title]
   * @param {*} [data]
   * @returns {InfoPanel}
   * @memberof InfoPanel
   */


  showContent(key, title, data) {
    const view = this._content[key];

    if (view) {
      view.units = this.units;

      if (view !== this._contentView) {
        this.reset();
        this._contentView = view;
      }

      if (!this._contentView.parent()) {
        this._contentView.addTo(this.ui.content);
      }

      if (data) {
        this.update(data);
      }

      this.trigger('change:content', {
        key
      });
      this.show(title, null);
    } else {
      console.error(`[Aeris] Invalid view key '${key}' requested for InfoPanel. Make sure view has been defined in the InfoPanel 'views' configuration.`);
    }

    return this;
  }
  /**
   * Adds a content view option to the panel and associates it with the specified key identifier.
   *
   * @param {string} key
   * @param {InfoPanelContentViewOptions} config
   * @returns {InfoPanelContentView}
   * @memberof InfoPanel
   */


  setContentView(key, config) {
    let view;

    if ((0, _utils.isPlainObject)(config)) {
      view = new _InfoPanelContentView.default(config);
    } else if (config instanceof _InfoPanelContentView.default) {
      view = config;
    }

    if (view) {
      view.on('load:start', () => {
        this._indicator.startAnimating();

        this.ui.content.css({
          opacity: 0
        });
        this.trigger('load:start');
      }).on('load:done', () => {
        this._indicator.stopAnimating();

        this.ui.content.css({
          opacity: 1
        });
        this.trigger('load:done');
      }).on('update', () => {
        this._updateSize();
      }).on('change:units', e => {
        this.units = e.data.units;
      });
      this._content[key] = view;
    }

    return view;
  }
  /**
   * Closes the info panel.
   *
   * @returns {InfoPanel}
   * @memberof InfoPanel
   */


  close() {
    this._indicator.stopAnimating();

    this.setHeight(0);
    this.ui.content.css({
      opacity: 0
    });
    this.setState({
      visible: false
    });
    this.trigger('close');
    setTimeout(() => {
      this.ui.content.empty();
    }, 500);
    return this;
  }
  /**
   * Sets the current title.
   *
   * @param {string} value
   * @returns {InfoPanel}
   * @memberof InfoPanel
   */


  setTitle(value) {
    this.ui.title.html(value);
    return this;
  }
  /**
   * Updates the content view using the specified data.
   *
   * @param {*} [data]
   * @returns {InfoPanel}
   * @memberof InfoPanel
   */


  update(data) {
    if (this._contentView) {
      this._contentView.update(data);
    }

    return this;
  }
  /**
   * Sets the width of the panel.
   *
   * @param {number} width
   * @returns {InfoPanel}
   * @memberof InfoPanel
   */


  setWidth(width) {
    this.$el.css({
      'max-width': `${width}px`
    });
    return this;
  }
  /**
   * Sets the maximum height for the panel. Depending on the internal content view, the actual
   * rendered height may be less than the value provided.
   *
   * @param {number} height
   * @returns {InfoPanel}
   * @memberof InfoPanel
   */


  setHeight(height) {
    this.$el.css({
      'max-height': `${height}px`
    });
    const innerBounds = this.ui.inner.bounds();

    this._indicator.$el.css({
      'max-height': `${height - innerBounds.top - 75}px`
    });

    return this;
  }
  /**
   * Sets the measurement units to display.
   *
   * @param {boolean} isMetric
   * @memberof InfoPanel
   */


  setMetric(isMetric) {
    this.opts.metric = isMetric;
    this.units = isMetric ? "metric"
    /* Metric */
    : "imperial"
    /* Imperial */
    ;
  }
  /**
   * Loads and renders data for the current content view.
   *
   * @param {*} [params] Parameters to use with the data request (optional)
   * @param {*} [append] Data to append to the loaded data that is also used in the content view (optional)
   * @memberof InfoPanel
   */


  load(params, append) {
    if (this._contentView) {
      this._contentView.load(this._account, params, append);
    } else {
      console.error('[Aeris] Cannot load data for InfoPanel, no active content view defined. Use `showContent(:key, :title, :data)` to set the active content view before calling `load()`.');
    }
  }
  /**
   * Resets the content view.
   *
   * @memberof InfoPanel
   */


  reset() {
    if (this._contentView) {
      this._contentView.remove();
    }

    this.ui.content.empty();
  }

  _render() {
    return `
			<div class="awxjs__app__ui-panel-info">
				<div class="awxjs__app__ui-panel-info-top">
					<div class="awxjs__app__ui-panel-info-title"></div>
				</div>
				<div class="awxjs__app__ui-panel-info-container">
					<div class="awxjs__app__ui-panel-info-inner">
						<div class="awxjs__app__ui-panel-info-content"></div>
					</div>
				</div>
				<button class="awxjs__app__ui-panel-info-close">
					${icons.close()}
				</button>
			</div>
		`;
  } // protected _layout() {
  // 	const $parent = this.parent();
  // 	if ($parent) {
  // 		// if width is less than mobile breakpoint, adjust width so it fits within the view and doesn't overlap
  // 		// the map control elements
  // 		if ($parent.width() < 600) {
  // 			const x = parseFloat(this.$el.css('left').replace(/[^\d-\.]/, ''));
  // 			this.setWidth(Math.min(400, $parent.width() - x * 2));
  // 			this.setHeight(400);
  // 		} else {
  // 			this.$el.css('max-width', 'auto');
  // 			this.setHeight($parent.height() - 100);
  // 		}
  // 	}
  // }
  // protected _shouldLayout(): boolean {
  // 	const $parent = this.parent();
  // 	if ($parent) {
  // 		return $parent.width() < 600;
  // 	}
  // 	return super._shouldLayout();
  // }


  _setupEvents() {
    super._setupEvents();

    this._indicator.appendTo(this.ui.inner);

    this.ui.close.on('click', () => {
      this.close();
    });
  }

  _updateSize() {
    if (!this.visible) return; // const size = windowSize();

    const parent = this.$el.parent();

    if (!parent) {
      return;
    }

    const parentBounds = parent.bounds(true);
    const bounds = this.$el.bounds(true);
    const innerBounds = this.ui.inner.bounds(true);
    const offset = bounds.top - parentBounds.top;
    let maxh = parentBounds.height - offset * 2 - 100;
    let h = Math.max(175, innerBounds.height + (innerBounds.top - bounds.top));
    if (maxh > 900) maxh = 900;
    const vp = (0, _layout.viewportSizeClass)(); // if width is less than mobile breakpoint, adjust width so it fits within the view and doesn't overlap
    // the map control elements

    if (vp.width === 'compact') {
      this.setWidth(parentBounds.width - bounds.left * 2);
      h = parentBounds.height * 0.5;
    } else if (bounds.width > parentBounds.width * 0.3) {
      this.setWidth(Math.max(300, Math.ceil(parentBounds.width * 0.3)));
    } else {
      this.setWidth(400);
    }

    if (this.$el.width() <= 320) {
      this.$el.addClass('awxjs__app__ui-panel-info-compact');
    } else {
      this.$el.removeClass('awxjs__app__ui-panel-info-compact');
    }

    this.setHeight(Math.min(maxh, h));
  }

}

var _default = InfoPanel;
exports.default = _default;
module.exports = exports.default;